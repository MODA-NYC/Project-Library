"use strict";

/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
(function (global, factory) {

	"use strict";

	if (typeof module === "object" && typeof module.exports === "object") {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call(Object);

	var support = {};

	function DOMEval(code, doc) {
		doc = doc || document;

		var script = doc.createElement("script");

		script.text = code;
		doc.head.appendChild(script).parentNode.removeChild(script);
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module


	var version = "3.2.1",


	// Define a local copy of jQuery
	jQuery = function (selector, context) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init(selector, context);
	},


	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([a-z])/g,


	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function (all, letter) {
		return letter.toUpperCase();
	};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function () {
			return slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function (num) {

			// Return all the elements in a clean array
			if (num == null) {
				return slice.call(this);
			}

			// Return just the one element from the set
			return num < 0 ? this[num + this.length] : this[num];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function (elems) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function (callback) {
			return jQuery.each(this, callback);
		},

		map: function (callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function () {
			return this.pushStack(slice.apply(this, arguments));
		},

		first: function () {
			return this.eq(0);
		},

		last: function () {
			return this.eq(-1);
		},

		eq: function (i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function () {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		    name,
		    src,
		    copy,
		    copyIsArray,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;

			// Skip the boolean and the target
			target = arguments[i] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if (typeof target !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {

			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {

				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {

						if (copyIsArray) {
							copyIsArray = false;
							clone = src && Array.isArray(src) ? src : [];
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function (msg) {
			throw new Error(msg);
		},

		noop: function () {},

		isFunction: function (obj) {
			return jQuery.type(obj) === "function";
		},

		isWindow: function (obj) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function (obj) {

			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type(obj);
			return (type === "number" || type === "string") &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN(obj - parseFloat(obj));
		},

		isPlainObject: function (obj) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if (!obj || toString.call(obj) !== "[object Object]") {
				return false;
			}

			proto = getProto(obj);

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if (!proto) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
			return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
		},

		isEmptyObject: function (obj) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for (name in obj) {
				return false;
			}
			return true;
		},

		type: function (obj) {
			if (obj == null) {
				return obj + "";
			}

			// Support: Android <=2.3 only (functionish RegExp)
			return typeof obj === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj;
		},

		// Evaluates a script in a global context
		globalEval: function (code) {
			DOMEval(code);
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function (string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		each: function (obj, callback) {
			var length,
			    i = 0;

			if (isArrayLike(obj)) {
				length = obj.length;
				for (; i < length; i++) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			} else {
				for (i in obj) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function (text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function (arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArrayLike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function (elem, arr, i) {
			return arr == null ? -1 : indexOf.call(arr, elem, i);
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function (first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			for (; j < len; j++) {
				first[i++] = second[j];
			}

			first.length = i;

			return first;
		},

		grep: function (elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function (elems, callback, arg) {
			var length,
			    value,
			    i = 0,
			    ret = [];

			// Go through the array, translating each of the items to their new values
			if (isArrayLike(elems)) {
				length = elems.length;
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

				// Go through every key on the object,
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function (fn, context) {
			var tmp, args, proxy;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			// Simulated bind
			args = slice.call(arguments, 2);
			proxy = function () {
				return fn.apply(context || this, args.concat(slice.call(arguments)));
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	if (typeof Symbol === "function") {
		jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
	}

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArrayLike(obj) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
		    type = jQuery.type(obj);

		if (type === "function" || jQuery.isWindow(obj)) {
			return false;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle =
	/*!
  * Sizzle CSS Selector Engine v2.3.3
  * https://sizzlejs.com/
  *
  * Copyright jQuery Foundation and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2016-08-08
  */
	function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,


		// Local document vars
		setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,


		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    sortOrder = function (a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},


		// Instance methods
		hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,

		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function (list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",


		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",


		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" + ")\\)|)",


		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + identifier + ")"),
			"CLASS": new RegExp("^\\.(" + identifier + ")"),
			"TAG": new RegExp("^(" + identifier + "|[*])"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,


		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,


		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function (_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ? escaped : high < 0 ?
			// BMP codepoint
			String.fromCharCode(high + 0x10000) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},


		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		    fcssescape = function (ch, asCodePoint) {
			if (asCodePoint) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if (ch === "\0") {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},


		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function () {
			setDocument();
		},
		    disabledAncestor = addCombinator(function (elem) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		}, { dir: "parentNode", next: "legend" });

		// Optimize for push.apply( _, NodeList )
		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
			// Support: Android<4.0
			// Detect silently failing push.apply
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ?

				// Leverage slice if possible
				function (target, els) {
					push_native.apply(target, slice.call(els));
				} :

				// Support: IE<9
				// Otherwise append directly
				function (target, els) {
					var j = target.length,
					    i = 0;
					// Can't trust NodeList.length
					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var m,
			    i,
			    elem,
			    nid,
			    match,
			    groups,
			    newSelector,
			    newContext = context && context.ownerDocument,


			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

			results = results || [];

			// Return early from calls with invalid selector or context
			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			// Try to shortcut find operations (as opposed to filters) in HTML documents
			if (!seed) {

				if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
					setDocument(context);
				}
				context = context || document;

				if (documentIsHTML) {

					// If the selector is sufficiently simple, try using a "get*By*" DOM method
					// (excepting DocumentFragment context, where the methods don't exist)
					if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

						// ID selector
						if (m = match[1]) {

							// Document context
							if (nodeType === 9) {
								if (elem = context.getElementById(m)) {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
									if (elem.id === m) {
										results.push(elem);
										return results;
									}
								} else {
									return results;
								}

								// Element context
							} else {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

									results.push(elem);
									return results;
								}
							}

							// Type selector
						} else if (match[2]) {
							push.apply(results, context.getElementsByTagName(selector));
							return results;

							// Class selector
						} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

							push.apply(results, context.getElementsByClassName(m));
							return results;
						}
					}

					// Take advantage of querySelectorAll
					if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {

						if (nodeType !== 1) {
							newContext = context;
							newSelector = selector;

							// qSA looks outside Element context, which is not what we want
							// Thanks to Andrew Dupont for this workaround technique
							// Support: IE <=8
							// Exclude object elements
						} else if (context.nodeName.toLowerCase() !== "object") {

							// Capture the context ID, setting it first if necessary
							if (nid = context.getAttribute("id")) {
								nid = nid.replace(rcssescape, fcssescape);
							} else {
								context.setAttribute("id", nid = expando);
							}

							// Prefix every selector in the list
							groups = tokenize(selector);
							i = groups.length;
							while (i--) {
								groups[i] = "#" + nid + " " + toSelector(groups[i]);
							}
							newSelector = groups.join(",");

							// Expand context for sibling selectors
							newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						}

						if (newSelector) {
							try {
								push.apply(results, newContext.querySelectorAll(newSelector));
								return results;
							} catch (qsaError) {} finally {
								if (nid === expando) {
									context.removeAttribute("id");
								}
							}
						}
					}
				}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		/**
   * Create key-value caches of limited size
   * @returns {function(string, object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */
		function createCache() {
			var keys = [];

			function cache(key, value) {
				// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
				if (keys.push(key + " ") > Expr.cacheLength) {
					// Only keep the most recent entries
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		/**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		/**
   * Support testing using an element
   * @param {Function} fn Passed the created element and returns a boolean result
   */
		function assert(fn) {
			var el = document.createElement("fieldset");

			try {
				return !!fn(el);
			} catch (e) {
				return false;
			} finally {
				// Remove from its parent by default
				if (el.parentNode) {
					el.parentNode.removeChild(el);
				}
				// release memory in IE
				el = null;
			}
		}

		/**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = arr.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		/**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;

			// Use IE sourceIndex if available on both nodes
			if (diff) {
				return diff;
			}

			// Check if b follows a
			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		/**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for :enabled/:disabled
   * @param {Boolean} disabled true for :disabled; false for :enabled
   */
		function createDisabledPseudo(disabled) {

			// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
			return function (elem) {

				// Only certain elements can match :enabled or :disabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
				if ("form" in elem) {

					// Check for inherited disabledness on relevant non-disabled elements:
					// * listed form-associated elements in a disabled fieldset
					//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
					// * option elements in a disabled optgroup
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
					// All such elements have a "form" property.
					if (elem.parentNode && elem.disabled === false) {

						// Option elements defer to a parent optgroup if present
						if ("label" in elem) {
							if ("label" in elem.parentNode) {
								return elem.parentNode.disabled === disabled;
							} else {
								return elem.disabled === disabled;
							}
						}

						// Support: IE 6 - 11
						// Use the isDisabled shortcut property to check for disabled fieldset ancestors
						return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
					}

					return elem.disabled === disabled;

					// Try to winnow out elements that can't be disabled before trusting the disabled property.
					// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
					// even exist on them, let alone have a boolean value.
				} else if ("label" in elem) {
					return elem.disabled === disabled;
				}

				// Remaining elements are neither :enabled nor :disabled
				return false;
			};
		}

		/**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		// Expose support vars for convenience
		support = Sizzle.support = {};

		/**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
		isXML = Sizzle.isXML = function (elem) {
			// documentElement is verified for cases where it doesn't yet exist
			// (such as loading iframes in IE - #4833)
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		/**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    subWindow,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			// Return early if doc is invalid or already selected
			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			// Update global variables
			document = doc;
			docElem = document.documentElement;
			documentIsHTML = !isXML(document);

			// Support: IE 9-11, Edge
			// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
			if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {

				// Support: IE 11, Edge
				if (subWindow.addEventListener) {
					subWindow.addEventListener("unload", unloadHandler, false);

					// Support: IE 9 - 10 only
				} else if (subWindow.attachEvent) {
					subWindow.attachEvent("onunload", unloadHandler);
				}
			}

			/* Attributes
   ---------------------------------------------------------------------- */

			// Support: IE<8
			// Verify that getAttribute really returns attributes and not properties
			// (excepting IE8 booleans)
			support.attributes = assert(function (el) {
				el.className = "i";
				return !el.getAttribute("className");
			});

			/* getElement(s)By*
   ---------------------------------------------------------------------- */

			// Check if getElementsByTagName("*") returns only elements
			support.getElementsByTagName = assert(function (el) {
				el.appendChild(document.createComment(""));
				return !el.getElementsByTagName("*").length;
			});

			// Support: IE<9
			support.getElementsByClassName = rnative.test(document.getElementsByClassName);

			// Support: IE<10
			// Check if getElementById returns elements by name
			// The broken getElementById methods don't pick up programmatically-set names,
			// so use a roundabout getElementsByName test
			support.getById = assert(function (el) {
				docElem.appendChild(el).id = expando;
				return !document.getElementsByName || !document.getElementsByName(expando).length;
			});

			// ID filter and find
			if (support.getById) {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var elem = context.getElementById(id);
						return elem ? [elem] : [];
					}
				};
			} else {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};

				// Support: IE 6 - 7 only
				// getElementById is not reliable as a find shortcut
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var node,
						    i,
						    elems,
						    elem = context.getElementById(id);

						if (elem) {

							// Verify the id attribute
							node = elem.getAttributeNode("id");
							if (node && node.value === id) {
								return [elem];
							}

							// Fall back on getElementsByName
							elems = context.getElementsByName(id);
							i = 0;
							while (elem = elems[i++]) {
								node = elem.getAttributeNode("id");
								if (node && node.value === id) {
									return [elem];
								}
							}
						}

						return [];
					}
				};
			}

			// Tag
			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);

					// DocumentFragment nodes don't have gEBTN
				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName(tag);

				// Filter out possible comments
				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			// Class
			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			/* QSA/matchesSelector
   ---------------------------------------------------------------------- */

			// QSA and matchesSelector support

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			rbuggyMatches = [];

			// qSa(:focus) reports false when true (Chrome 21)
			// We allow this because of a bug in IE8/9 that throws an error
			// whenever `document.activeElement` is accessed on an iframe
			// So, we allow :focus to pass through QSA all the time to avoid the IE error
			// See https://bugs.jquery.com/ticket/13378
			rbuggyQSA = [];

			if (support.qsa = rnative.test(document.querySelectorAll)) {
				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (el) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explicitly
					// setting a boolean content attribute,
					// since its presence should be enough
					// https://bugs.jquery.com/ticket/12359
					docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

					// Support: IE8, Opera 11-12.16
					// Nothing should be selected when empty strings follow ^= or $= or *=
					// The test attribute must be unknown in Opera but "safe" for WinRT
					// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
					if (el.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					// Support: IE8
					// Boolean attributes and "value" are not treated correctly
					if (!el.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
					if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here and will not see later tests
					if (!el.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					// Support: Safari 8+, iOS 8+
					// https://bugs.webkit.org/show_bug.cgi?id=136851
					// In-page `selector#id sibling-combinator selector` fails
					if (!el.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (el) {
					el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";

					// Support: Windows 8 Native Apps
					// The type and name attributes are restricted during .innerHTML assignment
					var input = document.createElement("input");
					input.setAttribute("type", "hidden");
					el.appendChild(input).setAttribute("name", "D");

					// Support: IE8
					// Enforce case-sensitivity of name attribute
					if (el.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here and will not see later tests
					if (el.querySelectorAll(":enabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Support: IE9-11+
					// IE's :disabled selector does not pick up the children of disabled fieldsets
					docElem.appendChild(el).disabled = true;
					if (el.querySelectorAll(":disabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Opera 10-11 does not throw on post-comma invalid pseudos
					el.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (el) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					support.disconnectedMatch = matches.call(el, "*");

					// This should fail with an exception
					// Gecko does not error, returns false instead
					matches.call(el, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			/* Contains
   ---------------------------------------------------------------------- */
			hasCompare = rnative.test(docElem.compareDocumentPosition);

			// Element contains another
			// Purposefully self-exclusive
			// As in, an element does not contain itself
			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};

			/* Sorting
   ---------------------------------------------------------------------- */

			// Document order sorting
			sortOrder = hasCompare ? function (a, b) {

				// Flag for duplicate removal
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

				// Otherwise we know they are disconnected
				1;

				// Disconnected nodes
				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

					// Choose the first element that is related to our preferred document
					if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					// Maintain original order
					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				// Exit early if the nodes are identical
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				// Parentless nodes are either documents or disconnected
				if (!aup || !bup) {
					return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

					// If the nodes are siblings, we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				// Walk down the tree looking for a discrepancy
				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck(ap[i], bp[i]) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return document;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			// Make sure that attribute selectors are quoted
			expr = expr.replace(rattributeQuotes, "='$1']");

			if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					// IE 9's matchesSelector returns false on disconnected nodes
					if (ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			// Set document vars if needed
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.escape = function (sel) {
			return (sel + "").replace(rcssescape, fcssescape);
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		/**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			// Unless we *know* we can detect duplicates, assume their presence
			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			// Clear input after sorting to release objects
			// See https://github.com/jquery/sizzle/pull/225
			sortInput = null;

			return results;
		};

		/**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				// If no nodeType, this is expected to be an array
				while (node = elem[i++]) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (jQuery #11153)
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					// Traverse its children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes

			return ret;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function (match) {
					match[1] = match[1].replace(runescape, funescape);

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function (match) {
					/* matches from matchExpr["CHILD"]
     	1 type (only|nth|...)
     	2 what (child|of-type)
     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
     	4 xn-component of xn+y argument ([+-]?\d*n|)
     	5 sign of xn-component
     	6 x of xn-component
     	7 sign of y-component
     	8 y of y-component
     */
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						// nth-* requires argument
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");

						// other types prohibit arguments
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function (match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					// Accept quoted arguments as-is
					if (match[3]) {
						match[2] = match[4] || match[5] || "";

						// Strip excess characters from unquoted arguments
					} else if (unquoted && rpseudo.test(unquoted) && (
					// Get excess from tokenize (recursively)
					excess = tokenize(unquoted, true)) && (
					// advance to the next closing parenthesis
					excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						// excess is a negative index
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function (nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function (className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function (name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function (type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    uniqueCache,
						    outerCache,
						    node,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType,
						    diff = false;

						if (parent) {

							// :(first|last|only)-(child|of-type)
							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							// non-xml :nth-child(...) stores cache data on `parent`
							if (forward && useCache) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[expando] || (node[expando] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

								cache = uniqueCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = nodeIndex && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (

								// Fallback to seeking `elem` from the start
								diff = nodeIndex = 0) || start.pop()) {

									// When found, cache indexes on `parent` and break
									if (node.nodeType === 1 && ++diff && node === elem) {
										uniqueCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}
							} else {
								// Use previously-cached element index if available
								if (useCache) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[expando] || (node[expando] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if (diff === false) {
									// Use the same loop as above to seek `elem` from the start
									while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

										if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

											// Cache the index of each encountered element
											if (useCache) {
												outerCache = node[expando] || (node[expando] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

												uniqueCache[type] = [dirruns, diff];
											}

											if (node === elem) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function (pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				// Potentially complex pseudos
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						// Match elements unmatched by `matcher`
						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				// "Whether an element is represented by a :lang() selector
				// is based solely on the element's language value
				// being equal to the identifier C,
				// or beginning with the identifier C immediately followed by "-".
				// The matching of C against the element's language value is performed case-insensitively.
				// The identifier C does not have to be a valid language name."
				// http://www.w3.org/TR/selectors/#lang-pseudo
				"lang": markFunction(function (lang) {
					// lang value must be a valid identifier
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				// Miscellaneous
				"target": function (elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function (elem) {
					return elem === docElem;
				},

				"focus": function (elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				// Boolean properties
				"enabled": createDisabledPseudo(false),
				"disabled": createDisabledPseudo(true),

				"checked": function (elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function (elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				// Contents
				"empty": function (elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
					//   but not by others (comment: 8; processing instruction: 7; etc.)
					// nodeType < 6 works because attributes (2) do not appear as children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function (elem) {
					return !Expr.pseudos["empty"](elem);
				},

				// Element/input types
				"header": function (elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function (elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function (elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function (elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				// Position-in-collection
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Add button/input type pseudos
		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		// Easy API for creating new setFilters
		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				// Combinators
				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,
						// Cast descendant combinators to space
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
			// Cache the tokens
			tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    skip = combinator.next,
			    key = skip || dir,
			    checkNonElements = base && key === "parentNode",
			    doneName = done++;

			return combinator.first ?
			// Check against closest ancestor/preceding element
			function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function (elem, context, xml) {
				var oldCache,
				    uniqueCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

							if (skip && skip === elem.nodeName.toLowerCase()) {
								elem = elem[dir] || elem;
							} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

								// Assign to newCache so results back-propagate to previous elements
								return newCache[2] = oldCache[2];
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[key] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,


				// Get initial elements from seed or context
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || (seed ? preFilter : preexisting || postFilter) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results : matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									// Restore matcherIn since elem is not yet a final match
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,


			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function (seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]("*", outermost),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						if (!context && elem.ownerDocument !== document) {
							setDocument(elem);
							xml = !documentIsHTML;
						}
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context || document, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if (bySet) {
						// They will have gone through all possible matchers
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						// Reintegrate element matches to eliminate the need for sorting
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense(setMatched);
					}

					// Add matches to results
					push.apply(results, setMatched);

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				// Override manipulation of globals by nested matchers
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				// Save selector and tokenization
				cached.selector = selector;
			}
			return cached;
		};

		/**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			// Try to minimize operations if there is only one selector in the list and no seed
			// (the latter of which guarantees us context)
			if (match.length === 1) {

				// Reduce context if the leading compound selector is an ID
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

						// Precompiled matchers will still verify ancestry, so step up a level
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					// Abort if we hit a combinator
					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						// Search, expanding context for leading sibling combinators
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

							// If seed is empty or no tokens remain, we can return early
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			// Compile and execute a filtering function if one is not provided
			// Provide `match` to avoid retokenization if we modified the selector above
			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};

		// One-time assignments

		// Sort stability
		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		// Support: Chrome 14-35+
		// Always assume duplicates if they aren't passed to the comparison function
		support.detectDuplicates = !!hasDuplicate;

		// Initialize against the default document
		setDocument();

		// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
		// Detached nodes confoundingly follow *each other*
		support.sortDetached = assert(function (el) {
			// Should return 1, but returns 4 (following)
			return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
		});

		// Support: IE<8
		// Prevent attribute/property "interpolation"
		// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!assert(function (el) {
			el.innerHTML = "<a href='#'></a>";
			return el.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		// Support: IE<9
		// Use defaultValue in place of getAttribute("value")
		if (!support.attributes || !assert(function (el) {
			el.innerHTML = "<input/>";
			el.firstChild.setAttribute("value", "");
			return el.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		// Support: IE<9
		// Use getAttributeNode to fetch booleans when getAttribute lies
		if (!assert(function (el) {
			return el.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;

	var dir = function (elem, dir, until) {
		var matched = [],
		    truncate = until !== undefined;

		while ((elem = elem[dir]) && elem.nodeType !== 9) {
			if (elem.nodeType === 1) {
				if (truncate && jQuery(elem).is(until)) {
					break;
				}
				matched.push(elem);
			}
		}
		return matched;
	};

	var siblings = function (n, elem) {
		var matched = [];

		for (; n; n = n.nextSibling) {
			if (n.nodeType === 1 && n !== elem) {
				matched.push(n);
			}
		}

		return matched;
	};

	var rneedsContext = jQuery.expr.match.needsContext;

	function nodeName(elem, name) {

		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	};
	var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, not) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		// Single element
		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if (typeof qualifier !== "string") {
			return jQuery.grep(elements, function (elem) {
				return indexOf.call(qualifier, elem) > -1 !== not;
			});
		}

		// Simple selector that can be filtered directly, removing non-Elements
		if (risSimple.test(qualifier)) {
			return jQuery.filter(qualifier, elements, not);
		}

		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter(qualifier, elements);
		return jQuery.grep(elements, function (elem) {
			return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1;
		});
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		if (elems.length === 1 && elem.nodeType === 1) {
			return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
		}

		return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function (selector) {
			var i,
			    ret,
			    len = this.length,
			    self = this;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			ret = this.pushStack([]);

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			return len > 1 ? jQuery.uniqueSort(ret) : ret;
		},
		filter: function (selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function (selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function (selector) {
			return !!winnow(this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});

	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,


	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	    init = jQuery.fn.init = function (selector, context, root) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if (!selector) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if (typeof selector === "string") {
			if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			// Match html or make sure no context is specified for #id
			if (match && (match[1] || !context)) {

				// HANDLE: $(html) -> $(array)
				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					// HANDLE: $(html, props)
					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {

							// Properties of context are called as methods if possible
							if (jQuery.isFunction(this[match])) {
								this[match](context[match]);

								// ...and otherwise set as attributes
							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;

					// HANDLE: $(#id)
				} else {
					elem = document.getElementById(match[2]);

					if (elem) {

						// Inject the element directly into the jQuery object
						this[0] = elem;
						this.length = 1;
					}
					return this;
				}

				// HANDLE: $(expr, $(...))
			} else if (!context || context.jquery) {
				return (context || root).find(selector);

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor(context).find(selector);
			}

			// HANDLE: $(DOMElement)
		} else if (selector.nodeType) {
			this[0] = selector;
			this.length = 1;
			return this;

			// HANDLE: $(function)
			// Shortcut for document ready
		} else if (jQuery.isFunction(selector)) {
			return root.ready !== undefined ? root.ready(selector) :

			// Execute immediately if ready is not present
			selector(jQuery);
		}

		return jQuery.makeArray(selector, this);
	};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,


	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.fn.extend({
		has: function (target) {
			var targets = jQuery(target, this),
			    l = targets.length;

			return this.filter(function () {
				var i = 0;
				for (; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function (selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    targets = typeof selectors !== "string" && jQuery(selectors);

			// Positional selectors never match, since there's no _selection_ context
			if (!rneedsContext.test(selectors)) {
				for (; i < l; i++) {
					for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

						// Always skip document fragments
						if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

							matched.push(cur);
							break;
						}
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
		},

		// Determine the position of an element within the set
		index: function (elem) {

			// No argument, return index in parent
			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if (typeof elem === "string") {
				return indexOf.call(jQuery(elem), this[0]);
			}

			// Locate the position of the desired element
			return indexOf.call(this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem);
		},

		add: function (selector, context) {
			return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function (selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		while ((cur = cur[dir]) && cur.nodeType !== 1) {}
		return cur;
	}

	jQuery.each({
		parent: function (elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function (elem) {
			return dir(elem, "parentNode");
		},
		parentsUntil: function (elem, i, until) {
			return dir(elem, "parentNode", until);
		},
		next: function (elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function (elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function (elem) {
			return dir(elem, "nextSibling");
		},
		prevAll: function (elem) {
			return dir(elem, "previousSibling");
		},
		nextUntil: function (elem, i, until) {
			return dir(elem, "nextSibling", until);
		},
		prevUntil: function (elem, i, until) {
			return dir(elem, "previousSibling", until);
		},
		siblings: function (elem) {
			return siblings((elem.parentNode || {}).firstChild, elem);
		},
		children: function (elem) {
			return siblings(elem.firstChild);
		},
		contents: function (elem) {
			if (nodeName(elem, "iframe")) {
				return elem.contentDocument;
			}

			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
			// Treat the template element as a regular one in browsers that
			// don't support it.
			if (nodeName(elem, "template")) {
				elem = elem.content || elem;
			}

			return jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var matched = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				matched = jQuery.filter(selector, matched);
			}

			if (this.length > 1) {

				// Remove duplicates
				if (!guaranteedUnique[name]) {
					jQuery.uniqueSort(matched);
				}

				// Reverse order for parents* and prev-derivatives
				if (rparentsprev.test(name)) {
					matched.reverse();
				}
			}

			return this.pushStack(matched);
		};
	});
	var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

	// Convert String-formatted options into Object-formatted ones
	function createOptions(options) {
		var object = {};
		jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
  * Create a callback list using the following parameters:
  *
  *	options: an optional list of space-separated options that will change how
  *			the callback list behaves or a more traditional option object
  *
  * By default a callback list will act like an event callback list and can be
  * "fired" multiple times.
  *
  * Possible options:
  *
  *	once:			will ensure the callback list can only be fired once (like a Deferred)
  *
  *	memory:			will keep track of previous values and will call any callback added
  *					after the list has been fired right away with the latest "memorized"
  *					values (like a Deferred)
  *
  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
  *
  *	stopOnFalse:	interrupt callings when a callback returns false
  *
  */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

		var // Flag to know if list is currently firing
		firing,


		// Last fire value for non-forgettable lists
		memory,


		// Flag to know if list was already fired
		fired,


		// Flag to prevent firing
		locked,


		// Actual callback list
		list = [],


		// Queue of execution data for repeatable lists
		queue = [],


		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,


		// Fire callbacks
		fire = function () {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for (; queue.length; firingIndex = -1) {
				memory = queue.shift();
				while (++firingIndex < list.length) {

					// Run callback and check for early termination
					if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if (!options.memory) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if (locked) {

				// Keep an empty list if we have data for future add calls
				if (memory) {
					list = [];

					// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},


		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function () {
				if (list) {

					// If we have memory from a past run, we should fire after adding
					if (memory && !firing) {
						firingIndex = list.length - 1;
						queue.push(memory);
					}

					(function add(args) {
						jQuery.each(args, function (_, arg) {
							if (jQuery.isFunction(arg)) {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && jQuery.type(arg) !== "string") {

								// Inspect recursively
								add(arg);
							}
						});
					})(arguments);

					if (memory && !firing) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function () {
				jQuery.each(arguments, function (_, arg) {
					var index;
					while ((index = jQuery.inArray(arg, list, index)) > -1) {
						list.splice(index, 1);

						// Handle firing indexes
						if (index <= firingIndex) {
							firingIndex--;
						}
					}
				});
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function (fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function () {
				if (list) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function () {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function () {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function () {
				locked = queue = [];
				if (!memory && !firing) {
					list = memory = "";
				}
				return this;
			},
			locked: function () {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function (context, args) {
				if (!locked) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					queue.push(args);
					if (!firing) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function () {
				self.fireWith(this, arguments);
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function () {
				return !!fired;
			}
		};

		return self;
	};

	function Identity(v) {
		return v;
	}
	function Thrower(ex) {
		throw ex;
	}

	function adoptValue(value, resolve, reject, noValue) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if (value && jQuery.isFunction(method = value.promise)) {
				method.call(value).done(resolve).fail(reject);

				// Other thenables
			} else if (value && jQuery.isFunction(method = value.then)) {
				method.call(value, resolve, reject);

				// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply(undefined, [value].slice(noValue));
			}

			// For Promises/A+, convert exceptions into rejections
			// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
			// Deferred#then to conditionally suppress rejection.
		} catch (value) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply(undefined, [value]);
		}
	}

	jQuery.extend({

		Deferred: function (func) {
			var tuples = [

			// action, add listener, callbacks,
			// ... .then handlers, argument index, [final state]
			["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
			    state = "pending",
			    promise = {
				state: function () {
					return state;
				},
				always: function () {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				"catch": function (fn) {
					return promise.then(null, fn);
				},

				// Keep pipe for back-compat
				pipe: function () /* fnDone, fnFail, fnProgress */{
					var fns = arguments;

					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
								} else {
									newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},
				then: function (onFulfilled, onRejected, onProgress) {
					var maxDepth = 0;
					function resolve(depth, deferred, handler, special) {
						return function () {
							var that = this,
							    args = arguments,
							    mightThrow = function () {
								var returned, then;

								// Support: Promises/A+ section 2.3.3.3.3
								// https://promisesaplus.com/#point-59
								// Ignore double-resolution attempts
								if (depth < maxDepth) {
									return;
								}

								returned = handler.apply(that, args);

								// Support: Promises/A+ section 2.3.1
								// https://promisesaplus.com/#point-48
								if (returned === deferred.promise()) {
									throw new TypeError("Thenable self-resolution");
								}

								// Support: Promises/A+ sections 2.3.3.1, 3.5
								// https://promisesaplus.com/#point-54
								// https://promisesaplus.com/#point-75
								// Retrieve `then` only once
								then = returned && (

								// Support: Promises/A+ section 2.3.4
								// https://promisesaplus.com/#point-64
								// Only check objects and functions for thenability
								typeof returned === "object" || typeof returned === "function") && returned.then;

								// Handle a returned thenable
								if (jQuery.isFunction(then)) {

									// Special processors (notify) just wait for resolution
									if (special) {
										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

										// Normal processors (resolve) also hook into progress
									} else {

										// ...and disregard older resolution values
										maxDepth++;

										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
									}

									// Handle all other returned values
								} else {

									// Only substitute handlers pass on context
									// and multiple values (non-spec behavior)
									if (handler !== Identity) {
										that = undefined;
										args = [returned];
									}

									// Process the value(s)
									// Default process is resolve
									(special || deferred.resolveWith)(that, args);
								}
							},


							// Only normal processors (resolve) catch and reject exceptions
							process = special ? mightThrow : function () {
								try {
									mightThrow();
								} catch (e) {

									if (jQuery.Deferred.exceptionHook) {
										jQuery.Deferred.exceptionHook(e, process.stackTrace);
									}

									// Support: Promises/A+ section 2.3.3.3.4.1
									// https://promisesaplus.com/#point-61
									// Ignore post-resolution exceptions
									if (depth + 1 >= maxDepth) {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if (handler !== Thrower) {
											that = undefined;
											args = [e];
										}

										deferred.rejectWith(that, args);
									}
								}
							};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if (depth) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if (jQuery.Deferred.getStackHook) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout(process);
							}
						};
					}

					return jQuery.Deferred(function (newDefer) {

						// progress_handlers.add( ... )
						tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

						// fulfilled_handlers.add( ... )
						tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));

						// rejected_handlers.add( ... )
						tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower));
					}).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function (obj) {
					return obj != null ? jQuery.extend(obj, promise) : promise;
				}
			},
			    deferred = {};

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[5];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[3 - i][2].disable,

					// progress_callbacks.lock
					tuples[0][2].lock);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add(tuple[3].fire);

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function (singleValue) {
			var

			// count of uncompleted subordinates
			remaining = arguments.length,


			// count of unprocessed arguments
			i = remaining,


			// subordinate fulfillment data
			resolveContexts = Array(i),
			    resolveValues = slice.call(arguments),


			// the master Deferred
			master = jQuery.Deferred(),


			// subordinate callback factory
			updateFunc = function (i) {
				return function (value) {
					resolveContexts[i] = this;
					resolveValues[i] = arguments.length > 1 ? slice.call(arguments) : value;
					if (! --remaining) {
						master.resolveWith(resolveContexts, resolveValues);
					}
				};
			};

			// Single- and empty arguments are adopted like Promise.resolve
			if (remaining <= 1) {
				adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if (master.state() === "pending" || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while (i--) {
				adoptValue(resolveValues[i], updateFunc(i), master.reject);
			}

			return master.promise();
		}
	});

	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function (error, stack) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
			window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
		}
	};

	jQuery.readyException = function (error) {
		window.setTimeout(function () {
			throw error;
		});
	};

	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function (fn) {

		readyList.then(fn)

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch(function (error) {
			jQuery.readyException(error);
		});

		return this;
	};

	jQuery.extend({

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function (wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);
		}
	});

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener("DOMContentLoaded", completed);
		window.removeEventListener("load", completed);
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout(jQuery.ready);
	} else {

		// Use the handy event callback
		document.addEventListener("DOMContentLoaded", completed);

		// A fallback to window.onload, that will always work
		window.addEventListener("load", completed);
	}

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function (elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    len = elems.length,
		    bulk = key == null;

		// Sets many values
		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {

				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function (elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		if (chainable) {
			return elems;
		}

		// Gets
		if (bulk) {
			return fn.call(elems);
		}

		return len ? fn(elems[0], key) : emptyGet;
	};
	var acceptData = function (owner) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
	};

	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function (owner) {

			// Check if the owner object already has a cache
			var value = owner[this.expando];

			// If not, create one
			if (!value) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if (acceptData(owner)) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if (owner.nodeType) {
						owner[this.expando] = value;

						// Otherwise secure it in a non-enumerable property
						// configurable must be true to allow the property to be
						// deleted when data is removed
					} else {
						Object.defineProperty(owner, this.expando, {
							value: value,
							configurable: true
						});
					}
				}
			}

			return value;
		},
		set: function (owner, data, value) {
			var prop,
			    cache = this.cache(owner);

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if (typeof data === "string") {
				cache[jQuery.camelCase(data)] = value;

				// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for (prop in data) {
					cache[jQuery.camelCase(prop)] = data[prop];
				}
			}
			return cache;
		},
		get: function (owner, key) {
			return key === undefined ? this.cache(owner) :

			// Always use camelCase key (gh-2257)
			owner[this.expando] && owner[this.expando][jQuery.camelCase(key)];
		},
		access: function (owner, key, value) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if (key === undefined || key && typeof key === "string" && value === undefined) {

				return this.get(owner, key);
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set(owner, key, value);

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function (owner, key) {
			var i,
			    cache = owner[this.expando];

			if (cache === undefined) {
				return;
			}

			if (key !== undefined) {

				// Support array or space separated string of keys
				if (Array.isArray(key)) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map(jQuery.camelCase);
				} else {
					key = jQuery.camelCase(key);

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
				}

				i = key.length;

				while (i--) {
					delete cache[key[i]];
				}
			}

			// Remove the expando if there's no more data
			if (key === undefined || jQuery.isEmptyObject(cache)) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if (owner.nodeType) {
					owner[this.expando] = undefined;
				} else {
					delete owner[this.expando];
				}
			}
		},
		hasData: function (owner) {
			var cache = owner[this.expando];
			return cache !== undefined && !jQuery.isEmptyObject(cache);
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();

	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /[A-Z]/g;

	function getData(data) {
		if (data === "true") {
			return true;
		}

		if (data === "false") {
			return false;
		}

		if (data === "null") {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if (data === +data + "") {
			return +data;
		}

		if (rbrace.test(data)) {
			return JSON.parse(data);
		}

		return data;
	}

	function dataAttr(elem, key, data) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {
			name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = getData(data);
				} catch (e) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function (elem) {
			return dataUser.hasData(elem) || dataPriv.hasData(elem);
		},

		data: function (elem, name, data) {
			return dataUser.access(elem, name, data);
		},

		removeData: function (elem, name) {
			dataUser.remove(elem, name);
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function (elem, name, data) {
			return dataPriv.access(elem, name, data);
		},

		_removeData: function (elem, name) {
			dataPriv.remove(elem, name);
		}
	});

	jQuery.fn.extend({
		data: function (key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = dataUser.get(elem);

					if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
						i = attrs.length;
						while (i--) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = jQuery.camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						dataPriv.set(elem, "hasDataAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if (typeof key === "object") {
				return this.each(function () {
					dataUser.set(this, key);
				});
			}

			return access(this, function (value) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if (elem && value === undefined) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get(elem, key);
					if (data !== undefined) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr(elem, key);
					if (data !== undefined) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each(function () {

					// We always store the camelCased key
					dataUser.set(this, key, value);
				});
			}, null, value, arguments.length > 1, null, true);
		},

		removeData: function (key) {
			return this.each(function () {
				dataUser.remove(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function (elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = dataPriv.get(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || Array.isArray(data)) {
						queue = dataPriv.access(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function (elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function () {
				jQuery.dequeue(elem, type);
			};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function (elem, type) {
			var key = type + "queueHooks";
			return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					dataPriv.remove(elem, [type + "queue", key]);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function (type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				// Ensure a hooks for this queue
				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function (type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function (type) {
			return this.queue(type || "fx", []);
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function (type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function () {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = dataPriv.get(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHiddenWithinTree = function (elem, el) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" || elem.style.display === "" &&

		// Otherwise, check computed style
		// Support: Firefox <=43 - 45
		// Disconnected elements can have computed display: none, so first confirm that elem is
		// in the document.
		jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
	};

	var swap = function (elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		// Remember the old values, and insert the new ones
		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		// Revert the old values
		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	function adjustCSS(elem, prop, valueParts, tween) {
		var adjusted,
		    scale = 1,
		    maxIterations = 20,
		    currentValue = tween ? function () {
			return tween.cur();
		} : function () {
			return jQuery.css(elem, prop, "");
		},
		    initial = currentValue(),
		    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


		// Starting value computation is required for potential unit mismatches
		initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

		if (initialInUnit && initialInUnit[3] !== unit) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[3];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style(elem, prop, initialInUnit + unit);

				// Update scale, tolerating zero or NaN from tween.cur()
				// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
		}

		if (valueParts) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
			if (tween) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}

	var defaultDisplayMap = {};

	function getDefaultDisplay(elem) {
		var temp,
		    doc = elem.ownerDocument,
		    nodeName = elem.nodeName,
		    display = defaultDisplayMap[nodeName];

		if (display) {
			return display;
		}

		temp = doc.body.appendChild(doc.createElement(nodeName));
		display = jQuery.css(temp, "display");

		temp.parentNode.removeChild(temp);

		if (display === "none") {
			display = "block";
		}
		defaultDisplayMap[nodeName] = display;

		return display;
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    values = [],
		    index = 0,
		    length = elements.length;

		// Determine new display value for elements that need to change
		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			display = elem.style.display;
			if (show) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if (display === "none") {
					values[index] = dataPriv.get(elem, "display") || null;
					if (!values[index]) {
						elem.style.display = "";
					}
				}
				if (elem.style.display === "" && isHiddenWithinTree(elem)) {
					values[index] = getDefaultDisplay(elem);
				}
			} else {
				if (display !== "none") {
					values[index] = "none";

					// Remember what we're overwriting
					dataPriv.set(elem, "display", display);
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for (index = 0; index < length; index++) {
			if (values[index] != null) {
				elements[index].style.display = values[index];
			}
		}

		return elements;
	}

	jQuery.fn.extend({
		show: function () {
			return showHide(this, true);
		},
		hide: function () {
			return showHide(this);
		},
		toggle: function (state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHiddenWithinTree(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});
	var rcheckableType = /^(?:checkbox|radio)$/i;

	var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;

	var rscriptType = /^$|\/(?:java|ecma)script/i;

	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [1, "<select multiple='multiple'>", "</select>"],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [1, "<table>", "</table>"],
		col: [2, "<table><colgroup>", "</colgroup></table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: [0, "", ""]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll(context, tag) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if (typeof context.getElementsByTagName !== "undefined") {
			ret = context.getElementsByTagName(tag || "*");
		} else if (typeof context.querySelectorAll !== "undefined") {
			ret = context.querySelectorAll(tag || "*");
		} else {
			ret = [];
		}

		if (tag === undefined || tag && nodeName(context, tag)) {
			return jQuery.merge([context], ret);
		}

		return ret;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval(elems, refElements) {
		var i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
		}
	}

	var rhtml = /<|&#?\w+;/;

	function buildFragment(elems, context, scripts, selection, ignored) {
		var elem,
		    tmp,
		    tag,
		    wrap,
		    contains,
		    j,
		    fragment = context.createDocumentFragment(),
		    nodes = [],
		    i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			elem = elems[i];

			if (elem || elem === 0) {

				// Add nodes directly
				if (jQuery.type(elem) === "object") {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

					// Convert non-html into a text node
				} else if (!rhtml.test(elem)) {
					nodes.push(context.createTextNode(elem));

					// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild(context.createElement("div"));

					// Deserialize a standard representation
					tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
					wrap = wrapMap[tag] || wrapMap._default;
					tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while (j--) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, tmp.childNodes);

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while (elem = nodes[i++]) {

			// Skip elements already in the context collection (trac-4087)
			if (selection && jQuery.inArray(elem, selection) > -1) {
				if (ignored) {
					ignored.push(elem);
				}
				continue;
			}

			contains = jQuery.contains(elem.ownerDocument, elem);

			// Append to fragment
			tmp = getAll(fragment.appendChild(elem), "script");

			// Preserve script evaluation history
			if (contains) {
				setGlobalEval(tmp);
			}

			// Capture executables
			if (scripts) {
				j = 0;
				while (elem = tmp[j++]) {
					if (rscriptType.test(elem.type || "")) {
						scripts.push(elem);
					}
				}
			}
		}

		return fragment;
	}

	(function () {
		var fragment = document.createDocumentFragment(),
		    div = fragment.appendChild(document.createElement("div")),
		    input = document.createElement("input");

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute("type", "radio");
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");

		div.appendChild(input);

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();
	var documentElement = document.documentElement;

	var rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	function on(elem, types, selector, data, fn, one) {
		var origFn, type;

		// Types can be a map of types/handlers
		if (typeof types === "object") {

			// ( types-Object, selector, data )
			if (typeof selector !== "string") {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for (type in types) {
				on(elem, type, selector, data, types[type], one);
			}
			return elem;
		}

		if (data == null && fn == null) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if (fn == null) {
			if (typeof selector === "string") {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if (fn === false) {
			fn = returnFalse;
		} else if (!fn) {
			return elem;
		}

		if (one === 1) {
			origFn = fn;
			fn = function (event) {

				// Can use an empty set, since event contains the info
				jQuery().off(event);
				return origFn.apply(this, arguments);
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
		}
		return elem.each(function () {
			jQuery.event.add(this, types, fn, data, selector);
		});
	}

	/*
  * Helper functions for managing events -- not part of the public interface.
  * Props to Dean Edwards' addEvent library for many of the ideas.
  */
	jQuery.event = {

		global: {},

		add: function (elem, types, handler, data, selector) {

			var handleObjIn,
			    eventHandle,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.get(elem);

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if (!elemData) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if (selector) {
				jQuery.find.matchesSelector(documentElement, selector);
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// There *must* be a type, no attaching namespace-only handlers
				if (!type) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				// Init the event handler queue if we're the first
				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}
		},

		// Detach an event or set of events from an element
		remove: function (elem, types, handler, selector, mappedTypes) {

			var j,
			    origCount,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				// Remove matching events
				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove data and the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				dataPriv.remove(elem, "handle events");
			}
		},

		dispatch: function (nativeEvent) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix(nativeEvent);

			var i,
			    j,
			    ret,
			    matched,
			    handleObj,
			    handlerQueue,
			    args = new Array(arguments.length),
			    handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;

			for (i = 1; i < arguments.length; i++) {
				args[i] = arguments[i];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function (event, handlers) {
			var i,
			    handleObj,
			    sel,
			    matchedHandlers,
			    matchedSelectors,
			    handlerQueue = [],
			    delegateCount = handlers.delegateCount,
			    cur = event.target;

			// Find delegate handlers
			if (delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!(event.type === "click" && event.button >= 1)) {

				for (; cur !== this; cur = cur.parentNode || this) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
						matchedHandlers = [];
						matchedSelectors = {};
						for (i = 0; i < delegateCount; i++) {
							handleObj = handlers[i];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if (matchedSelectors[sel] === undefined) {
								matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matchedSelectors[sel]) {
								matchedHandlers.push(handleObj);
							}
						}
						if (matchedHandlers.length) {
							handlerQueue.push({ elem: cur, handlers: matchedHandlers });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if (delegateCount < handlers.length) {
				handlerQueue.push({ elem: cur, handlers: handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		addProp: function (name, hook) {
			Object.defineProperty(jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction(hook) ? function () {
					if (this.originalEvent) {
						return hook(this.originalEvent);
					}
				} : function () {
					if (this.originalEvent) {
						return this.originalEvent[name];
					}
				},

				set: function (value) {
					Object.defineProperty(this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					});
				}
			});
		},

		fix: function (originalEvent) {
			return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function () {
					if (this !== safeActiveElement() && this.focus) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function () {
					if (this === safeActiveElement() && this.blur) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function () {
					if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function (event) {
					return nodeName(event.target, "a");
				}
			},

			beforeunload: {
				postDispatch: function (event) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function (elem, type, handle) {

		// This "if" is needed for plain objects
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle);
		}
	};

	jQuery.Event = function (src, props) {

		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

			// Support: Android <=2.3 only
			src.returnValue === false ? returnTrue : returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function () {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if (e && !this.isSimulated) {
				e.preventDefault();
			}
		},
		stopPropagation: function () {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function () {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each({
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function (event) {
			var button = event.button;

			// Add which for key events
			if (event.which == null && rkeyEvent.test(event.type)) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
				if (button & 1) {
					return 1;
				}

				if (button & 2) {
					return 3;
				}

				if (button & 4) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp);

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function (event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	jQuery.fn.extend({

		on: function (types, selector, data, fn) {
			return on(this, types, selector, data, fn);
		},
		one: function (types, selector, data, fn) {
			return on(this, types, selector, data, fn, 1);
		},
		off: function (types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if (typeof types === "object") {

				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		}
	});

	var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,


	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,


	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rscriptTypeMasked = /^true\/(.*)/,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget(elem, content) {
		if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

			return jQuery(">tbody", elem)[0] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		var match = rscriptTypeMasked.exec(elem.type);

		if (match) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	function cloneCopyEvent(src, dest) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if (dest.nodeType !== 1) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if (dataPriv.hasData(src)) {
			pdataOld = dataPriv.access(src);
			pdataCur = dataPriv.set(dest, pdataOld);
			events = pdataOld.events;

			if (events) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}
		}

		// 2. Copy user data
		if (dataUser.hasData(src)) {
			udataOld = dataUser.access(src);
			udataCur = jQuery.extend({}, udataOld);

			dataUser.set(dest, udataCur);
		}
	}

	// Fix IE bugs, see support tests
	function fixInput(src, dest) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.checked = src.checked;

			// Fails to return the selected option to the default selected state when cloning options
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip(collection, args, callback, ignored) {

		// Flatten any nested arrays
		args = concat.apply([], args);

		var fragment,
		    first,
		    scripts,
		    hasScripts,
		    node,
		    doc,
		    i = 0,
		    l = collection.length,
		    iNoClone = l - 1,
		    value = args[0],
		    isFunction = jQuery.isFunction(value);

		// We can't cloneNode fragments that contain checked, in WebKit
		if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
			return collection.each(function (index) {
				var self = collection.eq(index);
				if (isFunction) {
					args[0] = value.call(this, index, self.html());
				}
				domManip(self, args, callback, ignored);
			});
		}

		if (l) {
			fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
			first = fragment.firstChild;

			if (fragment.childNodes.length === 1) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if (first || ignored) {
				scripts = jQuery.map(getAll(fragment, "script"), disableScript);
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for (; i < l; i++) {
					node = fragment;

					if (i !== iNoClone) {
						node = jQuery.clone(node, true, true);

						// Keep references to cloned scripts for later restoration
						if (hasScripts) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge(scripts, getAll(node, "script"));
						}
					}

					callback.call(collection[i], node, i);
				}

				if (hasScripts) {
					doc = scripts[scripts.length - 1].ownerDocument;

					// Reenable scripts
					jQuery.map(scripts, restoreScript);

					// Evaluate executable scripts on first document insertion
					for (i = 0; i < hasScripts; i++) {
						node = scripts[i];
						if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

							if (node.src) {

								// Optional AJAX dependency, but won't run scripts if not present
								if (jQuery._evalUrl) {
									jQuery._evalUrl(node.src);
								}
							} else {
								DOMEval(node.textContent.replace(rcleanScript, ""), doc);
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove(elem, selector, keepData) {
		var node,
		    nodes = selector ? jQuery.filter(selector, elem) : elem,
		    i = 0;

		for (; (node = nodes[i]) != null; i++) {
			if (!keepData && node.nodeType === 1) {
				jQuery.cleanData(getAll(node));
			}

			if (node.parentNode) {
				if (keepData && jQuery.contains(node.ownerDocument, node)) {
					setGlobalEval(getAll(node, "script"));
				}
				node.parentNode.removeChild(node);
			}
		}

		return elem;
	}

	jQuery.extend({
		htmlPrefilter: function (html) {
			return html.replace(rxhtmlTag, "<$1></$2>");
		},

		clone: function (elem, dataAndEvents, deepDataAndEvents) {
			var i,
			    l,
			    srcElements,
			    destElements,
			    clone = elem.cloneNode(true),
			    inPage = jQuery.contains(elem.ownerDocument, elem);

			// Fix IE cloning issues
			if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0, l = srcElements.length; i < l; i++) {
					fixInput(srcElements[i], destElements[i]);
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0, l = srcElements.length; i < l; i++) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			// Preserve script evaluation history
			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function (elems) {
			var data,
			    elem,
			    type,
			    special = jQuery.event.special,
			    i = 0;

			for (; (elem = elems[i]) !== undefined; i++) {
				if (acceptData(elem)) {
					if (data = elem[dataPriv.expando]) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataPriv.expando] = undefined;
					}
					if (elem[dataUser.expando]) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataUser.expando] = undefined;
					}
				}
			}
		}
	});

	jQuery.fn.extend({
		detach: function (selector) {
			return remove(this, selector, true);
		},

		remove: function (selector) {
			return remove(this, selector);
		},

		text: function (value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().each(function () {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						this.textContent = value;
					}
				});
			}, null, value, arguments.length);
		},

		append: function () {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function () {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function () {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function () {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		empty: function () {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {

					// Prevent memory leaks
					jQuery.cleanData(getAll(elem, false));

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function (dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function (value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined && elem.nodeType === 1) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = jQuery.htmlPrefilter(value);

					try {
						for (; i < l; i++) {
							elem = this[i] || {};

							// Remove element nodes and prevent memory leaks
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function () {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip(this, arguments, function (elem) {
				var parent = this.parentNode;

				if (jQuery.inArray(this, ignored) < 0) {
					jQuery.cleanData(getAll(this));
					if (parent) {
						parent.replaceChild(elem, this);
					}
				}

				// Force callback invocation
			}, ignored);
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1,
			    i = 0;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});
	var rmargin = /^margin/;

	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function (elem) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if (!view || !view.opener) {
			view = window;
		}

		return view.getComputedStyle(elem);
	};

	(function () {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if (!div) {
				return;
			}

			div.style.cssText = "box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild(container);

			var divStyle = window.getComputedStyle(div);
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild(container);

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		var pixelPositionVal,
		    boxSizingReliableVal,
		    pixelMarginRightVal,
		    reliableMarginLeftVal,
		    container = document.createElement("div"),
		    div = document.createElement("div");

		// Finish early in limited (non-browser) environments
		if (!div.style) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
		container.appendChild(div);

		jQuery.extend(support, {
			pixelPosition: function () {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function () {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function () {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function () {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		});
	})();

	function curCSS(elem, name, computed) {
		var width,
		    minWidth,
		    maxWidth,
		    ret,


		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

		computed = computed || getStyles(elem);

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if (computed) {
			ret = computed.getPropertyValue(name) || computed[name];

			if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
				ret = jQuery.style(elem, name);
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" : ret;
	}

	function addGetHookIf(conditionFn, hookFn) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function () {
				if (conditionFn()) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rcustomProp = /^--/,
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},
	    cssPrefixes = ["Webkit", "Moz", "ms"],
	    emptyStyle = document.createElement("div").style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName(name) {

		// Shortcut for names that are not vendor prefixed
		if (name in emptyStyle) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in emptyStyle) {
				return name;
			}
		}
	}

	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName(name) {
		var ret = jQuery.cssProps[name];
		if (!ret) {
			ret = jQuery.cssProps[name] = vendorPropName(name) || name;
		}
		return ret;
	}

	function setPositiveNumber(elem, value, subtract) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec(value);
		return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
		var i,
		    val = 0;

		// If we already have the right measurement, avoid augmentation
		if (extra === (isBorderBox ? "border" : "content")) {
			i = 4;

			// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}

		for (; i < 4; i += 2) {

			// Both box models exclude margin, so add it if we want it
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true, styles);
			}

			if (isBorderBox) {

				// border-box includes padding, so remove it if we want content
				if (extra === "content") {
					val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				// At this point, extra isn't border nor margin, so remove border
				if (extra !== "margin") {
					val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				// At this point, extra isn't content nor padding, so add border
				if (extra !== "padding") {
					val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {

		// Start with computed style
		var valueIsBorderBox,
		    styles = getStyles(elem),
		    val = curCSS(elem, name, styles),
		    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		// Computed unit is not pixels. Stop here and return.
		if (rnumnonpx.test(val)) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

		// Fall back to offsetWidth/Height when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		if (val === "auto") {
			val = elem["offset" + name[0].toUpperCase() + name.slice(1)];
		}

		// Normalize "", auto, and prepare for extra
		val = parseFloat(val) || 0;

		// Use the active box-sizing model to add/subtract irrelevant styles
		return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function (elem, computed) {
					if (computed) {

						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function (elem, name, value, extra) {

			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret,
			    type,
			    hooks,
			    origName = jQuery.camelCase(name),
			    isCustomProp = rcustomProp.test(name),
			    style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
					value = adjustCSS(elem, name, ret);

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if (value == null || value !== value) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if (type === "number") {
					value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
				}

				// background-* props affect original clone's values
				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

					if (isCustomProp) {
						style.setProperty(name, value);
					} else {
						style[name] = value;
					}
				}
			} else {

				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function (elem, name, extra, styles) {
			var val,
			    num,
			    hooks,
			    origName = jQuery.camelCase(name),
			    isCustomProp = rcustomProp.test(name);

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			// Convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || isFinite(num) ? num || 0 : val;
			}

			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function (elem, computed, extra) {
				if (computed) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test(jQuery.css(elem, "display")) && (

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, name, extra);
					}) : getWidthOrHeight(elem, name, extra);
				}
			},

			set: function (elem, value, extra) {
				var matches,
				    styles = extra && getStyles(elem),
				    subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles);

				// Convert to pixels if value adjustment is needed
				if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

					elem.style[name] = value;
					value = jQuery.css(elem, name);
				}

				return setPositiveNumber(elem, value, subtract);
			}
		};
	});

	jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
		if (computed) {
			return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
				return elem.getBoundingClientRect().left;
			})) + "px";
		}
	});

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function (value) {
				var i = 0,
				    expanded = {},


				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function (name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (Array.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function (elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function () {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function (percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function (tween) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
					return tween.elem[tween.prop];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css(tween.elem, tween.prop, "");

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function (tween) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function (tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function (p) {
			return p;
		},
		swing: function (p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};

	var fxNow,
	    inProgress,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rrun = /queueHooks$/;

	function schedule() {
		if (inProgress) {
			if (document.hidden === false && window.requestAnimationFrame) {
				window.requestAnimationFrame(schedule);
			} else {
				window.setTimeout(schedule, jQuery.fx.interval);
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = jQuery.now();
	}

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
		    i = 0,
		    attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		var prop,
		    value,
		    toggle,
		    hooks,
		    oldfire,
		    propTween,
		    restoreDisplay,
		    display,
		    isBox = "width" in props || "height" in props,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHiddenWithinTree(elem),
		    dataShow = dataPriv.get(elem, "fxshow");

		// Queue-skipping animations hijack the fx hooks
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {

				// Ensure the complete handler is called before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Detect show/hide animations
		for (prop in props) {
			value = props[prop];
			if (rfxtypes.test(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;

						// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject(props);
		if (!propTween && jQuery.isEmptyObject(orig)) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if (isBox && elem.nodeType === 1) {

			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if (restoreDisplay == null) {
				restoreDisplay = dataPriv.get(elem, "display");
			}
			display = jQuery.css(elem, "display");
			if (display === "none") {
				if (restoreDisplay) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide([elem], true);
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css(elem, "display");
					showHide([elem]);
				}
			}

			// Animate inline elements as inline-block
			if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
				if (jQuery.css(elem, "float") === "none") {

					// Restore the original display value at the end of pure show/hide animations
					if (!propTween) {
						anim.done(function () {
							style.display = restoreDisplay;
						});
						if (restoreDisplay == null) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			anim.always(function () {
				style.overflow = opts.overflow[0];
				style.overflowX = opts.overflow[1];
				style.overflowY = opts.overflow[2];
			});
		}

		// Implement show/hide animations
		propTween = false;
		for (prop in orig) {

			// General show/hide setup for this element animation
			if (!propTween) {
				if (dataShow) {
					if ("hidden" in dataShow) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if (toggle) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if (hidden) {
					showHide([elem], true);
				}

				/* eslint-disable no-loop-func */

				anim.done(function () {

					/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if (!hidden) {
						showHide([elem]);
					}
					dataPriv.remove(elem, "fxshow");
					for (prop in orig) {
						jQuery.style(elem, prop, orig[prop]);
					}
				});
			}

			// Per-property setup
			propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
			if (!(prop in dataShow)) {
				dataShow[prop] = propTween.start;
				if (hidden) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (Array.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = Animation.prefilters.length,
		    deferred = jQuery.Deferred().always(function () {

			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		    tick = function () {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


			// Support: Android 2.3 only
			// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
			temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			// If there's more to do, yield
			if (percent < 1 && length) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if (!length) {
				deferred.notifyWith(elem, [animation, 1, 0]);
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith(elem, [animation]);
			return false;
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function (prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function (gotoEnd) {
				var index = 0,


				// If we are going to the end, we want to run all the tweens
				// otherwise we skip this part
				length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				// Resolve when we played the last frame; otherwise, reject
				if (gotoEnd) {
					deferred.notifyWith(elem, [animation, 1, 0]);
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				if (jQuery.isFunction(result.stop)) {
					jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
				}
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		// Attach callbacks from options
		animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		return animation;
	}

	jQuery.Animation = jQuery.extend(Animation, {

		tweeners: {
			"*": [function (prop, value) {
				var tween = this.createTween(prop, value);
				adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
				return tween;
			}]
		},

		tweener: function (props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.match(rnothtmlwhite);
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				Animation.tweeners[prop] = Animation.tweeners[prop] || [];
				Animation.tweeners[prop].unshift(callback);
			}
		},

		prefilters: [defaultPrefilter],

		prefilter: function (callback, prepend) {
			if (prepend) {
				Animation.prefilters.unshift(callback);
			} else {
				Animation.prefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && typeof speed === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		// Go to the end state if fx are off
		if (jQuery.fx.off) {
			opt.duration = 0;
		} else {
			if (typeof opt.duration !== "number") {
				if (opt.duration in jQuery.fx.speeds) {
					opt.duration = jQuery.fx.speeds[opt.duration];
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function (speed, to, easing, callback) {

			// Show any hidden elements after setting opacity to 0
			return this.filter(isHiddenWithinTree).css("opacity", 0).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function (prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function () {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				// Empty animations, or finishing resolves immediately
				if (empty || dataPriv.get(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function (type, clearQueue, gotoEnd) {
			var stopQueue = function (hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = dataPriv.get(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function (type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = dataPriv.get(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				// Look for any active animations, and finish them
				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				// Look for any animations in the old queue and finish them
				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    i = 0,
		    timers = jQuery.timers;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];

			// Run the timer and safely remove it when done (allowing for external removal)
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function () {
		if (inProgress) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function () {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};

	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = window.setTimeout(next, time);
			hooks.stop = function () {
				window.clearTimeout(timeout);
			};
		});
	};

	(function () {
		var input = document.createElement("input"),
		    select = document.createElement("select"),
		    opt = select.appendChild(document.createElement("option"));

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement("input");
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();

	var boolHook,
	    attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function (name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function (name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function (elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value);
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
			}

			if (value !== undefined) {
				if (value === null) {
					jQuery.removeAttr(elem, name);
					return;
				}

				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				elem.setAttribute(name, value + "");
				return value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			ret = jQuery.find.attr(elem, name);

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function (elem, value) {
					if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function (elem, value) {
			var name,
			    i = 0,


			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match(rnothtmlwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					elem.removeAttribute(name);
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function (elem, value, name) {
			if (value === false) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else {
				elem.setAttribute(name, name);
			}
			return name;
		}
	};

	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = function (elem, name, isXML) {
			var ret,
			    handle,
			    lowercaseName = name.toLowerCase();

			if (!isXML) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[lowercaseName];
				attrHandle[lowercaseName] = ret;
				ret = getter(elem, name, isXML) != null ? lowercaseName : null;
				attrHandle[lowercaseName] = handle;
			}
			return ret;
		};
	});

	var rfocusable = /^(?:input|select|textarea|button)$/i,
	    rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function (name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function (name) {
			return this.each(function () {
				delete this[jQuery.propFix[name] || name];
			});
		}
	});

	jQuery.extend({
		prop: function (elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				return elem[name] = value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			return elem[name];
		},

		propHooks: {
			tabIndex: {
				get: function (elem) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr(elem, "tabindex");

					if (tabindex) {
						return parseInt(tabindex, 10);
					}

					if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	});

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function (elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent && parent.parentNode) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function (elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent) {
					parent.selectedIndex;

					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse(value) {
		var tokens = value.match(rnothtmlwhite) || [];
		return tokens.join(" ");
	}

	function getClass(elem) {
		return elem.getAttribute && elem.getAttribute("class") || "";
	}

	jQuery.fn.extend({
		addClass: function (value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, getClass(this)));
				});
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnothtmlwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		removeClass: function (value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, getClass(this)));
				});
			}

			if (!arguments.length) {
				return this.attr("class", "");
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnothtmlwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {

							// Remove *all* instances
							while (cur.indexOf(" " + clazz + " ") > -1) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		toggleClass: function (value, stateVal) {
			var type = typeof value;

			if (typeof stateVal === "boolean" && type === "string") {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
				});
			}

			return this.each(function () {
				var className, i, self, classNames;

				if (type === "string") {

					// Toggle individual class names
					i = 0;
					self = jQuery(this);
					classNames = value.match(rnothtmlwhite) || [];

					while (className = classNames[i++]) {

						// Check each className given, space separated list
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

					// Toggle whole class name
				} else if (value === undefined || type === "boolean") {
					className = getClass(this);
					if (className) {

						// Store className if set
						dataPriv.set(this, "__className__", className);
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if (this.setAttribute) {
						this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
					}
				}
			});
		},

		hasClass: function (selector) {
			var className,
			    elem,
			    i = 0;

			className = " " + selector + " ";
			while (elem = this[i++]) {
				if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
					return true;
				}
			}

			return false;
		}
	});

	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function (value) {
			var hooks,
			    ret,
			    isFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if (typeof ret === "string") {
						return ret.replace(rreturn, "");
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (Array.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function (elem) {

					var val = jQuery.find.attr(elem, "value");
					return val != null ? val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse(jQuery.text(elem));
				}
			},
			select: {
				get: function (elem) {
					var value,
					    option,
					    i,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one",
					    values = one ? null : [],
					    max = one ? index + 1 : options.length;

					if (index < 0) {
						i = max;
					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) &&

						// Don't return options that are disabled or in a disabled optgroup
						!option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function (elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];

						/* eslint-disable no-cond-assign */

						if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if (!optionSet) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function (elem, value) {
				if (Array.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});

	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend(jQuery.event, {

		trigger: function (event, data, elem, onlyHandlers) {

			var i,
			    cur,
			    tmp,
			    bubbleType,
			    ontype,
			    handle,
			    special,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") > -1) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[jQuery.expando] ? event : new jQuery.Event(type, typeof event === "object" && event);

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

				event.type = i > 1 ? bubbleType : special.bindType || type;

				// jQuery handler
				handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				// Native handler
				handle = ontype && cur[ontype];
				if (handle && handle.apply && acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function (type, elem, event) {
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true
			});

			jQuery.event.trigger(e, null, elem);
		}

	});

	jQuery.fn.extend({

		trigger: function (type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function (type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {

		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function (fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		}
	});

	support.focusin = "onfocusin" in window;

	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if (!support.focusin) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function (event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
			};

			jQuery.event.special[fix] = {
				setup: function () {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					dataPriv.access(doc, fix, (attaches || 0) + 1);
				},
				teardown: function () {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						dataPriv.remove(doc, fix);
					} else {
						dataPriv.access(doc, fix, attaches);
					}
				}
			};
		});
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = /\?/;

	// Cross-browser xml parsing
	jQuery.parseXML = function (data) {
		var xml;
		if (!data || typeof data !== "string") {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = new window.DOMParser().parseFromString(data, "text/xml");
		} catch (e) {
			xml = undefined;
		}

		if (!xml || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (Array.isArray(obj)) {

			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {

					// Treat each array item as a scalar.
					add(prefix, v);
				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(prefix + "[" + (typeof v === "object" && v != null ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && jQuery.type(obj) === "object") {

			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {

			// Serialize scalar item.
			add(prefix, obj);
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function (key, valueOrFunction) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;

			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
		};

		// If an array was passed in, assume that it is an array of form elements.
		if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&");
	};

	jQuery.fn.extend({
		serialize: function () {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function () {
			return this.map(function () {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				if (val == null) {
					return null;
				}

				if (Array.isArray(val)) {
					return jQuery.map(val, function (val) {
						return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
					});
				}

				return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	var r20 = /%20/g,
	    rhash = /#.*$/,
	    rantiCache = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,


	/* Prefilters
  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
  * 2) These are called:
  *    - BEFORE asking for a transport
  *    - AFTER param serialization (s.data is a string if s.processData is true)
  * 3) key is the dataType
  * 4) the catchall symbol "*" can be used
  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
  */
	prefilters = {},


	/* Transports bindings
  * 1) key is the dataType
  * 2) the catchall symbol "*" can be used
  * 3) selection will start with transport dataType and THEN go to "*" if needed
  */
	transports = {},


	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*"),


	// Anchor tag for parsing the document origin
	originAnchor = document.createElement("a");
	originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

			if (jQuery.isFunction(func)) {

				// For each dataType in the dataTypeExpression
				while (dataType = dataTypes[i++]) {

					// Prepend if requested
					if (dataType[0] === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

						// Otherwise append
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var key,
		    deep,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	/* Handles responses to an ajax request:
  * - finds the right dataType (mediates between content-type and expected dataType)
  * - returns the corresponding response
  */
	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct,
		    type,
		    finalDataType,
		    firstDataType,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {

			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	/* Chain conversions given the request and the original response
  * Also sets the responseXXX fields on the jqXHR instance
  */
	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},


		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			// Apply the dataFilter if provided
			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				// There's only work to do if current dataType is non-auto
				if (current === "*") {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {

									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s.throws) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test(location.protocol),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
   timeout: 0,
   data: null,
   dataType: null,
   username: null,
   password: null,
   cache: null,
   throws: false,
   traditional: false,
   headers: {},
   */

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function (target, settings) {
			return settings ?

			// Building a settings object
			ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

			// Extending ajaxSettings
			ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function (url, options) {

			// If url is an object, simulate pre-1.5 signature
			if (typeof url === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,


			// URL without anti-cache param
			cacheURL,


			// Response headers
			responseHeadersString,
			    responseHeaders,


			// timeout handle
			timeoutTimer,


			// Url cleanup var
			urlAnchor,


			// Request state (becomes false upon send and true upon completion)
			completed,


			// To know if global events are to be dispatched
			fireGlobals,


			// Loop variable
			i,


			// uncached part of the url
			uncached,


			// Create the final options object
			s = jQuery.ajaxSetup({}, options),


			// Callbacks context
			callbackContext = s.context || s,


			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


			// Deferreds
			deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),


			// Status-dependent callbacks
			statusCode = s.statusCode || {},


			// Headers (they are sent all at once)
			requestHeaders = {},
			    requestHeadersNames = {},


			// Default abort message
			strAbort = "canceled",


			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function (key) {
					var match;
					if (completed) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase()] = match[2];
							}
						}
						match = responseHeaders[key.toLowerCase()];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function () {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function (name, value) {
					if (completed == null) {
						name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function (type) {
					if (completed == null) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function (map) {
					var code;
					if (map) {
						if (completed) {

							// Execute the appropriate callbacks
							jqXHR.always(map[jqXHR.status]);
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for (code in map) {
								statusCode[code] = [statusCode[code], map[code]];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function (statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			// Attach deferreds
			deferred.promise(jqXHR);

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if (s.crossDomain == null) {
				urlAnchor = document.createElement("a");

				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
				} catch (e) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (completed) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace(rhash, "");

			// More options handling for requests with no content
			if (!s.hasContent) {

				// Remember the hash so we can put it back
				uncached = s.url.slice(cacheURL.length);

				// If data is available, append data to url
				if (s.data) {
					cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if (s.cache === false) {
					cacheURL = cacheURL.replace(rantiCache, "$1");
					uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

				// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
				s.data = s.data.replace(r20, "+");
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add(s.complete);
			jqXHR.done(s.success);
			jqXHR.fail(s.error);

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}

				// If request was aborted inside ajaxSend, stop there
				if (completed) {
					return jqXHR;
				}

				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = window.setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					completed = false;
					transport.send(requestHeaders, done);
				} catch (e) {

					// Rethrow post-completion exceptions
					if (completed) {
						throw e;
					}

					// Propagate others as results
					done(-1, e);
				}
			}

			// Callback for when everything is done
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				// Ignore repeat invocations
				if (completed) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if (timeoutTimer) {
					window.clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert(s, response, jqXHR, isSuccess);

				// If successful, handle type chaining
				if (isSuccess) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					// if no content
					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

						// if not modified
					} else if (status === 304) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(statusCode);
				statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

					// Handle the global AJAX counter
					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function (url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function (url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {

			// Shift arguments if data argument was omitted
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax(jQuery.extend({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject(url) && url));
		};
	});

	jQuery._evalUrl = function (url) {
		return jQuery.ajax({
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		});
	};

	jQuery.fn.extend({
		wrapAll: function (html) {
			var wrap;

			if (this[0]) {
				if (jQuery.isFunction(html)) {
					html = html.call(this[0]);
				}

				// The elements to wrap the target around
				wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstElementChild) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function (html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function (html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function (selector) {
			this.parent(selector).not("body").each(function () {
				jQuery(this).replaceWith(this.childNodes);
			});
			return this;
		}
	});

	jQuery.expr.pseudos.hidden = function (elem) {
		return !jQuery.expr.pseudos.visible(elem);
	};
	jQuery.expr.pseudos.visible = function (elem) {
		return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
	};

	jQuery.ajaxSettings.xhr = function () {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	};

	var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function (options) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if (support.cors || xhrSupported && !options.crossDomain) {
			return {
				send: function (headers, complete) {
					var i,
					    xhr = options.xhr();

					xhr.open(options.type, options.url, options.async, options.username, options.password);

					// Apply custom fields if provided
					if (options.xhrFields) {
						for (i in options.xhrFields) {
							xhr[i] = options.xhrFields[i];
						}
					}

					// Override mime type if needed
					if (options.mimeType && xhr.overrideMimeType) {
						xhr.overrideMimeType(options.mimeType);
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if (!options.crossDomain && !headers["X-Requested-With"]) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for (i in headers) {
						xhr.setRequestHeader(i, headers[i]);
					}

					// Callback
					callback = function (type) {
						return function () {
							if (callback) {
								callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if (type === "abort") {
									xhr.abort();
								} else if (type === "error") {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if (typeof xhr.status !== "number") {
										complete(0, "error");
									} else {
										complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status, xhr.statusText);
									}
								} else {
									complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									(xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = callback("error");

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if (xhr.onabort !== undefined) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function () {

							// Check readyState before timeout as it changes
							if (xhr.readyState === 4) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout(function () {
									if (callback) {
										errorCallback();
									}
								});
							}
						};
					}

					// Create the abort callback
					callback = callback("abort");

					try {

						// Do send the request (this may raise an exception)
						xhr.send(options.hasContent && options.data || null);
					} catch (e) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if (callback) {
							throw e;
						}
					}
				},

				abort: function () {
					if (callback) {
						callback();
					}
				}
			};
		}
	});

	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter(function (s) {
		if (s.crossDomain) {
			s.contents.script = false;
		}
	});

	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function (text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {

		// This transport only deals with cross domain requests
		if (s.crossDomain) {
			var script, callback;
			return {
				send: function (_, complete) {
					script = jQuery("<script>").prop({
						charset: s.scriptCharset,
						src: s.url
					}).on("load error", callback = function (evt) {
						script.remove();
						callback = null;
						if (evt) {
							complete(evt.type === "error" ? 404 : 200, evt.type);
						}
					});

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild(script[0]);
				},
				abort: function () {
					if (callback) {
						callback();
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function () {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (jsonProp || s.dataTypes[0] === "jsonp") {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			// Insert callback into url or form data
			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// Force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {

				// If previous value didn't exist - remove it
				if (overwritten === undefined) {
					jQuery(window).removeProp(callbackName);

					// Otherwise restore preexisting value
				} else {
					window[callbackName] = overwritten;
				}

				// Save back as free
				if (s[callbackName]) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});

	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = function () {
		var body = document.implementation.createHTMLDocument("").body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	}();

	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function (data, context, keepScripts) {
		if (typeof data !== "string") {
			return [];
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if (!context) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if (support.createHTMLDocument) {
				context = document.implementation.createHTMLDocument("");

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement("base");
				base.href = document.location.href;
				context.head.appendChild(base);
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec(data);
		scripts = !keepScripts && [];

		// Single tag
		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	/**
  * Load a url into a page
  */
	jQuery.fn.load = function (url, params, callback) {
		var selector,
		    type,
		    response,
		    self = this,
		    off = url.indexOf(" ");

		if (off > -1) {
			selector = stripAndCollapse(url.slice(off));
			url = url.slice(0, off);
		}

		// If it's a function
		if (jQuery.isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && typeof params === "object") {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			}).done(function (responseText) {

				// Save response for use in complete callback
				response = arguments;

				self.html(selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

				// Otherwise use the full result
				responseText);

				// If the request succeeds, this function gets "data", "status", "jqXHR"
				// but they are ignored because response was set above.
				// If it fails, this function gets "jqXHR", "status", "error"
			}).always(callback && function (jqXHR, status) {
				self.each(function () {
					callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
				});
			});
		}

		return this;
	};

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.pseudos.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	jQuery.offset = {
		setOffset: function (elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			// Set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call(elem, i, jQuery.extend({}, curOffset));
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({
		offset: function (options) {

			// Preserve chaining for setter
			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var doc,
			    docElem,
			    rect,
			    win,
			    elem = this[0];

			if (!elem) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if (!elem.getClientRects().length) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			doc = elem.ownerDocument;
			docElem = doc.documentElement;
			win = doc.defaultView;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function () {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    elem = this[0],
			    parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if (jQuery.css(elem, "position") === "fixed") {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if (!nodeName(offsetParent[0], "html")) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css(offsetParent[0], "borderTopWidth", true),
					left: parentOffset.left + jQuery.css(offsetParent[0], "borderLeftWidth", true)
				};
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function () {
			return this.map(function () {
				var offsetParent = this.offsetParent;

				while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = "pageYOffset" === prop;

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {

				// Coalesce documents and windows
				var win;
				if (jQuery.isWindow(elem)) {
					win = elem;
				} else if (elem.nodeType === 9) {
					win = elem.defaultView;
				}

				if (val === undefined) {
					return win ? win[prop] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length);
		};
	});

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css(elem, type, extra) :

					// Set width or height on the element
					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable);
			};
		});
	});

	jQuery.fn.extend({

		bind: function (types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function (types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function (selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function (selector, types, fn) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		}
	});

	jQuery.holdReady = function (hold) {
		if (hold) {
			jQuery.readyWait++;
		} else {
			jQuery.ready(true);
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if (typeof define === "function" && define.amd) {
		define("jquery", [], function () {
			return jQuery;
		});
	}

	var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,


	// Map over the $ in case of overwrite
	_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if (!noGlobal) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 6);
  /******/
})(
/************************************************************************/
/******/[
/* 0 */
/***/function (module, exports) {

  module.exports = jQuery;

  /***/
},
/* 1 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony export (binding) */
  __webpack_require__.d(__webpack_exports__, "a", function () {
    return rtl;
  });
  /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
    return GetYoDigits;
  });
  /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
    return transitionend;
  });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);

  // Core Foundation Utilities, utilized in a number of places.

  /**
   * Returns a boolean for RTL support
   */
  function rtl() {
    return __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html').attr('dir') === 'rtl';
  }

  /**
   * returns a random base-36 uid with namespacing
   * @function
   * @param {Number} length - number of random base-36 digits desired. Increase for more random strings.
   * @param {String} namespace - name of plugin to be incorporated in uid, optional.
   * @default {String} '' - if no plugin name is provided, nothing is appended to the uid.
   * @returns {String} - unique id
   */
  function GetYoDigits(length, namespace) {
    length = length || 6;
    return Math.round(Math.pow(36, length + 1) - Math.random() * Math.pow(36, length)).toString(36).slice(1) + (namespace ? '-' + namespace : '');
  }

  function transitionend($elem) {
    var transitions = {
      'transition': 'transitionend',
      'WebkitTransition': 'webkitTransitionEnd',
      'MozTransition': 'transitionend',
      'OTransition': 'otransitionend'
    };
    var elem = document.createElement('div'),
        end;

    for (var t in transitions) {
      if (typeof elem.style[t] !== 'undefined') {
        end = transitions[t];
      }
    }
    if (end) {
      return end;
    } else {
      end = setTimeout(function () {
        $elem.triggerHandler('transitionend', [$elem]);
      }, 1);
      return 'transitionend';
    }
  }

  /***/
},
/* 2 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";

  Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_core__ = __webpack_require__(3);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(1);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(4);

  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].addToJquery(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);

  // These are now separated out, but historically were a part of this module,
  // and since this is here for backwards compatibility we include them in
  // this entry.

  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].rtl = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["a" /* rtl */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].GetYoDigits = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["b" /* GetYoDigits */];
  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].transitionend = __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["c" /* transitionend */];

  // Every plugin depends on plugin now, we can include that on the core for the
  // script inclusion path.


  __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */].Plugin = __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["a" /* Plugin */];

  window.Foundation = __WEBPACK_IMPORTED_MODULE_1__foundation_core__["a" /* Foundation */];

  /***/
},
/* 3 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony export (binding) */
  __webpack_require__.d(__webpack_exports__, "a", function () {
    return Foundation;
  });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(5);

  var FOUNDATION_VERSION = '6.4.1';

  // Global Foundation object
  // This is attached to the window, or used as a module for AMD/Browserify
  var Foundation = {
    version: FOUNDATION_VERSION,

    /**
     * Stores initialized plugins.
     */
    _plugins: {},

    /**
     * Stores generated unique ids for plugin instances
     */
    _uuids: [],

    /**
     * Defines a Foundation plugin, adding it to the `Foundation` namespace and the list of plugins to initialize when reflowing.
     * @param {Object} plugin - The constructor of the plugin.
     */
    plugin: function (plugin, name) {
      // Object key to use when adding to global Foundation object
      // Examples: Foundation.Reveal, Foundation.OffCanvas
      var className = name || functionName(plugin);
      // Object key to use when storing the plugin, also used to create the identifying data attribute for the plugin
      // Examples: data-reveal, data-off-canvas
      var attrName = hyphenate(className);

      // Add to the Foundation object and the plugins list (for reflowing)
      this._plugins[attrName] = this[className] = plugin;
    },
    /**
     * @function
     * Populates the _uuids array with pointers to each individual plugin instance.
     * Adds the `zfPlugin` data-attribute to programmatically created plugins to allow use of $(selector).foundation(method) calls.
     * Also fires the initialization event for each plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @param {String} name - the name of the plugin, passed as a camelCased string.
     * @fires Plugin#init
     */
    registerPlugin: function (plugin, name) {
      var pluginName = name ? hyphenate(name) : functionName(plugin.constructor).toLowerCase();
      plugin.uuid = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["b" /* GetYoDigits */])(6, pluginName);

      if (!plugin.$element.attr('data-' + pluginName)) {
        plugin.$element.attr('data-' + pluginName, plugin.uuid);
      }
      if (!plugin.$element.data('zfPlugin')) {
        plugin.$element.data('zfPlugin', plugin);
      }
      /**
       * Fires when the plugin has initialized.
       * @event Plugin#init
       */
      plugin.$element.trigger('init.zf.' + pluginName);

      this._uuids.push(plugin.uuid);

      return;
    },
    /**
     * @function
     * Removes the plugins uuid from the _uuids array.
     * Removes the zfPlugin data attribute, as well as the data-plugin-name attribute.
     * Also fires the destroyed event for the plugin, consolidating repetitive code.
     * @param {Object} plugin - an instance of a plugin, usually `this` in context.
     * @fires Plugin#destroyed
     */
    unregisterPlugin: function (plugin) {
      var pluginName = hyphenate(functionName(plugin.$element.data('zfPlugin').constructor));

      this._uuids.splice(this._uuids.indexOf(plugin.uuid), 1);
      plugin.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')
      /**
       * Fires when the plugin has been destroyed.
       * @event Plugin#destroyed
       */
      .trigger('destroyed.zf.' + pluginName);
      for (var prop in plugin) {
        plugin[prop] = null; //clean up script to prep for garbage collection.
      }
      return;
    },

    /**
     * @function
     * Causes one or more active plugins to re-initialize, resetting event listeners, recalculating positions, etc.
     * @param {String} plugins - optional string of an individual plugin key, attained by calling `$(element).data('pluginName')`, or string of a plugin class i.e. `'dropdown'`
     * @default If no argument is passed, reflow all currently active plugins.
     */
    reInit: function (plugins) {
      var isJQ = plugins instanceof __WEBPACK_IMPORTED_MODULE_0_jquery___default.a;
      try {
        if (isJQ) {
          plugins.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('zfPlugin')._init();
          });
        } else {
          var type = typeof plugins,
              _this = this,
              fns = {
            'object': function (plgs) {
              plgs.forEach(function (p) {
                p = hyphenate(p);
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + p + ']').foundation('_init');
              });
            },
            'string': function () {
              plugins = hyphenate(plugins);
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugins + ']').foundation('_init');
            },
            'undefined': function () {
              this['object'](Object.keys(_this._plugins));
            }
          };
          fns[type](plugins);
        }
      } catch (err) {
        console.error(err);
      } finally {
        return plugins;
      }
    },

    /**
     * Initialize plugins on any elements within `elem` (and `elem` itself) that aren't already initialized.
     * @param {Object} elem - jQuery object containing the element to check inside. Also checks the element itself, unless it's the `document` object.
     * @param {String|Array} plugins - A list of plugins to initialize. Leave this out to initialize everything.
     */
    reflow: function (elem, plugins) {

      // If plugins is undefined, just grab everything
      if (typeof plugins === 'undefined') {
        plugins = Object.keys(this._plugins);
      }
      // If plugins is a string, convert it to an array with one item
      else if (typeof plugins === 'string') {
          plugins = [plugins];
        }

      var _this = this;

      // Iterate through each plugin
      __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(plugins, function (i, name) {
        // Get the current plugin
        var plugin = _this._plugins[name];

        // Localize the search to all elements inside elem, as well as elem itself, unless elem === document
        var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(elem).find('[data-' + name + ']').addBack('[data-' + name + ']');

        // For each plugin found, initialize it
        $elem.each(function () {
          var $el = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
              opts = {};
          // Don't double-dip on plugins
          if ($el.data('zfPlugin')) {
            console.warn("Tried to initialize " + name + " on an element that already has a Foundation plugin.");
            return;
          }

          if ($el.attr('data-options')) {
            var thing = $el.attr('data-options').split(';').forEach(function (e, i) {
              var opt = e.split(':').map(function (el) {
                return el.trim();
              });
              if (opt[0]) opts[opt[0]] = parseValue(opt[1]);
            });
          }
          try {
            $el.data('zfPlugin', new plugin(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), opts));
          } catch (er) {
            console.error(er);
          } finally {
            return;
          }
        });
      });
    },
    getFnName: functionName,

    addToJquery: function ($) {
      // TODO: consider not making this a jQuery function
      // TODO: need way to reflow vs. re-initialize
      /**
       * The Foundation jQuery method.
       * @param {String|Array} method - An action to perform on the current jQuery object.
       */
      var foundation = function (method) {
        var type = typeof method,
            $noJS = $('.no-js');

        if ($noJS.length) {
          $noJS.removeClass('no-js');
        }

        if (type === 'undefined') {
          //needs to initialize the Foundation object, or an individual plugin.
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["a" /* MediaQuery */]._init();
          Foundation.reflow(this);
        } else if (type === 'string') {
          //an individual method to invoke on a plugin or group of plugins
          var args = Array.prototype.slice.call(arguments, 1); //collect all the arguments, if necessary
          var plugClass = this.data('zfPlugin'); //determine the class of plugin

          if (plugClass !== undefined && plugClass[method] !== undefined) {
            //make sure both the class and method exist
            if (this.length === 1) {
              //if there's only one, call it directly.
              plugClass[method].apply(plugClass, args);
            } else {
              this.each(function (i, el) {
                //otherwise loop through the jQuery collection and invoke the method on each
                plugClass[method].apply($(el).data('zfPlugin'), args);
              });
            }
          } else {
            //error for no class or no method
            throw new ReferenceError("We're sorry, '" + method + "' is not an available method for " + (plugClass ? functionName(plugClass) : 'this element') + '.');
          }
        } else {
          //error for invalid argument type
          throw new TypeError('We\'re sorry, ' + type + ' is not a valid parameter. You must use a string representing the method you wish to invoke.');
        }
        return this;
      };
      $.fn.foundation = foundation;
      return $;
    }
  };

  Foundation.util = {
    /**
     * Function for applying a debounce effect to a function call.
     * @function
     * @param {Function} func - Function to be called at end of timeout.
     * @param {Number} delay - Time in ms to delay the call of `func`.
     * @returns function
     */
    throttle: function (func, delay) {
      var timer = null;

      return function () {
        var context = this,
            args = arguments;

        if (timer === null) {
          timer = setTimeout(function () {
            func.apply(context, args);
            timer = null;
          }, delay);
        }
      };
    }
  };

  window.Foundation = Foundation;

  // Polyfill for requestAnimationFrame
  (function () {
    if (!Date.now || !window.Date.now) window.Date.now = Date.now = function () {
      return new Date().getTime();
    };

    var vendors = ['webkit', 'moz'];
    for (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {
      var vp = vendors[i];
      window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];
      window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];
    }
    if (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {
      var lastTime = 0;
      window.requestAnimationFrame = function (callback) {
        var now = Date.now();
        var nextTime = Math.max(lastTime + 16, now);
        return setTimeout(function () {
          callback(lastTime = nextTime);
        }, nextTime - now);
      };
      window.cancelAnimationFrame = clearTimeout;
    }
    /**
     * Polyfill for performance.now, required by rAF
     */
    if (!window.performance || !window.performance.now) {
      window.performance = {
        start: Date.now(),
        now: function () {
          return Date.now() - this.start;
        }
      };
    }
  })();
  if (!Function.prototype.bind) {
    Function.prototype.bind = function (oThis) {
      if (typeof this !== 'function') {
        // closest thing possible to the ECMAScript 5
        // internal IsCallable function
        throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
      }

      var aArgs = Array.prototype.slice.call(arguments, 1),
          fToBind = this,
          fNOP = function () {},
          fBound = function () {
        return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
      };

      if (this.prototype) {
        // native functions don't have a prototype
        fNOP.prototype = this.prototype;
      }
      fBound.prototype = new fNOP();

      return fBound;
    };
  }
  // Polyfill to get the name of a function in IE9
  function functionName(fn) {
    if (Function.prototype.name === undefined) {
      var funcNameRegex = /function\s([^(]{1,})\(/;
      var results = funcNameRegex.exec(fn.toString());
      return results && results.length > 1 ? results[1].trim() : "";
    } else if (fn.prototype === undefined) {
      return fn.constructor.name;
    } else {
      return fn.prototype.constructor.name;
    }
  }
  function parseValue(str) {
    if ('true' === str) return true;else if ('false' === str) return false;else if (!isNaN(str * 1)) return parseFloat(str);
    return str;
  }
  // Convert PascalCase to kebab-case
  // Thank you: http://stackoverflow.com/a/8955580
  function hyphenate(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  }

  /***/
},
/* 4 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony export (binding) */
  __webpack_require__.d(__webpack_exports__, "a", function () {
    return Plugin;
  });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(1);

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
      }
    }return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
  }();

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  // Abstract class for providing lifecycle hooks. Expect plugins to define AT LEAST
  // {function} _setup (replaces previous constructor),
  // {function} _destroy (replaces previous destroy)

  var Plugin = function () {
    function Plugin(element, options) {
      _classCallCheck(this, Plugin);

      this._setup(element, options);
      var pluginName = getPluginName(this);
      this.uuid = __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["b" /* GetYoDigits */])(6, pluginName);

      if (!this.$element.attr('data-' + pluginName)) {
        this.$element.attr('data-' + pluginName, this.uuid);
      }
      if (!this.$element.data('zfPlugin')) {
        this.$element.data('zfPlugin', this);
      }
      /**
       * Fires when the plugin has initialized.
       * @event Plugin#init
       */
      this.$element.trigger('init.zf.' + pluginName);
    }

    _createClass(Plugin, [{
      key: 'destroy',
      value: function destroy() {
        this._destroy();
        var pluginName = getPluginName(this);
        this.$element.removeAttr('data-' + pluginName).removeData('zfPlugin')
        /**
         * Fires when the plugin has been destroyed.
         * @event Plugin#destroyed
         */
        .trigger('destroyed.zf.' + pluginName);
        for (var prop in this) {
          this[prop] = null; //clean up script to prep for garbage collection.
        }
      }
    }]);

    return Plugin;
  }();

  // Convert PascalCase to kebab-case
  // Thank you: http://stackoverflow.com/a/8955580


  function hyphenate(str) {
    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
  }

  function getPluginName(obj) {
    if (typeof obj.constructor.name !== 'undefined') {
      return hyphenate(obj.constructor.name);
    } else {
      return hyphenate(obj.className);
    }
  }

  /***/
},
/* 5 */
/***/function (module, __webpack_exports__, __webpack_require__) {

  "use strict";
  /* harmony export (binding) */
  __webpack_require__.d(__webpack_exports__, "a", function () {
    return MediaQuery;
  });
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
  /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);

  // Default set of media queries
  var defaultQueries = {
    'default': 'only screen',
    landscape: 'only screen and (orientation: landscape)',
    portrait: 'only screen and (orientation: portrait)',
    retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
  };

  // matchMedia() polyfill - Test a CSS media type/query in JS.
  // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
  var matchMedia = window.matchMedia || function () {
    'use strict';

    // For browsers that support matchMedium api such as IE 9 and webkit

    var styleMedia = window.styleMedia || window.media;

    // For those that don't support matchMedium
    if (!styleMedia) {
      var style = document.createElement('style'),
          script = document.getElementsByTagName('script')[0],
          info = null;

      style.type = 'text/css';
      style.id = 'matchmediajs-test';

      script && script.parentNode && script.parentNode.insertBefore(style, script);

      // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
      info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

      styleMedia = {
        matchMedium: function (media) {
          var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

          // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
          if (style.styleSheet) {
            style.styleSheet.cssText = text;
          } else {
            style.textContent = text;
          }

          // Test if media query is true or false
          return info.width === '1px';
        }
      };
    }

    return function (media) {
      return {
        matches: styleMedia.matchMedium(media || 'all'),
        media: media || 'all'
      };
    };
  }();

  var MediaQuery = {
    queries: [],

    current: '',

    /**
     * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
     * @function
     * @private
     */
    _init: function () {
      var self = this;
      var $meta = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('meta.foundation-mq');
      if (!$meta.length) {
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<meta class="foundation-mq">').appendTo(document.head);
      }

      var extractedStyles = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.foundation-mq').css('font-family');
      var namedQueries;

      namedQueries = parseStyleToObject(extractedStyles);

      for (var key in namedQueries) {
        if (namedQueries.hasOwnProperty(key)) {
          self.queries.push({
            name: key,
            value: 'only screen and (min-width: ' + namedQueries[key] + ')'
          });
        }
      }

      this.current = this._getCurrentSize();

      this._watcher();
    },

    /**
     * Checks if the screen is at least as wide as a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
     */
    atLeast: function (size) {
      var query = this.get(size);

      if (query) {
        return matchMedia(query).matches;
      }

      return false;
    },

    /**
     * Checks if the screen matches to a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
     * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.
     */
    is: function (size) {
      size = size.trim().split(' ');
      if (size.length > 1 && size[1] === 'only') {
        if (size[0] === this._getCurrentSize()) return true;
      } else {
        return this.atLeast(size[0]);
      }
      return false;
    },

    /**
     * Gets the media query of a breakpoint.
     * @function
     * @param {String} size - Name of the breakpoint to get.
     * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
     */
    get: function (size) {
      for (var i in this.queries) {
        if (this.queries.hasOwnProperty(i)) {
          var query = this.queries[i];
          if (size === query.name) return query.value;
        }
      }

      return null;
    },

    /**
     * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
     * @function
     * @private
     * @returns {String} Name of the current breakpoint.
     */
    _getCurrentSize: function () {
      var matched;

      for (var i = 0; i < this.queries.length; i++) {
        var query = this.queries[i];

        if (matchMedia(query.value).matches) {
          matched = query;
        }
      }

      if (typeof matched === 'object') {
        return matched.name;
      } else {
        return matched;
      }
    },

    /**
     * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
     * @function
     * @private
     */
    _watcher: function () {
      var _this = this;

      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', function () {
        var newSize = _this._getCurrentSize(),
            currentSize = _this.current;

        if (newSize !== currentSize) {
          // Change the current media query
          _this.current = newSize;

          // Broadcast the media query change on the window
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
        }
      });
    }
  };

  // Thank you: https://github.com/sindresorhus/query-string
  function parseStyleToObject(str) {
    var styleObject = {};

    if (typeof str !== 'string') {
      return styleObject;
    }

    str = str.trim().slice(1, -1); // browsers re-quote string style values

    if (!str) {
      return styleObject;
    }

    styleObject = str.split('&').reduce(function (ret, param) {
      var parts = param.replace(/\+/g, ' ').split('=');
      var key = parts[0];
      var val = parts[1];
      key = decodeURIComponent(key);

      // missing `=` should be `null`:
      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
      val = val === undefined ? null : decodeURIComponent(val);

      if (!ret.hasOwnProperty(key)) {
        ret[key] = val;
      } else if (Array.isArray(ret[key])) {
        ret[key].push(val);
      } else {
        ret[key] = [ret[key], val];
      }
      return ret;
    }, {});

    return styleObject;
  }

  /***/
},
/* 6 */
/***/function (module, exports, __webpack_require__) {

  module.exports = __webpack_require__(2);

  /***/
}]
/******/);
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 100);
  /******/
})(
/************************************************************************/
/******/{

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/100:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(34);

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/34:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_box__ = __webpack_require__(64);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Box = __WEBPACK_IMPORTED_MODULE_1__foundation_util_box__["a" /* Box */];

    /***/
  },

  /***/64:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Box;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__);

    var Box = {
      ImNotTouchingYou: ImNotTouchingYou,
      OverlapArea: OverlapArea,
      GetDimensions: GetDimensions,
      GetOffsets: GetOffsets,
      GetExplicitOffsets: GetExplicitOffsets
    };

    /**
     * Compares the dimensions of an element to a container and determines collision events with container.
     * @function
     * @param {jQuery} element - jQuery object to test for collisions.
     * @param {jQuery} parent - jQuery object to use as bounding container.
     * @param {Boolean} lrOnly - set to true to check left and right values only.
     * @param {Boolean} tbOnly - set to true to check top and bottom values only.
     * @default if no parent object passed, detects collisions with `window`.
     * @returns {Boolean} - true if collision free, false if a collision in any direction.
     */
    function ImNotTouchingYou(element, parent, lrOnly, tbOnly, ignoreBottom) {
      return OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) === 0;
    };

    function OverlapArea(element, parent, lrOnly, tbOnly, ignoreBottom) {
      var eleDims = GetDimensions(element),
          topOver,
          bottomOver,
          leftOver,
          rightOver;
      if (parent) {
        var parDims = GetDimensions(parent);

        bottomOver = parDims.height + parDims.offset.top - (eleDims.offset.top + eleDims.height);
        topOver = eleDims.offset.top - parDims.offset.top;
        leftOver = eleDims.offset.left - parDims.offset.left;
        rightOver = parDims.width + parDims.offset.left - (eleDims.offset.left + eleDims.width);
      } else {
        bottomOver = eleDims.windowDims.height + eleDims.windowDims.offset.top - (eleDims.offset.top + eleDims.height);
        topOver = eleDims.offset.top - eleDims.windowDims.offset.top;
        leftOver = eleDims.offset.left - eleDims.windowDims.offset.left;
        rightOver = eleDims.windowDims.width - (eleDims.offset.left + eleDims.width);
      }

      bottomOver = ignoreBottom ? 0 : Math.min(bottomOver, 0);
      topOver = Math.min(topOver, 0);
      leftOver = Math.min(leftOver, 0);
      rightOver = Math.min(rightOver, 0);

      if (lrOnly) {
        return leftOver + rightOver;
      }
      if (tbOnly) {
        return topOver + bottomOver;
      }

      // use sum of squares b/c we care about overlap area.
      return Math.sqrt(topOver * topOver + bottomOver * bottomOver + leftOver * leftOver + rightOver * rightOver);
    }

    /**
     * Uses native methods to return an object of dimension values.
     * @function
     * @param {jQuery || HTML} element - jQuery object or DOM element for which to get the dimensions. Can be any element other that document or window.
     * @returns {Object} - nested object of integer pixel values
     * TODO - if element is window, return only those values.
     */
    function GetDimensions(elem, test) {
      elem = elem.length ? elem[0] : elem;

      if (elem === window || elem === document) {
        throw new Error("I'm sorry, Dave. I'm afraid I can't do that.");
      }

      var rect = elem.getBoundingClientRect(),
          parRect = elem.parentNode.getBoundingClientRect(),
          winRect = document.body.getBoundingClientRect(),
          winY = window.pageYOffset,
          winX = window.pageXOffset;

      return {
        width: rect.width,
        height: rect.height,
        offset: {
          top: rect.top + winY,
          left: rect.left + winX
        },
        parentDims: {
          width: parRect.width,
          height: parRect.height,
          offset: {
            top: parRect.top + winY,
            left: parRect.left + winX
          }
        },
        windowDims: {
          width: winRect.width,
          height: winRect.height,
          offset: {
            top: winY,
            left: winX
          }
        }
      };
    }

    /**
     * Returns an object of top and left integer pixel values for dynamically rendered elements,
     * such as: Tooltip, Reveal, and Dropdown. Maintained for backwards compatibility, and where
     * you don't know alignment, but generally from
     * 6.4 forward you should use GetExplicitOffsets, as GetOffsets conflates position and alignment.
     * @function
     * @param {jQuery} element - jQuery object for the element being positioned.
     * @param {jQuery} anchor - jQuery object for the element's anchor point.
     * @param {String} position - a string relating to the desired position of the element, relative to it's anchor
     * @param {Number} vOffset - integer pixel value of desired vertical separation between anchor and element.
     * @param {Number} hOffset - integer pixel value of desired horizontal separation between anchor and element.
     * @param {Boolean} isOverflow - if a collision event is detected, sets to true to default the element to full width - any desired offset.
     * TODO alter/rewrite to work with `em` values as well/instead of pixels
     */
    function GetOffsets(element, anchor, position, vOffset, hOffset, isOverflow) {
      console.log("NOTE: GetOffsets is deprecated in favor of GetExplicitOffsets and will be removed in 6.5");
      switch (position) {
        case 'top':
          return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__["rtl"])() ? GetExplicitOffsets(element, anchor, 'top', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'top', 'right', vOffset, hOffset, isOverflow);
        case 'bottom':
          return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__["rtl"])() ? GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow) : GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);
        case 'center top':
          return GetExplicitOffsets(element, anchor, 'top', 'center', vOffset, hOffset, isOverflow);
        case 'center bottom':
          return GetExplicitOffsets(element, anchor, 'bottom', 'center', vOffset, hOffset, isOverflow);
        case 'center left':
          return GetExplicitOffsets(element, anchor, 'left', 'center', vOffset, hOffset, isOverflow);
        case 'center right':
          return GetExplicitOffsets(element, anchor, 'right', 'center', vOffset, hOffset, isOverflow);
        case 'left bottom':
          return GetExplicitOffsets(element, anchor, 'bottom', 'left', vOffset, hOffset, isOverflow);
        case 'right bottom':
          return GetExplicitOffsets(element, anchor, 'bottom', 'right', vOffset, hOffset, isOverflow);
        // Backwards compatibility... this along with the reveal and reveal full
        // classes are the only ones that didn't reference anchor
        case 'center':
          return {
            left: $eleDims.windowDims.offset.left + $eleDims.windowDims.width / 2 - $eleDims.width / 2 + hOffset,
            top: $eleDims.windowDims.offset.top + $eleDims.windowDims.height / 2 - ($eleDims.height / 2 + vOffset)
          };
        case 'reveal':
          return {
            left: ($eleDims.windowDims.width - $eleDims.width) / 2 + hOffset,
            top: $eleDims.windowDims.offset.top + vOffset
          };
        case 'reveal full':
          return {
            left: $eleDims.windowDims.offset.left,
            top: $eleDims.windowDims.offset.top
          };
          break;
        default:
          return {
            left: __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_0__foundation_util_core__["rtl"])() ? $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset : $anchorDims.offset.left + hOffset,
            top: $anchorDims.offset.top + $anchorDims.height + vOffset
          };

      }
    }

    function GetExplicitOffsets(element, anchor, position, alignment, vOffset, hOffset, isOverflow) {
      var $eleDims = GetDimensions(element),
          $anchorDims = anchor ? GetDimensions(anchor) : null;

      var topVal, leftVal;

      // set position related attribute

      switch (position) {
        case 'top':
          topVal = $anchorDims.offset.top - ($eleDims.height + vOffset);
          break;
        case 'bottom':
          topVal = $anchorDims.offset.top + $anchorDims.height + vOffset;
          break;
        case 'left':
          leftVal = $anchorDims.offset.left - ($eleDims.width + hOffset);
          break;
        case 'right':
          leftVal = $anchorDims.offset.left + $anchorDims.width + hOffset;
          break;
      }

      // set alignment related attribute
      switch (position) {
        case 'top':
        case 'bottom':
          switch (alignment) {
            case 'left':
              leftVal = $anchorDims.offset.left + hOffset;
              break;
            case 'right':
              leftVal = $anchorDims.offset.left - $eleDims.width + $anchorDims.width - hOffset;
              break;
            case 'center':
              leftVal = isOverflow ? hOffset : $anchorDims.offset.left + $anchorDims.width / 2 - $eleDims.width / 2 + hOffset;
              break;
          }
          break;
        case 'right':
        case 'left':
          switch (alignment) {
            case 'bottom':
              topVal = $anchorDims.offset.top - vOffset + $anchorDims.height - $eleDims.height;
              break;
            case 'top':
              topVal = $anchorDims.offset.top + vOffset;
              break;
            case 'center':
              topVal = $anchorDims.offset.top + vOffset + $anchorDims.height / 2 - $eleDims.height / 2;
              break;
          }
          break;
      }
      return { top: topVal, left: leftVal };
    }

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 101);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/101:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(35);

    /***/
  },

  /***/35:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_imageLoader__ = __webpack_require__(65);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].onImagesLoaded = __WEBPACK_IMPORTED_MODULE_1__foundation_util_imageLoader__["a" /* onImagesLoaded */];

    /***/
  },

  /***/65:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return onImagesLoaded;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);

    /**
     * Runs a callback function when images are fully loaded.
     * @param {Object} images - Image(s) to check if loaded.
     * @param {Func} callback - Function to execute when image is fully loaded.
     */
    function onImagesLoaded(images, callback) {
      var self = this,
          unloaded = images.length;

      if (unloaded === 0) {
        callback();
      }

      images.each(function () {
        // Check if image is loaded
        if (this.complete && this.naturalWidth !== undefined) {
          singleImageLoaded();
        } else {
          // If the above check failed, simulate loading on detached element.
          var image = new Image();
          // Still count image as loaded if it finalizes with an error.
          var events = "load.zf.images error.zf.images";
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(image).one(events, function me(event) {
            // Unbind the event listeners. We're using 'one' but only one of the two events will have fired.
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).off(events, me);
            singleImageLoaded();
          });
          image.src = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).attr('src');
        }
      });

      function singleImageLoaded() {
        unloaded--;
        if (unloaded === 0) {
          callback();
        }
      }
    }

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 102);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/102:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(36);

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/36:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(66);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Keyboard = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["a" /* Keyboard */];

    /***/
  },

  /***/66:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Keyboard;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);
    /*******************************************
     *                                         *
     * This util was created by Marius Olbertz *
     * Please thank Marius on GitHub /owlbertz *
     * or the web http://www.mariusolbertz.de/ *
     *                                         *
     ******************************************/

    var keyCodes = {
      9: 'TAB',
      13: 'ENTER',
      27: 'ESCAPE',
      32: 'SPACE',
      35: 'END',
      36: 'HOME',
      37: 'ARROW_LEFT',
      38: 'ARROW_UP',
      39: 'ARROW_RIGHT',
      40: 'ARROW_DOWN'
    };

    var commands = {};

    // Functions pulled out to be referenceable from internals
    function findFocusable($element) {
      if (!$element) {
        return false;
      }
      return $element.find('a[href], area[href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), button:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable]').filter(function () {
        if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':visible') || __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).attr('tabindex') < 0) {
          return false;
        } //only have visible elements and those that have a tabindex greater or equal 0
        return true;
      });
    }

    function parseKey(event) {
      var key = keyCodes[event.which || event.keyCode] || String.fromCharCode(event.which).toUpperCase();

      // Remove un-printable characters, e.g. for `fromCharCode` calls for CTRL only events
      key = key.replace(/\W+/, '');

      if (event.shiftKey) key = 'SHIFT_' + key;
      if (event.ctrlKey) key = 'CTRL_' + key;
      if (event.altKey) key = 'ALT_' + key;

      // Remove trailing underscore, in case only modifiers were used (e.g. only `CTRL_ALT`)
      key = key.replace(/_$/, '');

      return key;
    }

    var Keyboard = {
      keys: getKeyCodes(keyCodes),

      /**
       * Parses the (keyboard) event and returns a String that represents its key
       * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
       * @param {Event} event - the event generated by the event handler
       * @return String key - String that represents the key pressed
       */
      parseKey: parseKey,

      /**
       * Handles the given (keyboard) event
       * @param {Event} event - the event generated by the event handler
       * @param {String} component - Foundation component's name, e.g. Slider or Reveal
       * @param {Objects} functions - collection of functions that are to be executed
       */
      handleKey: function (event, component, functions) {
        var commandList = commands[component],
            keyCode = this.parseKey(event),
            cmds,
            command,
            fn;

        if (!commandList) return console.warn('Component not defined!');

        if (typeof commandList.ltr === 'undefined') {
          // this component does not differentiate between ltr and rtl
          cmds = commandList; // use plain list
        } else {
          // merge ltr and rtl: if document is rtl, rtl overwrites ltr and vice versa
          if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["rtl"])()) cmds = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, commandList.ltr, commandList.rtl);else cmds = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, commandList.rtl, commandList.ltr);
        }
        command = cmds[keyCode];

        fn = functions[command];
        if (fn && typeof fn === 'function') {
          // execute function  if exists
          var returnValue = fn.apply();
          if (functions.handled || typeof functions.handled === 'function') {
            // execute function when event was handled
            functions.handled(returnValue);
          }
        } else {
          if (functions.unhandled || typeof functions.unhandled === 'function') {
            // execute function when event was not handled
            functions.unhandled();
          }
        }
      },

      /**
       * Finds all focusable elements within the given `$element`
       * @param {jQuery} $element - jQuery object to search within
       * @return {jQuery} $focusable - all focusable elements within `$element`
       */

      findFocusable: findFocusable,

      /**
       * Returns the component name name
       * @param {Object} component - Foundation component, e.g. Slider or Reveal
       * @return String componentName
       */

      register: function (componentName, cmds) {
        commands[componentName] = cmds;
      },

      // TODO9438: These references to Keyboard need to not require global. Will 'this' work in this context?
      //
      /**
       * Traps the focus in the given element.
       * @param  {jQuery} $element  jQuery object to trap the foucs into.
       */
      trapFocus: function ($element) {
        var $focusable = findFocusable($element),
            $firstFocusable = $focusable.eq(0),
            $lastFocusable = $focusable.eq(-1);

        $element.on('keydown.zf.trapfocus', function (event) {
          if (event.target === $lastFocusable[0] && parseKey(event) === 'TAB') {
            event.preventDefault();
            $firstFocusable.focus();
          } else if (event.target === $firstFocusable[0] && parseKey(event) === 'SHIFT_TAB') {
            event.preventDefault();
            $lastFocusable.focus();
          }
        });
      },

      /**
       * Releases the trapped focus from the given element.
       * @param  {jQuery} $element  jQuery object to release the focus for.
       */
      releaseFocus: function ($element) {
        $element.off('keydown.zf.trapfocus');
      }
    };

    /*
     * Constants for easier comparing.
     * Can be used like Foundation.parseKey(event) === Foundation.keys.SPACE
     */
    function getKeyCodes(kcs) {
      var k = {};
      for (var kc in kcs) {
        k[kcs[kc]] = kcs[kc];
      }return k;
    }

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 103);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/103:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(37);

    /***/
  },

  /***/37:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(67);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].MediaQuery = __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["a" /* MediaQuery */];

    /***/
  },

  /***/67:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return MediaQuery;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);

    // Default set of media queries
    var defaultQueries = {
      'default': 'only screen',
      landscape: 'only screen and (orientation: landscape)',
      portrait: 'only screen and (orientation: portrait)',
      retina: 'only screen and (-webkit-min-device-pixel-ratio: 2),' + 'only screen and (min--moz-device-pixel-ratio: 2),' + 'only screen and (-o-min-device-pixel-ratio: 2/1),' + 'only screen and (min-device-pixel-ratio: 2),' + 'only screen and (min-resolution: 192dpi),' + 'only screen and (min-resolution: 2dppx)'
    };

    // matchMedia() polyfill - Test a CSS media type/query in JS.
    // Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas, David Knight. Dual MIT/BSD license
    var matchMedia = window.matchMedia || function () {
      'use strict';

      // For browsers that support matchMedium api such as IE 9 and webkit

      var styleMedia = window.styleMedia || window.media;

      // For those that don't support matchMedium
      if (!styleMedia) {
        var style = document.createElement('style'),
            script = document.getElementsByTagName('script')[0],
            info = null;

        style.type = 'text/css';
        style.id = 'matchmediajs-test';

        script && script.parentNode && script.parentNode.insertBefore(style, script);

        // 'style.currentStyle' is used by IE <= 8 and 'window.getComputedStyle' for all other browsers
        info = 'getComputedStyle' in window && window.getComputedStyle(style, null) || style.currentStyle;

        styleMedia = {
          matchMedium: function (media) {
            var text = '@media ' + media + '{ #matchmediajs-test { width: 1px; } }';

            // 'style.styleSheet' is used by IE <= 8 and 'style.textContent' for all other browsers
            if (style.styleSheet) {
              style.styleSheet.cssText = text;
            } else {
              style.textContent = text;
            }

            // Test if media query is true or false
            return info.width === '1px';
          }
        };
      }

      return function (media) {
        return {
          matches: styleMedia.matchMedium(media || 'all'),
          media: media || 'all'
        };
      };
    }();

    var MediaQuery = {
      queries: [],

      current: '',

      /**
       * Initializes the media query helper, by extracting the breakpoint list from the CSS and activating the breakpoint watcher.
       * @function
       * @private
       */
      _init: function () {
        var self = this;
        var $meta = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('meta.foundation-mq');
        if (!$meta.length) {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<meta class="foundation-mq">').appendTo(document.head);
        }

        var extractedStyles = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.foundation-mq').css('font-family');
        var namedQueries;

        namedQueries = parseStyleToObject(extractedStyles);

        for (var key in namedQueries) {
          if (namedQueries.hasOwnProperty(key)) {
            self.queries.push({
              name: key,
              value: 'only screen and (min-width: ' + namedQueries[key] + ')'
            });
          }
        }

        this.current = this._getCurrentSize();

        this._watcher();
      },

      /**
       * Checks if the screen is at least as wide as a breakpoint.
       * @function
       * @param {String} size - Name of the breakpoint to check.
       * @returns {Boolean} `true` if the breakpoint matches, `false` if it's smaller.
       */
      atLeast: function (size) {
        var query = this.get(size);

        if (query) {
          return matchMedia(query).matches;
        }

        return false;
      },

      /**
       * Checks if the screen matches to a breakpoint.
       * @function
       * @param {String} size - Name of the breakpoint to check, either 'small only' or 'small'. Omitting 'only' falls back to using atLeast() method.
       * @returns {Boolean} `true` if the breakpoint matches, `false` if it does not.
       */
      is: function (size) {
        size = size.trim().split(' ');
        if (size.length > 1 && size[1] === 'only') {
          if (size[0] === this._getCurrentSize()) return true;
        } else {
          return this.atLeast(size[0]);
        }
        return false;
      },

      /**
       * Gets the media query of a breakpoint.
       * @function
       * @param {String} size - Name of the breakpoint to get.
       * @returns {String|null} - The media query of the breakpoint, or `null` if the breakpoint doesn't exist.
       */
      get: function (size) {
        for (var i in this.queries) {
          if (this.queries.hasOwnProperty(i)) {
            var query = this.queries[i];
            if (size === query.name) return query.value;
          }
        }

        return null;
      },

      /**
       * Gets the current breakpoint name by testing every breakpoint and returning the last one to match (the biggest one).
       * @function
       * @private
       * @returns {String} Name of the current breakpoint.
       */
      _getCurrentSize: function () {
        var matched;

        for (var i = 0; i < this.queries.length; i++) {
          var query = this.queries[i];

          if (matchMedia(query.value).matches) {
            matched = query;
          }
        }

        if (typeof matched === 'object') {
          return matched.name;
        } else {
          return matched;
        }
      },

      /**
       * Activates the breakpoint watcher, which fires an event on the window whenever the breakpoint changes.
       * @function
       * @private
       */
      _watcher: function () {
        var _this = this;

        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('resize.zf.mediaquery').on('resize.zf.mediaquery', function () {
          var newSize = _this._getCurrentSize(),
              currentSize = _this.current;

          if (newSize !== currentSize) {
            // Change the current media query
            _this.current = newSize;

            // Broadcast the media query change on the window
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).trigger('changed.zf.mediaquery', [newSize, currentSize]);
          }
        });
      }
    };

    // Thank you: https://github.com/sindresorhus/query-string
    function parseStyleToObject(str) {
      var styleObject = {};

      if (typeof str !== 'string') {
        return styleObject;
      }

      str = str.trim().slice(1, -1); // browsers re-quote string style values

      if (!str) {
        return styleObject;
      }

      styleObject = str.split('&').reduce(function (ret, param) {
        var parts = param.replace(/\+/g, ' ').split('=');
        var key = parts[0];
        var val = parts[1];
        key = decodeURIComponent(key);

        // missing `=` should be `null`:
        // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters
        val = val === undefined ? null : decodeURIComponent(val);

        if (!ret.hasOwnProperty(key)) {
          ret[key] = val;
        } else if (Array.isArray(ret[key])) {
          ret[key].push(val);
        } else {
          ret[key] = [ret[key], val];
        }
        return ret;
      }, {});

      return styleObject;
    }

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 104);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/104:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(38);

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/38:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(68);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Motion = __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["a" /* Motion */];
    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Move = __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["b" /* Move */];

    /***/
  },

  /***/68:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "b", function () {
      return Move;
    });
    /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "a", function () {
      return Motion;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);

    /**
     * Motion module.
     * @module foundation.motion
     */

    var initClasses = ['mui-enter', 'mui-leave'];
    var activeClasses = ['mui-enter-active', 'mui-leave-active'];

    var Motion = {
      animateIn: function (element, animation, cb) {
        animate(true, element, animation, cb);
      },

      animateOut: function (element, animation, cb) {
        animate(false, element, animation, cb);
      }
    };

    function Move(duration, elem, fn) {
      var anim,
          prog,
          start = null;
      // console.log('called');

      if (duration === 0) {
        fn.apply(elem);
        elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
        return;
      }

      function move(ts) {
        if (!start) start = ts;
        // console.log(start, ts);
        prog = ts - start;
        fn.apply(elem);

        if (prog < duration) {
          anim = window.requestAnimationFrame(move, elem);
        } else {
          window.cancelAnimationFrame(anim);
          elem.trigger('finished.zf.animate', [elem]).triggerHandler('finished.zf.animate', [elem]);
        }
      }
      anim = window.requestAnimationFrame(move);
    }

    /**
     * Animates an element in or out using a CSS transition class.
     * @function
     * @private
     * @param {Boolean} isIn - Defines if the animation is in or out.
     * @param {Object} element - jQuery or HTML object to animate.
     * @param {String} animation - CSS class to use.
     * @param {Function} cb - Callback to run when animation is finished.
     */
    function animate(isIn, element, animation, cb) {
      element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element).eq(0);

      if (!element.length) return;

      var initClass = isIn ? initClasses[0] : initClasses[1];
      var activeClass = isIn ? activeClasses[0] : activeClasses[1];

      // Set up the animation
      reset();

      element.addClass(animation).css('transition', 'none');

      requestAnimationFrame(function () {
        element.addClass(initClass);
        if (isIn) element.show();
      });

      // Start the animation
      requestAnimationFrame(function () {
        element[0].offsetWidth;
        element.css('transition', '').addClass(activeClass);
      });

      // Clean up the animation when it finishes
      element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["transitionend"])(element), finish);

      // Hides the element (for out animations), resets the element, and runs a callback
      function finish() {
        if (!isIn) element.hide();
        reset();
        if (cb) cb.apply(element);
      }

      // Resets transitions and removes motion-specific classes
      function reset() {
        element[0].style.transitionDuration = 0;
        element.removeClass(initClass + ' ' + activeClass + ' ' + animation);
      }
    }

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 105);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/105:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(39);

    /***/
  },

  /***/39:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_nest__ = __webpack_require__(69);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Nest = __WEBPACK_IMPORTED_MODULE_1__foundation_util_nest__["a" /* Nest */];

    /***/
  },

  /***/69:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Nest;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);

    var Nest = {
      Feather: function (menu) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'zf';

        menu.attr('role', 'menubar');

        var items = menu.find('li').attr({ 'role': 'menuitem' }),
            subMenuClass = 'is-' + type + '-submenu',
            subItemClass = subMenuClass + '-item',
            hasSubClass = 'is-' + type + '-submenu-parent',
            applyAria = type !== 'accordion'; // Accordions handle their own ARIA attriutes.

        items.each(function () {
          var $item = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
              $sub = $item.children('ul');

          if ($sub.length) {
            $item.addClass(hasSubClass);
            $sub.addClass('submenu ' + subMenuClass).attr({ 'data-submenu': '' });
            if (applyAria) {
              $item.attr({
                'aria-haspopup': true,
                'aria-label': $item.children('a:first').text()
              });
              // Note:  Drilldowns behave differently in how they hide, and so need
              // additional attributes.  We should look if this possibly over-generalized
              // utility (Nest) is appropriate when we rework menus in 6.4
              if (type === 'drilldown') {
                $item.attr({ 'aria-expanded': false });
              }
            }
            $sub.addClass('submenu ' + subMenuClass).attr({
              'data-submenu': '',
              'role': 'menu'
            });
            if (type === 'drilldown') {
              $sub.attr({ 'aria-hidden': true });
            }
          }

          if ($item.parent('[data-submenu]').length) {
            $item.addClass('is-submenu-item ' + subItemClass);
          }
        });

        return;
      },
      Burn: function (menu, type) {
        var //items = menu.find('li'),
        subMenuClass = 'is-' + type + '-submenu',
            subItemClass = subMenuClass + '-item',
            hasSubClass = 'is-' + type + '-submenu-parent';

        menu.find('>li, .menu, .menu > li').removeClass(subMenuClass + ' ' + subItemClass + ' ' + hasSubClass + ' is-submenu-item submenu is-active').removeAttr('data-submenu').css('display', '');
      }
    };

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 106);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/106:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(40);

    /***/
  },

  /***/40:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_timer__ = __webpack_require__(70);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].Timer = __WEBPACK_IMPORTED_MODULE_1__foundation_util_timer__["a" /* Timer */];

    /***/
  },

  /***/70:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Timer;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);

    function Timer(elem, options, cb) {
      var _this = this,
          duration = options.duration,

      //options is an object for easily adding features later.
      nameSpace = Object.keys(elem.data())[0] || 'timer',
          remain = -1,
          start,
          timer;

      this.isPaused = false;

      this.restart = function () {
        remain = -1;
        clearTimeout(timer);
        this.start();
      };

      this.start = function () {
        this.isPaused = false;
        // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
        clearTimeout(timer);
        remain = remain <= 0 ? duration : remain;
        elem.data('paused', false);
        start = Date.now();
        timer = setTimeout(function () {
          if (options.infinite) {
            _this.restart(); //rerun the timer.
          }
          if (cb && typeof cb === 'function') {
            cb();
          }
        }, remain);
        elem.trigger('timerstart.zf.' + nameSpace);
      };

      this.pause = function () {
        this.isPaused = true;
        //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
        clearTimeout(timer);
        elem.data('paused', true);
        var end = Date.now();
        remain = remain - (end - start);
        elem.trigger('timerpaused.zf.' + nameSpace);
      };
    }

    /***/
  }

  /******/ });
'use strict';

!function ($) {

  function Timer(elem, options, cb) {
    var _this = this,
        duration = options.duration,

    //options is an object for easily adding features later.
    nameSpace = Object.keys(elem.data())[0] || 'timer',
        remain = -1,
        start,
        timer;

    this.isPaused = false;

    this.restart = function () {
      remain = -1;
      clearTimeout(timer);
      this.start();
    };

    this.start = function () {
      this.isPaused = false;
      // if(!elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      remain = remain <= 0 ? duration : remain;
      elem.data('paused', false);
      start = Date.now();
      timer = setTimeout(function () {
        if (options.infinite) {
          _this.restart(); //rerun the timer.
        }
        if (cb && typeof cb === 'function') {
          cb();
        }
      }, remain);
      elem.trigger('timerstart.zf.' + nameSpace);
    };

    this.pause = function () {
      this.isPaused = true;
      //if(elem.data('paused')){ return false; }//maybe implement this sanity check if used for other things.
      clearTimeout(timer);
      elem.data('paused', true);
      var end = Date.now();
      remain = remain - (end - start);
      elem.trigger('timerpaused.zf.' + nameSpace);
    };
  }

  /**
   * Runs a callback function when images are fully loaded.
   * @param {Object} images - Image(s) to check if loaded.
   * @param {Func} callback - Function to execute when image is fully loaded.
   */
  function onImagesLoaded(images, callback) {
    var self = this,
        unloaded = images.length;

    if (unloaded === 0) {
      callback();
    }

    images.each(function () {
      // Check if image is loaded
      if (this.complete || this.readyState === 4 || this.readyState === 'complete') {
        singleImageLoaded();
      }
      // Force load the image
      else {
          // fix for IE. See https://css-tricks.com/snippets/jquery/fixing-load-in-ie-for-cached-images/
          var src = $(this).attr('src');
          $(this).attr('src', src + (src.indexOf('?') >= 0 ? '&' : '?') + new Date().getTime());
          $(this).one('load', function () {
            singleImageLoaded();
          });
        }
    });

    function singleImageLoaded() {
      unloaded--;
      if (unloaded === 0) {
        callback();
      }
    }
  }

  Foundation.Timer = Timer;
  Foundation.onImagesLoaded = onImagesLoaded;
}(jQuery);
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 107);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/107:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(41);

    /***/
  },

  /***/41:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_touch__ = __webpack_require__(71);

    __WEBPACK_IMPORTED_MODULE_1__foundation_util_touch__["a" /* Touch */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);

    window.Foundation.Touch = __WEBPACK_IMPORTED_MODULE_1__foundation_util_touch__["a" /* Touch */];

    /***/
  },

  /***/71:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Touch;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    //**************************************************
    //**Work inspired by multiple jquery swipe plugins**
    //**Done by Yohai Ararat ***************************
    //**************************************************


    var Touch = {};

    var startPosX,
        startPosY,
        startTime,
        elapsedTime,
        isMoving = false;

    function onTouchEnd() {
      //  alert(this);
      this.removeEventListener('touchmove', onTouchMove);
      this.removeEventListener('touchend', onTouchEnd);
      isMoving = false;
    }

    function onTouchMove(e) {
      if (__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.preventDefault) {
        e.preventDefault();
      }
      if (isMoving) {
        var x = e.touches[0].pageX;
        var y = e.touches[0].pageY;
        var dx = startPosX - x;
        var dy = startPosY - y;
        var dir;
        elapsedTime = new Date().getTime() - startTime;
        if (Math.abs(dx) >= __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.moveThreshold && elapsedTime <= __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.spotSwipe.timeThreshold) {
          dir = dx > 0 ? 'left' : 'right';
        }
        // else if(Math.abs(dy) >= $.spotSwipe.moveThreshold && elapsedTime <= $.spotSwipe.timeThreshold) {
        //   dir = dy > 0 ? 'down' : 'up';
        // }
        if (dir) {
          e.preventDefault();
          onTouchEnd.call(this);
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('swipe', dir).trigger('swipe' + dir);
        }
      }
    }

    function onTouchStart(e) {
      if (e.touches.length == 1) {
        startPosX = e.touches[0].pageX;
        startPosY = e.touches[0].pageY;
        isMoving = true;
        startTime = new Date().getTime();
        this.addEventListener('touchmove', onTouchMove, false);
        this.addEventListener('touchend', onTouchEnd, false);
      }
    }

    function init() {
      this.addEventListener && this.addEventListener('touchstart', onTouchStart, false);
    }

    function teardown() {
      this.removeEventListener('touchstart', onTouchStart);
    }

    var SpotSwipe = function () {
      function SpotSwipe($) {
        _classCallCheck(this, SpotSwipe);

        this.version = '1.0.0';
        this.enabled = 'ontouchstart' in document.documentElement;
        this.preventDefault = false;
        this.moveThreshold = 75;
        this.timeThreshold = 200;
        this.$ = $;
        this._init();
      }

      _createClass(SpotSwipe, [{
        key: '_init',
        value: function _init() {
          var $ = this.$;
          $.event.special.swipe = { setup: init };

          $.each(['left', 'up', 'down', 'right'], function () {
            $.event.special['swipe' + this] = { setup: function () {
                $(this).on('swipe', $.noop);
              } };
          });
        }
      }]);

      return SpotSwipe;
    }();

    /****************************************************
     * As far as I can tell, both setupSpotSwipe and    *
     * setupTouchHandler should be idempotent,          *
     * because they directly replace functions &        *
     * values, and do not add event handlers directly.  *
     ****************************************************/

    Touch.setupSpotSwipe = function ($) {
      $.spotSwipe = new SpotSwipe($);
    };

    /****************************************************
     * Method for adding pseudo drag events to elements *
     ***************************************************/
    Touch.setupTouchHandler = function ($) {
      $.fn.addTouch = function () {
        this.each(function (i, el) {
          $(el).bind('touchstart touchmove touchend touchcancel', function () {
            //we pass the original event object because the jQuery event
            //object is normalized to w3c specs and does not provide the TouchList
            handleTouch(event);
          });
        });

        var handleTouch = function (event) {
          var touches = event.changedTouches,
              first = touches[0],
              eventTypes = {
            touchstart: 'mousedown',
            touchmove: 'mousemove',
            touchend: 'mouseup'
          },
              type = eventTypes[event.type],
              simulatedEvent;

          if ('MouseEvent' in window && typeof window.MouseEvent === 'function') {
            simulatedEvent = new window.MouseEvent(type, {
              'bubbles': true,
              'cancelable': true,
              'screenX': first.screenX,
              'screenY': first.screenY,
              'clientX': first.clientX,
              'clientY': first.clientY
            });
          } else {
            simulatedEvent = document.createEvent('MouseEvent');
            simulatedEvent.initMouseEvent(type, true, true, window, 1, first.screenX, first.screenY, first.clientX, first.clientY, false, false, false, false, 0 /*left*/, null);
          }
          first.target.dispatchEvent(simulatedEvent);
        };
      };
    };

    Touch.init = function ($) {
      if (typeof $.spotSwipe === 'undefined') {
        Touch.setupSpotSwipe($);
        Touch.setupTouchHandler($);
      }
    };

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 108);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/108:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(42);

    /***/
  },

  /***/4:
  /***/function (module, exports) {

    module.exports = { Motion: window.Foundation.Motion, Move: window.Foundation.Move };

    /***/
  },

  /***/42:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_triggers__ = __webpack_require__(7);

    __WEBPACK_IMPORTED_MODULE_2__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_1_jquery___default.a, __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"]);

    /***/
  },

  /***/7:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Triggers;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);

    var MutationObserver = function () {
      var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
      for (var i = 0; i < prefixes.length; i++) {
        if (prefixes[i] + 'MutationObserver' in window) {
          return window[prefixes[i] + 'MutationObserver'];
        }
      }
      return false;
    }();

    var triggers = function (el, type) {
      el.data(type).split(' ').forEach(function (id) {
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
      });
    };

    var Triggers = {
      Listeners: {
        Basic: {},
        Global: {}
      },
      Initializers: {}
    };

    Triggers.Listeners.Basic = {
      openListener: function () {
        triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'open');
      },
      closeListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'close');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');
        }
      },
      toggleListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'toggle');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');
        }
      },
      closeableListener: function (e) {
        e.stopPropagation();
        var animation = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');

        if (animation !== '') {
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), animation, function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');
          });
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');
        }
      },
      toggleFocusListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id).triggerHandler('toggle.zf.trigger', [__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);
      }
    };

    // Elements with [data-open] will reveal a plugin that supports it when clicked.
    Triggers.Initializers.addOpenListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);
      $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);
    };

    // Elements with [data-close] will close a plugin that supports it when clicked.
    // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
    Triggers.Initializers.addCloseListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);
      $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);
    };

    // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
    Triggers.Initializers.addToggleListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);
      $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);
    };

    // Elements with [data-closable] will respond to close.zf.trigger events.
    Triggers.Initializers.addCloseableListener = function ($elem) {
      $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);
      $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);
    };

    // Elements with [data-toggle-focus] will respond to coming in and out of focus
    Triggers.Initializers.addToggleFocusListener = function ($elem) {
      $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);
      $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
    };

    // More Global/complex listeners and triggers
    Triggers.Listeners.Global = {
      resizeListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a resize event
        $nodes.attr('data-events', "resize");
      },
      scrollListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a scroll event
        $nodes.attr('data-events', "scroll");
      },
      closeMeListener: function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);
          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      }
    };

    // Global, parses whole document.
    Triggers.Initializers.addClosemeListener = function (pluginName) {
      var yetiBoxes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),
          plugNames = ['dropdown', 'tooltip', 'reveal'];

      if (pluginName) {
        if (typeof pluginName === 'string') {
          plugNames.push(pluginName);
        } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
          plugNames.concat(pluginName);
        } else {
          console.error('Plugin names must be strings');
        }
      }
      if (yetiBoxes.length) {
        var listeners = plugNames.map(function (name) {
          return 'closeme.zf.' + name;
        }).join(' ');

        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
      }
    };

    function debounceGlobalListener(debounce, trigger, listener) {
      var timer = void 0,
          args = Array.prototype.slice.call(arguments, 3);
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger, function (e) {
        if (timer) {
          clearTimeout(timer);
        }
        timer = setTimeout(function () {
          listener.apply(null, args);
        }, debounce || 10); //default time to emit scroll event
      });
    }

    Triggers.Initializers.addResizeListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);
      }
    };

    Triggers.Initializers.addScrollListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);
      }
    };

    Triggers.Initializers.addMutationEventsListener = function ($elem) {
      if (!MutationObserver) {
        return false;
      }
      var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]');

      //element callback
      var listeningElementsMutation = function (mutationRecordsList) {
        var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);

        //trigger the event handler for the element depending on type
        switch (mutationRecordsList[0].type) {
          case "attributes":
            if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
            }
            if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('resizeme.zf.trigger', [$target]);
            }
            if (mutationRecordsList[0].attributeName === "style") {
              $target.closest("[data-mutate]").attr("data-events", "mutate");
              $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            }
            break;

          case "childList":
            $target.closest("[data-mutate]").attr("data-events", "mutate");
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            break;

          default:
            return false;
          //nothing
        }
      };

      if ($nodes.length) {
        //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
        for (var i = 0; i <= $nodes.length - 1; i++) {
          var elementObserver = new MutationObserver(listeningElementsMutation);
          elementObserver.observe($nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
        }
      }
    };

    Triggers.Initializers.addSimpleListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);

      Triggers.Initializers.addOpenListener($document);
      Triggers.Initializers.addCloseListener($document);
      Triggers.Initializers.addToggleListener($document);
      Triggers.Initializers.addCloseableListener($document);
      Triggers.Initializers.addToggleFocusListener($document);
    };

    Triggers.Initializers.addGlobalListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);
      Triggers.Initializers.addMutationEventsListener($document);
      Triggers.Initializers.addResizeListener();
      Triggers.Initializers.addScrollListener();
      Triggers.Initializers.addClosemeListener();
    };

    Triggers.init = function ($, Foundation) {
      if (typeof $.triggersInitialized === 'undefined') {
        var $document = $(document);

        if (document.readyState === "complete") {
          Triggers.Initializers.addSimpleListeners();
          Triggers.Initializers.addGlobalListeners();
        } else {
          $(window).on('load', function () {
            Triggers.Initializers.addSimpleListeners();
            Triggers.Initializers.addGlobalListeners();
          });
        }

        $.triggersInitialized = true;
      }

      if (Foundation) {
        Foundation.Triggers = Triggers;
        // Legacy included to be backwards compatible for now.
        Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;
      }
    };

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 79);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/13:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_abide__ = __webpack_require__(43);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_abide__["a" /* Abide */], 'Abide');

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/43:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Abide;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Abide module.
     * @module foundation.abide
     */

    var Abide = function (_Plugin) {
      _inherits(Abide, _Plugin);

      function Abide() {
        _classCallCheck(this, Abide);

        return _possibleConstructorReturn(this, (Abide.__proto__ || Object.getPrototypeOf(Abide)).apply(this, arguments));
      }

      _createClass(Abide, [{
        key: '_setup',

        /**
         * Creates a new instance of Abide.
         * @class
         * @name Abide
         * @fires Abide#init
         * @param {Object} element - jQuery object to add the trigger to.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Abide.defaults, this.$element.data(), options);

          this.className = 'Abide'; // ie9 back compat
          this._init();
        }

        /**
         * Initializes the Abide plugin and calls functions to get Abide functioning on load.
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          this.$inputs = this.$element.find('input, textarea, select');

          this._events();
        }

        /**
         * Initializes events for Abide.
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this3 = this;

          this.$element.off('.abide').on('reset.zf.abide', function () {
            _this3.resetForm();
          }).on('submit.zf.abide', function () {
            return _this3.validateForm();
          });

          if (this.options.validateOn === 'fieldChange') {
            this.$inputs.off('change.zf.abide').on('change.zf.abide', function (e) {
              _this3.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target));
            });
          }

          if (this.options.liveValidate) {
            this.$inputs.off('input.zf.abide').on('input.zf.abide', function (e) {
              _this3.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target));
            });
          }

          if (this.options.validateOnBlur) {
            this.$inputs.off('blur.zf.abide').on('blur.zf.abide', function (e) {
              _this3.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target));
            });
          }
        }

        /**
         * Calls necessary functions to update Abide upon DOM change
         * @private
         */

      }, {
        key: '_reflow',
        value: function _reflow() {
          this._init();
        }

        /**
         * Checks whether or not a form element has the required attribute and if it's checked or not
         * @param {Object} element - jQuery object to check for required attribute
         * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
         */

      }, {
        key: 'requiredCheck',
        value: function requiredCheck($el) {
          if (!$el.attr('required')) return true;

          var isGood = true;

          switch ($el[0].type) {
            case 'checkbox':
              isGood = $el[0].checked;
              break;

            case 'select':
            case 'select-one':
            case 'select-multiple':
              var opt = $el.find('option:selected');
              if (!opt.length || !opt.val()) isGood = false;
              break;

            default:
              if (!$el.val() || !$el.val().length) isGood = false;
          }

          return isGood;
        }

        /**
         * Get:
         * - Based on $el, the first element(s) corresponding to `formErrorSelector` in this order:
         *   1. The element's direct sibling('s).
         *   2. The element's parent's children.
         * - Element(s) with the attribute `[data-form-error-for]` set with the element's id.
         *
         * This allows for multiple form errors per input, though if none are found, no form errors will be shown.
         *
         * @param {Object} $el - jQuery object to use as reference to find the form error selector.
         * @returns {Object} jQuery object with the selector.
         */

      }, {
        key: 'findFormError',
        value: function findFormError($el) {
          var id = $el[0].id;
          var $error = $el.siblings(this.options.formErrorSelector);

          if (!$error.length) {
            $error = $el.parent().find(this.options.formErrorSelector);
          }

          $error = $error.add(this.$element.find('[data-form-error-for="' + id + '"]'));

          return $error;
        }

        /**
         * Get the first element in this order:
         * 2. The <label> with the attribute `[for="someInputId"]`
         * 3. The `.closest()` <label>
         *
         * @param {Object} $el - jQuery object to check for required attribute
         * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
         */

      }, {
        key: 'findLabel',
        value: function findLabel($el) {
          var id = $el[0].id;
          var $label = this.$element.find('label[for="' + id + '"]');

          if (!$label.length) {
            return $el.closest('label');
          }

          return $label;
        }

        /**
         * Get the set of labels associated with a set of radio els in this order
         * 2. The <label> with the attribute `[for="someInputId"]`
         * 3. The `.closest()` <label>
         *
         * @param {Object} $el - jQuery object to check for required attribute
         * @returns {Boolean} Boolean value depends on whether or not attribute is checked or empty
         */

      }, {
        key: 'findRadioLabels',
        value: function findRadioLabels($els) {
          var _this4 = this;

          var labels = $els.map(function (i, el) {
            var id = el.id;
            var $label = _this4.$element.find('label[for="' + id + '"]');

            if (!$label.length) {
              $label = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el).closest('label');
            }
            return $label[0];
          });

          return __WEBPACK_IMPORTED_MODULE_0_jquery___default()(labels);
        }

        /**
         * Adds the CSS error class as specified by the Abide settings to the label, input, and the form
         * @param {Object} $el - jQuery object to add the class to
         */

      }, {
        key: 'addErrorClasses',
        value: function addErrorClasses($el) {
          var $label = this.findLabel($el);
          var $formError = this.findFormError($el);

          if ($label.length) {
            $label.addClass(this.options.labelErrorClass);
          }

          if ($formError.length) {
            $formError.addClass(this.options.formErrorClass);
          }

          $el.addClass(this.options.inputErrorClass).attr('data-invalid', '');
        }

        /**
         * Remove CSS error classes etc from an entire radio button group
         * @param {String} groupName - A string that specifies the name of a radio button group
         *
         */

      }, {
        key: 'removeRadioErrorClasses',
        value: function removeRadioErrorClasses(groupName) {
          var $els = this.$element.find(':radio[name="' + groupName + '"]');
          var $labels = this.findRadioLabels($els);
          var $formErrors = this.findFormError($els);

          if ($labels.length) {
            $labels.removeClass(this.options.labelErrorClass);
          }

          if ($formErrors.length) {
            $formErrors.removeClass(this.options.formErrorClass);
          }

          $els.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
        }

        /**
         * Removes CSS error class as specified by the Abide settings from the label, input, and the form
         * @param {Object} $el - jQuery object to remove the class from
         */

      }, {
        key: 'removeErrorClasses',
        value: function removeErrorClasses($el) {
          // radios need to clear all of the els
          if ($el[0].type == 'radio') {
            return this.removeRadioErrorClasses($el.attr('name'));
          }

          var $label = this.findLabel($el);
          var $formError = this.findFormError($el);

          if ($label.length) {
            $label.removeClass(this.options.labelErrorClass);
          }

          if ($formError.length) {
            $formError.removeClass(this.options.formErrorClass);
          }

          $el.removeClass(this.options.inputErrorClass).removeAttr('data-invalid');
        }

        /**
         * Goes through a form to find inputs and proceeds to validate them in ways specific to their type.
         * Ignores inputs with data-abide-ignore, type="hidden" or disabled attributes set
         * @fires Abide#invalid
         * @fires Abide#valid
         * @param {Object} element - jQuery object to validate, should be an HTML input
         * @returns {Boolean} goodToGo - If the input is valid or not.
         */

      }, {
        key: 'validateInput',
        value: function validateInput($el) {
          var clearRequire = this.requiredCheck($el),
              validated = false,
              customValidator = true,
              validator = $el.attr('data-validator'),
              equalTo = true;

          // don't validate ignored inputs or hidden inputs or disabled inputs
          if ($el.is('[data-abide-ignore]') || $el.is('[type="hidden"]') || $el.is('[disabled]')) {
            return true;
          }

          switch ($el[0].type) {
            case 'radio':
              validated = this.validateRadio($el.attr('name'));
              break;

            case 'checkbox':
              validated = clearRequire;
              break;

            case 'select':
            case 'select-one':
            case 'select-multiple':
              validated = clearRequire;
              break;

            default:
              validated = this.validateText($el);
          }

          if (validator) {
            customValidator = this.matchValidation($el, validator, $el.attr('required'));
          }

          if ($el.attr('data-equalto')) {
            equalTo = this.options.validators.equalTo($el);
          }

          var goodToGo = [clearRequire, validated, customValidator, equalTo].indexOf(false) === -1;
          var message = (goodToGo ? 'valid' : 'invalid') + '.zf.abide';

          if (goodToGo) {
            // Re-validate inputs that depend on this one with equalto
            var dependentElements = this.$element.find('[data-equalto="' + $el.attr('id') + '"]');
            if (dependentElements.length) {
              var _this = this;
              dependentElements.each(function () {
                if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).val()) {
                  _this.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));
                }
              });
            }
          }

          this[goodToGo ? 'removeErrorClasses' : 'addErrorClasses']($el);

          /**
           * Fires when the input is done checking for validation. Event trigger is either `valid.zf.abide` or `invalid.zf.abide`
           * Trigger includes the DOM element of the input.
           * @event Abide#valid
           * @event Abide#invalid
           */
          $el.trigger(message, [$el]);

          return goodToGo;
        }

        /**
         * Goes through a form and if there are any invalid inputs, it will display the form error element
         * @returns {Boolean} noError - true if no errors were detected...
         * @fires Abide#formvalid
         * @fires Abide#forminvalid
         */

      }, {
        key: 'validateForm',
        value: function validateForm() {
          var acc = [];
          var _this = this;

          this.$inputs.each(function () {
            acc.push(_this.validateInput(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)));
          });

          var noError = acc.indexOf(false) === -1;

          this.$element.find('[data-abide-error]').css('display', noError ? 'none' : 'block');

          /**
           * Fires when the form is finished validating. Event trigger is either `formvalid.zf.abide` or `forminvalid.zf.abide`.
           * Trigger includes the element of the form.
           * @event Abide#formvalid
           * @event Abide#forminvalid
           */
          this.$element.trigger((noError ? 'formvalid' : 'forminvalid') + '.zf.abide', [this.$element]);

          return noError;
        }

        /**
         * Determines whether or a not a text input is valid based on the pattern specified in the attribute. If no matching pattern is found, returns true.
         * @param {Object} $el - jQuery object to validate, should be a text input HTML element
         * @param {String} pattern - string value of one of the RegEx patterns in Abide.options.patterns
         * @returns {Boolean} Boolean value depends on whether or not the input value matches the pattern specified
         */

      }, {
        key: 'validateText',
        value: function validateText($el, pattern) {
          // A pattern can be passed to this function, or it will be infered from the input's "pattern" attribute, or it's "type" attribute
          pattern = pattern || $el.attr('pattern') || $el.attr('type');
          var inputText = $el.val();
          var valid = false;

          if (inputText.length) {
            // If the pattern attribute on the element is in Abide's list of patterns, then test that regexp
            if (this.options.patterns.hasOwnProperty(pattern)) {
              valid = this.options.patterns[pattern].test(inputText);
            }
            // If the pattern name isn't also the type attribute of the field, then test it as a regexp
            else if (pattern !== $el.attr('type')) {
                valid = new RegExp(pattern).test(inputText);
              } else {
                valid = true;
              }
          }
          // An empty field is valid if it's not required
          else if (!$el.prop('required')) {
              valid = true;
            }

          return valid;
        }

        /**
         * Determines whether or a not a radio input is valid based on whether or not it is required and selected. Although the function targets a single `<input>`, it validates by checking the `required` and `checked` properties of all radio buttons in its group.
         * @param {String} groupName - A string that specifies the name of a radio button group
         * @returns {Boolean} Boolean value depends on whether or not at least one radio input has been selected (if it's required)
         */

      }, {
        key: 'validateRadio',
        value: function validateRadio(groupName) {
          // If at least one radio in the group has the `required` attribute, the group is considered required
          // Per W3C spec, all radio buttons in a group should have `required`, but we're being nice
          var $group = this.$element.find(':radio[name="' + groupName + '"]');
          var valid = false,
              required = false;

          // For the group to be required, at least one radio needs to be required
          $group.each(function (i, e) {
            if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e).attr('required')) {
              required = true;
            }
          });
          if (!required) valid = true;

          if (!valid) {
            // For the group to be valid, at least one radio needs to be checked
            $group.each(function (i, e) {
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e).prop('checked')) {
                valid = true;
              }
            });
          };

          return valid;
        }

        /**
         * Determines if a selected input passes a custom validation function. Multiple validations can be used, if passed to the element with `data-validator="foo bar baz"` in a space separated listed.
         * @param {Object} $el - jQuery input element.
         * @param {String} validators - a string of function names matching functions in the Abide.options.validators object.
         * @param {Boolean} required - self explanatory?
         * @returns {Boolean} - true if validations passed.
         */

      }, {
        key: 'matchValidation',
        value: function matchValidation($el, validators, required) {
          var _this5 = this;

          required = required ? true : false;

          var clear = validators.split(' ').map(function (v) {
            return _this5.options.validators[v]($el, required, $el.parent());
          });
          return clear.indexOf(false) === -1;
        }

        /**
         * Resets form inputs and styles
         * @fires Abide#formreset
         */

      }, {
        key: 'resetForm',
        value: function resetForm() {
          var $form = this.$element,
              opts = this.options;

          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.' + opts.labelErrorClass, $form).not('small').removeClass(opts.labelErrorClass);
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.' + opts.inputErrorClass, $form).not('small').removeClass(opts.inputErrorClass);
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(opts.formErrorSelector + '.' + opts.formErrorClass).removeClass(opts.formErrorClass);
          $form.find('[data-abide-error]').css('display', 'none');
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(':input', $form).not(':button, :submit, :reset, :hidden, :radio, :checkbox, [data-abide-ignore]').val('').removeAttr('data-invalid');
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(':input:radio', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(':input:checkbox', $form).not('[data-abide-ignore]').prop('checked', false).removeAttr('data-invalid');
          /**
           * Fires when the form has been reset.
           * @event Abide#formreset
           */
          $form.trigger('formreset.zf.abide', [$form]);
        }

        /**
         * Destroys an instance of Abide.
         * Removes error styles and classes from elements, without resetting their values.
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          var _this = this;
          this.$element.off('.abide').find('[data-abide-error]').css('display', 'none');

          this.$inputs.off('.abide').each(function () {
            _this.removeErrorClasses(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));
          });
        }
      }]);

      return Abide;
    }(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__["Plugin"]);

    /**
     * Default settings for plugin
     */

    Abide.defaults = {
      /**
       * The default event to validate inputs. Checkboxes and radios validate immediately.
       * Remove or change this value for manual validation.
       * @option
       * @type {?string}
       * @default 'fieldChange'
       */
      validateOn: 'fieldChange',

      /**
       * Class to be applied to input labels on failed validation.
       * @option
       * @type {string}
       * @default 'is-invalid-label'
       */
      labelErrorClass: 'is-invalid-label',

      /**
       * Class to be applied to inputs on failed validation.
       * @option
       * @type {string}
       * @default 'is-invalid-input'
       */
      inputErrorClass: 'is-invalid-input',

      /**
       * Class selector to use to target Form Errors for show/hide.
       * @option
       * @type {string}
       * @default '.form-error'
       */
      formErrorSelector: '.form-error',

      /**
       * Class added to Form Errors on failed validation.
       * @option
       * @type {string}
       * @default 'is-visible'
       */
      formErrorClass: 'is-visible',

      /**
       * Set to true to validate text inputs on any value change.
       * @option
       * @type {boolean}
       * @default false
       */
      liveValidate: false,

      /**
       * Set to true to validate inputs on blur.
       * @option
       * @type {boolean}
       * @default false
       */
      validateOnBlur: false,

      patterns: {
        alpha: /^[a-zA-Z]+$/,
        alpha_numeric: /^[a-zA-Z0-9]+$/,
        integer: /^[-+]?\d+$/,
        number: /^[-+]?\d*(?:[\.\,]\d+)?$/,

        // amex, visa, diners
        card: /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|(?:222[1-9]|2[3-6][0-9]{2}|27[0-1][0-9]|2720)[0-9]{12}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$/,
        cvv: /^([0-9]){3,4}$/,

        // http://www.whatwg.org/specs/web-apps/current-work/multipage/states-of-the-type-attribute.html#valid-e-mail-address
        email: /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/,

        url: /^(https?|ftp|file|ssh):\/\/(((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-zA-Z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-zA-Z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/,
        // abc.de
        domain: /^([a-zA-Z0-9]([a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])?\.)+[a-zA-Z]{2,8}$/,

        datetime: /^([0-2][0-9]{3})\-([0-1][0-9])\-([0-3][0-9])T([0-5][0-9])\:([0-5][0-9])\:([0-5][0-9])(Z|([\-\+]([0-1][0-9])\:00))$/,
        // YYYY-MM-DD
        date: /(?:19|20)[0-9]{2}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-9])|(?:(?!02)(?:0[1-9]|1[0-2])-(?:30))|(?:(?:0[13578]|1[02])-31))$/,
        // HH:MM:SS
        time: /^(0[0-9]|1[0-9]|2[0-3])(:[0-5][0-9]){2}$/,
        dateISO: /^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/,
        // MM/DD/YYYY
        month_day_year: /^(0[1-9]|1[012])[- \/.](0[1-9]|[12][0-9]|3[01])[- \/.]\d{4}$/,
        // DD/MM/YYYY
        day_month_year: /^(0[1-9]|[12][0-9]|3[01])[- \/.](0[1-9]|1[012])[- \/.]\d{4}$/,

        // #FFF or #FFFFFF
        color: /^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/,

        // Domain || URL
        website: {
          test: function (text) {
            return Abide.defaults.patterns['domain'].test(text) || Abide.defaults.patterns['url'].test(text);
          }
        }
      },

      /**
       * Optional validation functions to be used. `equalTo` being the only default included function.
       * Functions should return only a boolean if the input is valid or not. Functions are given the following arguments:
       * el : The jQuery element to validate.
       * required : Boolean value of the required attribute be present or not.
       * parent : The direct parent of the input.
       * @option
       */
      validators: {
        equalTo: function (el, required, parent) {
          return __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + el.attr('data-equalto')).val() === el.val();
        }
      }
    };

    /***/
  },

  /***/79:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(13);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 85);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/10:
  /***/function (module, exports) {

    module.exports = { onImagesLoaded: window.Foundation.onImagesLoaded };

    /***/
  },

  /***/19:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_equalizer__ = __webpack_require__(49);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_equalizer__["a" /* Equalizer */], 'Equalizer');

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/49:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Equalizer;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(6);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__ = __webpack_require__(10);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Equalizer module.
     * @module foundation.equalizer
     * @requires foundation.util.mediaQuery
     * @requires foundation.util.imageLoader if equalizer contains images
     */

    var Equalizer = function (_Plugin) {
      _inherits(Equalizer, _Plugin);

      function Equalizer() {
        _classCallCheck(this, Equalizer);

        return _possibleConstructorReturn(this, (Equalizer.__proto__ || Object.getPrototypeOf(Equalizer)).apply(this, arguments));
      }

      _createClass(Equalizer, [{
        key: '_setup',

        /**
         * Creates a new instance of Equalizer.
         * @class
         * @name Equalizer
         * @fires Equalizer#init
         * @param {Object} element - jQuery object to add the trigger to.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Equalizer.defaults, this.$element.data(), options);
          this.className = 'Equalizer'; // ie9 back compat

          this._init();
        }

        /**
         * Initializes the Equalizer plugin and calls functions to get equalizer functioning on load.
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          var eqId = this.$element.attr('data-equalizer') || '';
          var $watched = this.$element.find('[data-equalizer-watch="' + eqId + '"]');

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"]._init();

          this.$watched = $watched.length ? $watched : this.$element.find('[data-equalizer-watch]');
          this.$element.attr('data-resize', eqId || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6, 'eq'));
          this.$element.attr('data-mutate', eqId || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6, 'eq'));

          this.hasNested = this.$element.find('[data-equalizer]').length > 0;
          this.isNested = this.$element.parentsUntil(document.body, '[data-equalizer]').length > 0;
          this.isOn = false;
          this._bindHandler = {
            onResizeMeBound: this._onResizeMe.bind(this),
            onPostEqualizedBound: this._onPostEqualized.bind(this)
          };

          var imgs = this.$element.find('img');
          var tooSmall;
          if (this.options.equalizeOn) {
            tooSmall = this._checkMQ();
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', this._checkMQ.bind(this));
          } else {
            this._events();
          }
          if (tooSmall !== undefined && tooSmall === false || tooSmall === undefined) {
            if (imgs.length) {
              __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__["onImagesLoaded"])(imgs, this._reflow.bind(this));
            } else {
              this._reflow();
            }
          }
        }

        /**
         * Removes event listeners if the breakpoint is too small.
         * @private
         */

      }, {
        key: '_pauseEvents',
        value: function _pauseEvents() {
          this.isOn = false;
          this.$element.off({
            '.zf.equalizer': this._bindHandler.onPostEqualizedBound,
            'resizeme.zf.trigger': this._bindHandler.onResizeMeBound,
            'mutateme.zf.trigger': this._bindHandler.onResizeMeBound
          });
        }

        /**
         * function to handle $elements resizeme.zf.trigger, with bound this on _bindHandler.onResizeMeBound
         * @private
         */

      }, {
        key: '_onResizeMe',
        value: function _onResizeMe(e) {
          this._reflow();
        }

        /**
         * function to handle $elements postequalized.zf.equalizer, with bound this on _bindHandler.onPostEqualizedBound
         * @private
         */

      }, {
        key: '_onPostEqualized',
        value: function _onPostEqualized(e) {
          if (e.target !== this.$element[0]) {
            this._reflow();
          }
        }

        /**
         * Initializes events for Equalizer.
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this = this;
          this._pauseEvents();
          if (this.hasNested) {
            this.$element.on('postequalized.zf.equalizer', this._bindHandler.onPostEqualizedBound);
          } else {
            this.$element.on('resizeme.zf.trigger', this._bindHandler.onResizeMeBound);
            this.$element.on('mutateme.zf.trigger', this._bindHandler.onResizeMeBound);
          }
          this.isOn = true;
        }

        /**
         * Checks the current breakpoint to the minimum required size.
         * @private
         */

      }, {
        key: '_checkMQ',
        value: function _checkMQ() {
          var tooSmall = !__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].is(this.options.equalizeOn);
          if (tooSmall) {
            if (this.isOn) {
              this._pauseEvents();
              this.$watched.css('height', 'auto');
            }
          } else {
            if (!this.isOn) {
              this._events();
            }
          }
          return tooSmall;
        }

        /**
         * A noop version for the plugin
         * @private
         */

      }, {
        key: '_killswitch',
        value: function _killswitch() {
          return;
        }

        /**
         * Calls necessary functions to update Equalizer upon DOM change
         * @private
         */

      }, {
        key: '_reflow',
        value: function _reflow() {
          if (!this.options.equalizeOnStack) {
            if (this._isStacked()) {
              this.$watched.css('height', 'auto');
              return false;
            }
          }
          if (this.options.equalizeByRow) {
            this.getHeightsByRow(this.applyHeightByRow.bind(this));
          } else {
            this.getHeights(this.applyHeight.bind(this));
          }
        }

        /**
         * Manually determines if the first 2 elements are *NOT* stacked.
         * @private
         */

      }, {
        key: '_isStacked',
        value: function _isStacked() {
          if (!this.$watched[0] || !this.$watched[1]) {
            return true;
          }
          return this.$watched[0].getBoundingClientRect().top !== this.$watched[1].getBoundingClientRect().top;
        }

        /**
         * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
         * @param {Function} cb - A non-optional callback to return the heights array to.
         * @returns {Array} heights - An array of heights of children within Equalizer container
         */

      }, {
        key: 'getHeights',
        value: function getHeights(cb) {
          var heights = [];
          for (var i = 0, len = this.$watched.length; i < len; i++) {
            this.$watched[i].style.height = 'auto';
            heights.push(this.$watched[i].offsetHeight);
          }
          cb(heights);
        }

        /**
         * Finds the outer heights of children contained within an Equalizer parent and returns them in an array
         * @param {Function} cb - A non-optional callback to return the heights array to.
         * @returns {Array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
         */

      }, {
        key: 'getHeightsByRow',
        value: function getHeightsByRow(cb) {
          var lastElTopOffset = this.$watched.length ? this.$watched.first().offset().top : 0,
              groups = [],
              group = 0;
          //group by Row
          groups[group] = [];
          for (var i = 0, len = this.$watched.length; i < len; i++) {
            this.$watched[i].style.height = 'auto';
            //maybe could use this.$watched[i].offsetTop
            var elOffsetTop = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$watched[i]).offset().top;
            if (elOffsetTop != lastElTopOffset) {
              group++;
              groups[group] = [];
              lastElTopOffset = elOffsetTop;
            }
            groups[group].push([this.$watched[i], this.$watched[i].offsetHeight]);
          }

          for (var j = 0, ln = groups.length; j < ln; j++) {
            var heights = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[j]).map(function () {
              return this[1];
            }).get();
            var max = Math.max.apply(null, heights);
            groups[j].push(max);
          }
          cb(groups);
        }

        /**
         * Changes the CSS height property of each child in an Equalizer parent to match the tallest
         * @param {array} heights - An array of heights of children within Equalizer container
         * @fires Equalizer#preequalized
         * @fires Equalizer#postequalized
         */

      }, {
        key: 'applyHeight',
        value: function applyHeight(heights) {
          var max = Math.max.apply(null, heights);
          /**
           * Fires before the heights are applied
           * @event Equalizer#preequalized
           */
          this.$element.trigger('preequalized.zf.equalizer');

          this.$watched.css('height', max);

          /**
           * Fires when the heights have been applied
           * @event Equalizer#postequalized
           */
          this.$element.trigger('postequalized.zf.equalizer');
        }

        /**
         * Changes the CSS height property of each child in an Equalizer parent to match the tallest by row
         * @param {array} groups - An array of heights of children within Equalizer container grouped by row with element,height and max as last child
         * @fires Equalizer#preequalized
         * @fires Equalizer#preequalizedrow
         * @fires Equalizer#postequalizedrow
         * @fires Equalizer#postequalized
         */

      }, {
        key: 'applyHeightByRow',
        value: function applyHeightByRow(groups) {
          /**
           * Fires before the heights are applied
           */
          this.$element.trigger('preequalized.zf.equalizer');
          for (var i = 0, len = groups.length; i < len; i++) {
            var groupsILength = groups[i].length,
                max = groups[i][groupsILength - 1];
            if (groupsILength <= 2) {
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[i][0][0]).css({ 'height': 'auto' });
              continue;
            }
            /**
              * Fires before the heights per row are applied
              * @event Equalizer#preequalizedrow
              */
            this.$element.trigger('preequalizedrow.zf.equalizer');
            for (var j = 0, lenJ = groupsILength - 1; j < lenJ; j++) {
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(groups[i][j][0]).css({ 'height': max });
            }
            /**
              * Fires when the heights per row have been applied
              * @event Equalizer#postequalizedrow
              */
            this.$element.trigger('postequalizedrow.zf.equalizer');
          }
          /**
           * Fires when the heights have been applied
           */
          this.$element.trigger('postequalized.zf.equalizer');
        }

        /**
         * Destroys an instance of Equalizer.
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this._pauseEvents();
          this.$watched.css('height', 'auto');
        }
      }]);

      return Equalizer;
    }(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["Plugin"]);

    /**
     * Default settings for plugin
     */

    Equalizer.defaults = {
      /**
       * Enable height equalization when stacked on smaller screens.
       * @option
       * @type {boolean}
       * @default false
       */
      equalizeOnStack: false,
      /**
       * Enable height equalization row by row.
       * @option
       * @type {boolean}
       * @default false
       */
      equalizeByRow: false,
      /**
       * String representing the minimum breakpoint size the plugin should equalize heights on.
       * @option
       * @type {string}
       * @default ''
       */
      equalizeOn: ''
    };

    /***/
  },

  /***/6:
  /***/function (module, exports) {

    module.exports = { MediaQuery: window.Foundation.MediaQuery };

    /***/
  },

  /***/85:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(19);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 86);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/20:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_interchange__ = __webpack_require__(50);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_interchange__["a" /* Interchange */], 'Interchange');

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/50:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Interchange;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(6);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Interchange module.
     * @module foundation.interchange
     * @requires foundation.util.mediaQuery
     */

    var Interchange = function (_Plugin) {
      _inherits(Interchange, _Plugin);

      function Interchange() {
        _classCallCheck(this, Interchange);

        return _possibleConstructorReturn(this, (Interchange.__proto__ || Object.getPrototypeOf(Interchange)).apply(this, arguments));
      }

      _createClass(Interchange, [{
        key: '_setup',

        /**
         * Creates a new instance of Interchange.
         * @class
         * @name Interchange
         * @fires Interchange#init
         * @param {Object} element - jQuery object to add the trigger to.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Interchange.defaults, options);
          this.rules = [];
          this.currentPath = '';
          this.className = 'Interchange'; // ie9 back compat

          this._init();
          this._events();
        }

        /**
         * Initializes the Interchange plugin and calls functions to get interchange functioning on load.
         * @function
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"]._init();

          var id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6, 'interchange');
          this.$element.attr({
            'data-resize': id,
            'id': id
          });

          this._addBreakpoints();
          this._generateRules();
          this._reflow();
        }

        /**
         * Initializes events for Interchange.
         * @function
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this3 = this;

          this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function () {
            return _this3._reflow();
          });
        }

        /**
         * Calls necessary functions to update Interchange upon DOM change
         * @function
         * @private
         */

      }, {
        key: '_reflow',
        value: function _reflow() {
          var match;

          // Iterate through each rule, but only save the last match
          for (var i in this.rules) {
            if (this.rules.hasOwnProperty(i)) {
              var rule = this.rules[i];
              if (window.matchMedia(rule.query).matches) {
                match = rule;
              }
            }
          }

          if (match) {
            this.replace(match.path);
          }
        }

        /**
         * Gets the Foundation breakpoints and adds them to the Interchange.SPECIAL_QUERIES object.
         * @function
         * @private
         */

      }, {
        key: '_addBreakpoints',
        value: function _addBreakpoints() {
          for (var i in __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].queries) {
            if (__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].queries.hasOwnProperty(i)) {
              var query = __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].queries[i];
              Interchange.SPECIAL_QUERIES[query.name] = query.value;
            }
          }
        }

        /**
         * Checks the Interchange element for the provided media query + content pairings
         * @function
         * @private
         * @param {Object} element - jQuery object that is an Interchange instance
         * @returns {Array} scenarios - Array of objects that have 'mq' and 'path' keys with corresponding keys
         */

      }, {
        key: '_generateRules',
        value: function _generateRules(element) {
          var rulesList = [];
          var rules;

          if (this.options.rules) {
            rules = this.options.rules;
          } else {
            rules = this.$element.data('interchange');
          }

          rules = typeof rules === 'string' ? rules.match(/\[.*?\]/g) : rules;

          for (var i in rules) {
            if (rules.hasOwnProperty(i)) {
              var rule = rules[i].slice(1, -1).split(', ');
              var path = rule.slice(0, -1).join('');
              var query = rule[rule.length - 1];

              if (Interchange.SPECIAL_QUERIES[query]) {
                query = Interchange.SPECIAL_QUERIES[query];
              }

              rulesList.push({
                path: path,
                query: query
              });
            }
          }

          this.rules = rulesList;
        }

        /**
         * Update the `src` property of an image, or change the HTML of a container, to the specified path.
         * @function
         * @param {String} path - Path to the image or HTML partial.
         * @fires Interchange#replaced
         */

      }, {
        key: 'replace',
        value: function replace(path) {
          if (this.currentPath === path) return;

          var _this = this,
              trigger = 'replaced.zf.interchange';

          // Replacing images
          if (this.$element[0].nodeName === 'IMG') {
            this.$element.attr('src', path).on('load', function () {
              _this.currentPath = path;
            }).trigger(trigger);
          }
          // Replacing background images
          else if (path.match(/\.(gif|jpg|jpeg|png|svg|tiff)([?#].*)?/i)) {
              path = path.replace(/\(/g, '%28').replace(/\)/g, '%29');
              this.$element.css({ 'background-image': 'url(' + path + ')' }).trigger(trigger);
            }
            // Replacing HTML
            else {
                __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.get(path, function (response) {
                  _this.$element.html(response).trigger(trigger);
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()(response).foundation();
                  _this.currentPath = path;
                });
              }

          /**
           * Fires when content in an Interchange element is done being loaded.
           * @event Interchange#replaced
           */
          // this.$element.trigger('replaced.zf.interchange');
        }

        /**
         * Destroys an instance of interchange.
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.$element.off('resizeme.zf.trigger');
        }
      }]);

      return Interchange;
    }(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["Plugin"]);

    /**
     * Default settings for plugin
     */

    Interchange.defaults = {
      /**
       * Rules to be applied to Interchange elements. Set with the `data-interchange` array notation.
       * @option
       * @type {?array}
       * @default null
       */
      rules: null
    };

    Interchange.SPECIAL_QUERIES = {
      'landscape': 'screen and (orientation: landscape)',
      'portrait': 'screen and (orientation: portrait)',
      'retina': 'only screen and (-webkit-min-device-pixel-ratio: 2), only screen and (min--moz-device-pixel-ratio: 2), only screen and (-o-min-device-pixel-ratio: 2/1), only screen and (min-device-pixel-ratio: 2), only screen and (min-resolution: 192dpi), only screen and (min-resolution: 2dppx)'
    };

    /***/
  },

  /***/6:
  /***/function (module, exports) {

    module.exports = { MediaQuery: window.Foundation.MediaQuery };

    /***/
  },

  /***/86:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(20);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 98);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/32:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_toggler__ = __webpack_require__(62);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_toggler__["a" /* Toggler */], 'Toggler');

    /***/
  },

  /***/4:
  /***/function (module, exports) {

    module.exports = { Motion: window.Foundation.Motion, Move: window.Foundation.Move };

    /***/
  },

  /***/62:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Toggler;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__ = __webpack_require__(7);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Toggler module.
     * @module foundation.toggler
     * @requires foundation.util.motion
     * @requires foundation.util.triggers
     */

    var Toggler = function (_Plugin) {
      _inherits(Toggler, _Plugin);

      function Toggler() {
        _classCallCheck(this, Toggler);

        return _possibleConstructorReturn(this, (Toggler.__proto__ || Object.getPrototypeOf(Toggler)).apply(this, arguments));
      }

      _createClass(Toggler, [{
        key: '_setup',

        /**
         * Creates a new instance of Toggler.
         * @class
         * @name Toggler
         * @fires Toggler#init
         * @param {Object} element - jQuery object to add the trigger to.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Toggler.defaults, element.data(), options);
          this.className = '';
          this.className = 'Toggler'; // ie9 back compat

          // Triggers init is idempotent, just need to make sure it is initialized
          __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);

          this._init();
          this._events();
        }

        /**
         * Initializes the Toggler plugin by parsing the toggle class from data-toggler, or animation classes from data-animate.
         * @function
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          var input;
          // Parse animation classes if they were set
          if (this.options.animate) {
            input = this.options.animate.split(' ');

            this.animationIn = input[0];
            this.animationOut = input[1] || null;
          }
          // Otherwise, parse toggle class
          else {
              input = this.$element.data('toggler');
              // Allow for a . at the beginning of the string
              this.className = input[0] === '.' ? input.slice(1) : input;
            }

          // Add ARIA attributes to triggers
          var id = this.$element[0].id;
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-controls', id);
          // If the target is hidden, add aria-hidden
          this.$element.attr('aria-expanded', this.$element.is(':hidden') ? false : true);
        }

        /**
         * Initializes events for the toggle trigger.
         * @function
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          this.$element.off('toggle.zf.trigger').on('toggle.zf.trigger', this.toggle.bind(this));
        }

        /**
         * Toggles the target class on the target element. An event is fired from the original trigger depending on if the resultant state was "on" or "off".
         * @function
         * @fires Toggler#on
         * @fires Toggler#off
         */

      }, {
        key: 'toggle',
        value: function toggle() {
          this[this.options.animate ? '_toggleAnimate' : '_toggleClass']();
        }
      }, {
        key: '_toggleClass',
        value: function _toggleClass() {
          this.$element.toggleClass(this.className);

          var isOn = this.$element.hasClass(this.className);
          if (isOn) {
            /**
             * Fires if the target element has the class after a toggle.
             * @event Toggler#on
             */
            this.$element.trigger('on.zf.toggler');
          } else {
            /**
             * Fires if the target element does not have the class after a toggle.
             * @event Toggler#off
             */
            this.$element.trigger('off.zf.toggler');
          }

          this._updateARIA(isOn);
          this.$element.find('[data-mutate]').trigger('mutateme.zf.trigger');
        }
      }, {
        key: '_toggleAnimate',
        value: function _toggleAnimate() {
          var _this = this;

          if (this.$element.is(':hidden')) {
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateIn(this.$element, this.animationIn, function () {
              _this._updateARIA(true);
              this.trigger('on.zf.toggler');
              this.find('[data-mutate]').trigger('mutateme.zf.trigger');
            });
          } else {
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(this.$element, this.animationOut, function () {
              _this._updateARIA(false);
              this.trigger('off.zf.toggler');
              this.find('[data-mutate]').trigger('mutateme.zf.trigger');
            });
          }
        }
      }, {
        key: '_updateARIA',
        value: function _updateARIA(isOn) {
          this.$element.attr('aria-expanded', isOn ? true : false);
        }

        /**
         * Destroys the instance of Toggler on the element.
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.$element.off('.zf.toggler');
        }
      }]);

      return Toggler;
    }(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["Plugin"]);

    Toggler.defaults = {
      /**
       * Tells the plugin if the element should animated when toggled.
       * @option
       * @type {boolean}
       * @default false
       */
      animate: false
    };

    /***/
  },

  /***/7:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Triggers;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);

    var MutationObserver = function () {
      var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
      for (var i = 0; i < prefixes.length; i++) {
        if (prefixes[i] + 'MutationObserver' in window) {
          return window[prefixes[i] + 'MutationObserver'];
        }
      }
      return false;
    }();

    var triggers = function (el, type) {
      el.data(type).split(' ').forEach(function (id) {
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
      });
    };

    var Triggers = {
      Listeners: {
        Basic: {},
        Global: {}
      },
      Initializers: {}
    };

    Triggers.Listeners.Basic = {
      openListener: function () {
        triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'open');
      },
      closeListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'close');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');
        }
      },
      toggleListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'toggle');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');
        }
      },
      closeableListener: function (e) {
        e.stopPropagation();
        var animation = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');

        if (animation !== '') {
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), animation, function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');
          });
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');
        }
      },
      toggleFocusListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id).triggerHandler('toggle.zf.trigger', [__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);
      }
    };

    // Elements with [data-open] will reveal a plugin that supports it when clicked.
    Triggers.Initializers.addOpenListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);
      $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);
    };

    // Elements with [data-close] will close a plugin that supports it when clicked.
    // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
    Triggers.Initializers.addCloseListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);
      $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);
    };

    // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
    Triggers.Initializers.addToggleListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);
      $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);
    };

    // Elements with [data-closable] will respond to close.zf.trigger events.
    Triggers.Initializers.addCloseableListener = function ($elem) {
      $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);
      $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);
    };

    // Elements with [data-toggle-focus] will respond to coming in and out of focus
    Triggers.Initializers.addToggleFocusListener = function ($elem) {
      $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);
      $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
    };

    // More Global/complex listeners and triggers
    Triggers.Listeners.Global = {
      resizeListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a resize event
        $nodes.attr('data-events', "resize");
      },
      scrollListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a scroll event
        $nodes.attr('data-events', "scroll");
      },
      closeMeListener: function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);
          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      }
    };

    // Global, parses whole document.
    Triggers.Initializers.addClosemeListener = function (pluginName) {
      var yetiBoxes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),
          plugNames = ['dropdown', 'tooltip', 'reveal'];

      if (pluginName) {
        if (typeof pluginName === 'string') {
          plugNames.push(pluginName);
        } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
          plugNames.concat(pluginName);
        } else {
          console.error('Plugin names must be strings');
        }
      }
      if (yetiBoxes.length) {
        var listeners = plugNames.map(function (name) {
          return 'closeme.zf.' + name;
        }).join(' ');

        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
      }
    };

    function debounceGlobalListener(debounce, trigger, listener) {
      var timer = void 0,
          args = Array.prototype.slice.call(arguments, 3);
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger, function (e) {
        if (timer) {
          clearTimeout(timer);
        }
        timer = setTimeout(function () {
          listener.apply(null, args);
        }, debounce || 10); //default time to emit scroll event
      });
    }

    Triggers.Initializers.addResizeListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);
      }
    };

    Triggers.Initializers.addScrollListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);
      }
    };

    Triggers.Initializers.addMutationEventsListener = function ($elem) {
      if (!MutationObserver) {
        return false;
      }
      var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]');

      //element callback
      var listeningElementsMutation = function (mutationRecordsList) {
        var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);

        //trigger the event handler for the element depending on type
        switch (mutationRecordsList[0].type) {
          case "attributes":
            if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
            }
            if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('resizeme.zf.trigger', [$target]);
            }
            if (mutationRecordsList[0].attributeName === "style") {
              $target.closest("[data-mutate]").attr("data-events", "mutate");
              $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            }
            break;

          case "childList":
            $target.closest("[data-mutate]").attr("data-events", "mutate");
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            break;

          default:
            return false;
          //nothing
        }
      };

      if ($nodes.length) {
        //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
        for (var i = 0; i <= $nodes.length - 1; i++) {
          var elementObserver = new MutationObserver(listeningElementsMutation);
          elementObserver.observe($nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
        }
      }
    };

    Triggers.Initializers.addSimpleListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);

      Triggers.Initializers.addOpenListener($document);
      Triggers.Initializers.addCloseListener($document);
      Triggers.Initializers.addToggleListener($document);
      Triggers.Initializers.addCloseableListener($document);
      Triggers.Initializers.addToggleFocusListener($document);
    };

    Triggers.Initializers.addGlobalListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);
      Triggers.Initializers.addMutationEventsListener($document);
      Triggers.Initializers.addResizeListener();
      Triggers.Initializers.addScrollListener();
      Triggers.Initializers.addClosemeListener();
    };

    Triggers.init = function ($, Foundation) {
      if (typeof $.triggersInitialized === 'undefined') {
        var $document = $(document);

        if (document.readyState === "complete") {
          Triggers.Initializers.addSimpleListeners();
          Triggers.Initializers.addGlobalListeners();
        } else {
          $(window).on('load', function () {
            Triggers.Initializers.addSimpleListeners();
            Triggers.Initializers.addGlobalListeners();
          });
        }

        $.triggersInitialized = true;
      }

      if (Foundation) {
        Foundation.Triggers = Triggers;
        // Legacy included to be backwards compatible for now.
        Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;
      }
    };

    /***/
  },

  /***/98:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(32);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
    // webpackBootstrap
    /******/ // The module cache
    /******/var installedModules = {};
    /******/
    /******/ // The require function
    /******/function __webpack_require__(moduleId) {
        /******/
        /******/ // Check if module is in cache
        /******/if (installedModules[moduleId]) {
            /******/return installedModules[moduleId].exports;
            /******/
        }
        /******/ // Create a new module (and put it into the cache)
        /******/var module = installedModules[moduleId] = {
            /******/i: moduleId,
            /******/l: false,
            /******/exports: {}
            /******/ };
        /******/
        /******/ // Execute the module function
        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
        /******/
        /******/ // Flag the module as loaded
        /******/module.l = true;
        /******/
        /******/ // Return the exports of the module
        /******/return module.exports;
        /******/
    }
    /******/
    /******/
    /******/ // expose the modules object (__webpack_modules__)
    /******/__webpack_require__.m = modules;
    /******/
    /******/ // expose the module cache
    /******/__webpack_require__.c = installedModules;
    /******/
    /******/ // identity function for calling harmony imports with the correct context
    /******/__webpack_require__.i = function (value) {
        return value;
    };
    /******/
    /******/ // define getter function for harmony exports
    /******/__webpack_require__.d = function (exports, name, getter) {
        /******/if (!__webpack_require__.o(exports, name)) {
            /******/Object.defineProperty(exports, name, {
                /******/configurable: false,
                /******/enumerable: true,
                /******/get: getter
                /******/ });
            /******/
        }
        /******/
    };
    /******/
    /******/ // getDefaultExport function for compatibility with non-harmony modules
    /******/__webpack_require__.n = function (module) {
        /******/var getter = module && module.__esModule ?
        /******/function getDefault() {
            return module['default'];
        } :
        /******/function getModuleExports() {
            return module;
        };
        /******/__webpack_require__.d(getter, 'a', getter);
        /******/return getter;
        /******/
    };
    /******/
    /******/ // Object.prototype.hasOwnProperty.call
    /******/__webpack_require__.o = function (object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
    };
    /******/
    /******/ // __webpack_public_path__
    /******/__webpack_require__.p = "";
    /******/
    /******/ // Load entry module and return exports
    /******/return __webpack_require__(__webpack_require__.s = 95);
    /******/
})(
/************************************************************************/
/******/{

    /***/0:
    /***/function (module, exports) {

        module.exports = jQuery;

        /***/
    },

    /***/1:
    /***/function (module, exports) {

        module.exports = { Foundation: window.Foundation };

        /***/
    },

    /***/2:
    /***/function (module, exports) {

        module.exports = { Plugin: window.Foundation.Plugin };

        /***/
    },

    /***/29:
    /***/function (module, __webpack_exports__, __webpack_require__) {

        "use strict";

        Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
        /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
        /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
        /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_smoothScroll__ = __webpack_require__(59);

        __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_smoothScroll__["a" /* SmoothScroll */], 'SmoothScroll');

        /***/
    },

    /***/3:
    /***/function (module, exports) {

        module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

        /***/
    },

    /***/59:
    /***/function (module, __webpack_exports__, __webpack_require__) {

        "use strict";
        /* harmony export (binding) */
        __webpack_require__.d(__webpack_exports__, "a", function () {
            return SmoothScroll;
        });
        /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
        /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
        /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(3);
        /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);
        /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2);
        /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__);

        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
                }
            }return function (Constructor, protoProps, staticProps) {
                if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
            };
        }();

        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError("Cannot call a class as a function");
            }
        }

        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
            }return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }

        function _inherits(subClass, superClass) {
            if (typeof superClass !== "function" && superClass !== null) {
                throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
            }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }

        /**
         * SmoothScroll module.
         * @module foundation.smooth-scroll
         */

        var SmoothScroll = function (_Plugin) {
            _inherits(SmoothScroll, _Plugin);

            function SmoothScroll() {
                _classCallCheck(this, SmoothScroll);

                return _possibleConstructorReturn(this, (SmoothScroll.__proto__ || Object.getPrototypeOf(SmoothScroll)).apply(this, arguments));
            }

            _createClass(SmoothScroll, [{
                key: '_setup',

                /**
                 * Creates a new instance of SmoothScroll.
                 * @class
                 * @name SmoothScroll
                 * @fires SmoothScroll#init
                 * @param {Object} element - jQuery object to add the trigger to.
                 * @param {Object} options - Overrides to the default plugin settings.
                 */
                value: function _setup(element, options) {
                    this.$element = element;
                    this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, SmoothScroll.defaults, this.$element.data(), options);
                    this.className = 'SmoothScroll'; // ie9 back compat

                    this._init();
                }

                /**
                 * Initialize the SmoothScroll plugin
                 * @private
                 */

            }, {
                key: '_init',
                value: function _init() {
                    var id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["GetYoDigits"])(6, 'smooth-scroll');
                    var _this = this;
                    this.$element.attr({
                        'id': id
                    });

                    this._events();
                }

                /**
                 * Initializes events for SmoothScroll.
                 * @private
                 */

            }, {
                key: '_events',
                value: function _events() {
                    var _this = this;

                    // click handler function.
                    var handleLinkClick = function (e) {
                        // exit function if the event source isn't coming from an anchor with href attribute starts with '#'
                        if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is('a[href^="#"]')) {
                            return false;
                        }

                        var arrival = this.getAttribute('href');

                        _this._inTransition = true;

                        SmoothScroll.scrollToLoc(arrival, _this.options, function () {
                            _this._inTransition = false;
                        });

                        e.preventDefault();
                    };

                    this.$element.on('click.zf.smoothScroll', handleLinkClick);
                    this.$element.on('click.zf.smoothScroll', 'a[href^="#"]', handleLinkClick);
                }

                /**
                 * Function to scroll to a given location on the page.
                 * @param {String} loc - A properly formatted jQuery id selector. Example: '#foo'
                 * @param {Object} options - The options to use.
                 * @param {Function} callback - The callback function.
                 * @static
                 * @function
                 */

            }], [{
                key: 'scrollToLoc',
                value: function scrollToLoc(loc) {
                    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SmoothScroll.defaults;
                    var callback = arguments[2];

                    // Do nothing if target does not exist to prevent errors
                    if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(loc).length) {
                        return false;
                    }

                    var scrollPos = Math.round(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(loc).offset().top - options.threshold / 2 - options.offset);

                    __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').stop(true).animate({ scrollTop: scrollPos }, options.animationDuration, options.animationEasing, function () {
                        if (callback && typeof callback == "function") {
                            callback();
                        }
                    });
                }
            }]);

            return SmoothScroll;
        }(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["Plugin"]);

        /**
         * Default settings for plugin.
         */

        SmoothScroll.defaults = {
            /**
             * Amount of time, in ms, the animated scrolling should take between locations.
             * @option
             * @type {number}
             * @default 500
             */
            animationDuration: 500,
            /**
             * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
             * @option
             * @type {string}
             * @default 'linear'
             * @see {@link https://api.jquery.com/animate|Jquery animate}
             */
            animationEasing: 'linear',
            /**
             * Number of pixels to use as a marker for location changes.
             * @option
             * @type {number}
             * @default 50
             */
            threshold: 50,
            /**
             * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
             * @option
             * @type {number}
             * @default 0
             */
            offset: 0
        };

        /***/
    },

    /***/95:
    /***/function (module, exports, __webpack_require__) {

        module.exports = __webpack_require__(29);

        /***/
    }

    /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 96);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/30:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_sticky__ = __webpack_require__(60);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_sticky__["a" /* Sticky */], 'Sticky');

    /***/
  },

  /***/4:
  /***/function (module, exports) {

    module.exports = { Motion: window.Foundation.Motion, Move: window.Foundation.Move };

    /***/
  },

  /***/6:
  /***/function (module, exports) {

    module.exports = { MediaQuery: window.Foundation.MediaQuery };

    /***/
  },

  /***/60:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Sticky;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(6);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__ = __webpack_require__(7);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Sticky module.
     * @module foundation.sticky
     * @requires foundation.util.triggers
     * @requires foundation.util.mediaQuery
     */

    var Sticky = function (_Plugin) {
      _inherits(Sticky, _Plugin);

      function Sticky() {
        _classCallCheck(this, Sticky);

        return _possibleConstructorReturn(this, (Sticky.__proto__ || Object.getPrototypeOf(Sticky)).apply(this, arguments));
      }

      _createClass(Sticky, [{
        key: '_setup',

        /**
         * Creates a new instance of a sticky thing.
         * @class
         * @name Sticky
         * @param {jQuery} element - jQuery object to make sticky.
         * @param {Object} options - options object passed when creating the element programmatically.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Sticky.defaults, this.$element.data(), options);
          this.className = 'Sticky'; // ie9 back compat

          // Triggers init is idempotent, just need to make sure it is initialized
          __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);

          this._init();
        }

        /**
         * Initializes the sticky element by adding classes, getting/setting dimensions, breakpoints and attributes
         * @function
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"]._init();

          var $parent = this.$element.parent('[data-sticky-container]'),
              id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["GetYoDigits"])(6, 'sticky'),
              _this = this;

          if ($parent.length) {
            this.$container = $parent;
          } else {
            this.wasWrapped = true;
            this.$element.wrap(this.options.container);
            this.$container = this.$element.parent();
          }
          this.$container.addClass(this.options.containerClass);

          this.$element.addClass(this.options.stickyClass).attr({ 'data-resize': id, 'data-mutate': id });
          if (this.options.anchor !== '') {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + _this.options.anchor).attr({ 'data-mutate': id });
          }

          this.scrollCount = this.options.checkEvery;
          this.isStuck = false;
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load.zf.sticky', function () {
            //We calculate the container height to have correct values for anchor points offset calculation.
            _this.containerHeight = _this.$element.css("display") == "none" ? 0 : _this.$element[0].getBoundingClientRect().height;
            _this.$container.css('height', _this.containerHeight);
            _this.elemHeight = _this.containerHeight;
            if (_this.options.anchor !== '') {
              _this.$anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + _this.options.anchor);
            } else {
              _this._parsePoints();
            }

            _this._setSizes(function () {
              var scroll = window.pageYOffset;
              _this._calc(false, scroll);
              //Unstick the element will ensure that proper classes are set.
              if (!_this.isStuck) {
                _this._removeSticky(scroll >= _this.topPoint ? false : true);
              }
            });
            _this._events(id.split('-').reverse().join('-'));
          });
        }

        /**
         * If using multiple elements as anchors, calculates the top and bottom pixel values the sticky thing should stick and unstick on.
         * @function
         * @private
         */

      }, {
        key: '_parsePoints',
        value: function _parsePoints() {
          var top = this.options.topAnchor == "" ? 1 : this.options.topAnchor,
              btm = this.options.btmAnchor == "" ? document.documentElement.scrollHeight : this.options.btmAnchor,
              pts = [top, btm],
              breaks = {};
          for (var i = 0, len = pts.length; i < len && pts[i]; i++) {
            var pt;
            if (typeof pts[i] === 'number') {
              pt = pts[i];
            } else {
              var place = pts[i].split(':'),
                  anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + place[0]);

              pt = anchor.offset().top;
              if (place[1] && place[1].toLowerCase() === 'bottom') {
                pt += anchor[0].getBoundingClientRect().height;
              }
            }
            breaks[i] = pt;
          }

          this.points = breaks;
          return;
        }

        /**
         * Adds event handlers for the scrolling element.
         * @private
         * @param {String} id - pseudo-random id for unique scroll event listener.
         */

      }, {
        key: '_events',
        value: function _events(id) {
          var _this = this,
              scrollListener = this.scrollListener = 'scroll.zf.' + id;
          if (this.isOn) {
            return;
          }
          if (this.canStick) {
            this.isOn = true;
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(scrollListener).on(scrollListener, function (e) {
              if (_this.scrollCount === 0) {
                _this.scrollCount = _this.options.checkEvery;
                _this._setSizes(function () {
                  _this._calc(false, window.pageYOffset);
                });
              } else {
                _this.scrollCount--;
                _this._calc(false, window.pageYOffset);
              }
            });
          }

          this.$element.off('resizeme.zf.trigger').on('resizeme.zf.trigger', function (e, el) {
            _this._eventsHandler(id);
          });

          this.$element.on('mutateme.zf.trigger', function (e, el) {
            _this._eventsHandler(id);
          });

          if (this.$anchor) {
            this.$anchor.on('mutateme.zf.trigger', function (e, el) {
              _this._eventsHandler(id);
            });
          }
        }

        /**
         * Handler for events.
         * @private
         * @param {String} id - pseudo-random id for unique scroll event listener.
         */

      }, {
        key: '_eventsHandler',
        value: function _eventsHandler(id) {
          var _this = this,
              scrollListener = this.scrollListener = 'scroll.zf.' + id;

          _this._setSizes(function () {
            _this._calc(false);
            if (_this.canStick) {
              if (!_this.isOn) {
                _this._events(id);
              }
            } else if (_this.isOn) {
              _this._pauseListeners(scrollListener);
            }
          });
        }

        /**
         * Removes event handlers for scroll and change events on anchor.
         * @fires Sticky#pause
         * @param {String} scrollListener - unique, namespaced scroll listener attached to `window`
         */

      }, {
        key: '_pauseListeners',
        value: function _pauseListeners(scrollListener) {
          this.isOn = false;
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(scrollListener);

          /**
           * Fires when the plugin is paused due to resize event shrinking the view.
           * @event Sticky#pause
           * @private
           */
          this.$element.trigger('pause.zf.sticky');
        }

        /**
         * Called on every `scroll` event and on `_init`
         * fires functions based on booleans and cached values
         * @param {Boolean} checkSizes - true if plugin should recalculate sizes and breakpoints.
         * @param {Number} scroll - current scroll position passed from scroll event cb function. If not passed, defaults to `window.pageYOffset`.
         */

      }, {
        key: '_calc',
        value: function _calc(checkSizes, scroll) {
          if (checkSizes) {
            this._setSizes();
          }

          if (!this.canStick) {
            if (this.isStuck) {
              this._removeSticky(true);
            }
            return false;
          }

          if (!scroll) {
            scroll = window.pageYOffset;
          }

          if (scroll >= this.topPoint) {
            if (scroll <= this.bottomPoint) {
              if (!this.isStuck) {
                this._setSticky();
              }
            } else {
              if (this.isStuck) {
                this._removeSticky(false);
              }
            }
          } else {
            if (this.isStuck) {
              this._removeSticky(true);
            }
          }
        }

        /**
         * Causes the $element to become stuck.
         * Adds `position: fixed;`, and helper classes.
         * @fires Sticky#stuckto
         * @function
         * @private
         */

      }, {
        key: '_setSticky',
        value: function _setSticky() {
          var _this = this,
              stickTo = this.options.stickTo,
              mrgn = stickTo === 'top' ? 'marginTop' : 'marginBottom',
              notStuckTo = stickTo === 'top' ? 'bottom' : 'top',
              css = {};

          css[mrgn] = this.options[mrgn] + 'em';
          css[stickTo] = 0;
          css[notStuckTo] = 'auto';
          this.isStuck = true;
          this.$element.removeClass('is-anchored is-at-' + notStuckTo).addClass('is-stuck is-at-' + stickTo).css(css)
          /**
           * Fires when the $element has become `position: fixed;`
           * Namespaced to `top` or `bottom`, e.g. `sticky.zf.stuckto:top`
           * @event Sticky#stuckto
           */
          .trigger('sticky.zf.stuckto:' + stickTo);
          this.$element.on("transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd", function () {
            _this._setSizes();
          });
        }

        /**
         * Causes the $element to become unstuck.
         * Removes `position: fixed;`, and helper classes.
         * Adds other helper classes.
         * @param {Boolean} isTop - tells the function if the $element should anchor to the top or bottom of its $anchor element.
         * @fires Sticky#unstuckfrom
         * @private
         */

      }, {
        key: '_removeSticky',
        value: function _removeSticky(isTop) {
          var stickTo = this.options.stickTo,
              stickToTop = stickTo === 'top',
              css = {},
              anchorPt = (this.points ? this.points[1] - this.points[0] : this.anchorHeight) - this.elemHeight,
              mrgn = stickToTop ? 'marginTop' : 'marginBottom',
              notStuckTo = stickToTop ? 'bottom' : 'top',
              topOrBottom = isTop ? 'top' : 'bottom';

          css[mrgn] = 0;

          css['bottom'] = 'auto';
          if (isTop) {
            css['top'] = 0;
          } else {
            css['top'] = anchorPt;
          }

          this.isStuck = false;
          this.$element.removeClass('is-stuck is-at-' + stickTo).addClass('is-anchored is-at-' + topOrBottom).css(css)
          /**
           * Fires when the $element has become anchored.
           * Namespaced to `top` or `bottom`, e.g. `sticky.zf.unstuckfrom:bottom`
           * @event Sticky#unstuckfrom
           */
          .trigger('sticky.zf.unstuckfrom:' + topOrBottom);
        }

        /**
         * Sets the $element and $container sizes for plugin.
         * Calls `_setBreakPoints`.
         * @param {Function} cb - optional callback function to fire on completion of `_setBreakPoints`.
         * @private
         */

      }, {
        key: '_setSizes',
        value: function _setSizes(cb) {
          this.canStick = __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"].is(this.options.stickyOn);
          if (!this.canStick) {
            if (cb && typeof cb === 'function') {
              cb();
            }
          }
          var _this = this,
              newElemWidth = this.$container[0].getBoundingClientRect().width,
              comp = window.getComputedStyle(this.$container[0]),
              pdngl = parseInt(comp['padding-left'], 10),
              pdngr = parseInt(comp['padding-right'], 10);

          if (this.$anchor && this.$anchor.length) {
            this.anchorHeight = this.$anchor[0].getBoundingClientRect().height;
          } else {
            this._parsePoints();
          }

          this.$element.css({
            'max-width': newElemWidth - pdngl - pdngr + 'px'
          });

          var newContainerHeight = this.$element[0].getBoundingClientRect().height || this.containerHeight;
          if (this.$element.css("display") == "none") {
            newContainerHeight = 0;
          }
          this.containerHeight = newContainerHeight;
          this.$container.css({
            height: newContainerHeight
          });
          this.elemHeight = newContainerHeight;

          if (!this.isStuck) {
            if (this.$element.hasClass('is-at-bottom')) {
              var anchorPt = (this.points ? this.points[1] - this.$container.offset().top : this.anchorHeight) - this.elemHeight;
              this.$element.css('top', anchorPt);
            }
          }

          this._setBreakPoints(newContainerHeight, function () {
            if (cb && typeof cb === 'function') {
              cb();
            }
          });
        }

        /**
         * Sets the upper and lower breakpoints for the element to become sticky/unsticky.
         * @param {Number} elemHeight - px value for sticky.$element height, calculated by `_setSizes`.
         * @param {Function} cb - optional callback function to be called on completion.
         * @private
         */

      }, {
        key: '_setBreakPoints',
        value: function _setBreakPoints(elemHeight, cb) {
          if (!this.canStick) {
            if (cb && typeof cb === 'function') {
              cb();
            } else {
              return false;
            }
          }
          var mTop = emCalc(this.options.marginTop),
              mBtm = emCalc(this.options.marginBottom),
              topPoint = this.points ? this.points[0] : this.$anchor.offset().top,
              bottomPoint = this.points ? this.points[1] : topPoint + this.anchorHeight,


          // topPoint = this.$anchor.offset().top || this.points[0],
          // bottomPoint = topPoint + this.anchorHeight || this.points[1],
          winHeight = window.innerHeight;

          if (this.options.stickTo === 'top') {
            topPoint -= mTop;
            bottomPoint -= elemHeight + mTop;
          } else if (this.options.stickTo === 'bottom') {
            topPoint -= winHeight - (elemHeight + mBtm);
            bottomPoint -= winHeight - mBtm;
          } else {
            //this would be the stickTo: both option... tricky
          }

          this.topPoint = topPoint;
          this.bottomPoint = bottomPoint;

          if (cb && typeof cb === 'function') {
            cb();
          }
        }

        /**
         * Destroys the current sticky element.
         * Resets the element to the top position first.
         * Removes event listeners, JS-added css properties and classes, and unwraps the $element if the JS added the $container.
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this._removeSticky(true);

          this.$element.removeClass(this.options.stickyClass + ' is-anchored is-at-top').css({
            height: '',
            top: '',
            bottom: '',
            'max-width': ''
          }).off('resizeme.zf.trigger').off('mutateme.zf.trigger');
          if (this.$anchor && this.$anchor.length) {
            this.$anchor.off('change.zf.sticky');
          }
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(this.scrollListener);

          if (this.wasWrapped) {
            this.$element.unwrap();
          } else {
            this.$container.removeClass(this.options.containerClass).css({
              height: ''
            });
          }
        }
      }]);

      return Sticky;
    }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);

    Sticky.defaults = {
      /**
       * Customizable container template. Add your own classes for styling and sizing.
       * @option
       * @type {string}
       * @default '&lt;div data-sticky-container&gt;&lt;/div&gt;'
       */
      container: '<div data-sticky-container></div>',
      /**
       * Location in the view the element sticks to. Can be `'top'` or `'bottom'`.
       * @option
       * @type {string}
       * @default 'top'
       */
      stickTo: 'top',
      /**
       * If anchored to a single element, the id of that element.
       * @option
       * @type {string}
       * @default ''
       */
      anchor: '',
      /**
       * If using more than one element as anchor points, the id of the top anchor.
       * @option
       * @type {string}
       * @default ''
       */
      topAnchor: '',
      /**
       * If using more than one element as anchor points, the id of the bottom anchor.
       * @option
       * @type {string}
       * @default ''
       */
      btmAnchor: '',
      /**
       * Margin, in `em`'s to apply to the top of the element when it becomes sticky.
       * @option
       * @type {number}
       * @default 1
       */
      marginTop: 1,
      /**
       * Margin, in `em`'s to apply to the bottom of the element when it becomes sticky.
       * @option
       * @type {number}
       * @default 1
       */
      marginBottom: 1,
      /**
       * Breakpoint string that is the minimum screen size an element should become sticky.
       * @option
       * @type {string}
       * @default 'medium'
       */
      stickyOn: 'medium',
      /**
       * Class applied to sticky element, and removed on destruction. Foundation defaults to `sticky`.
       * @option
       * @type {string}
       * @default 'sticky'
       */
      stickyClass: 'sticky',
      /**
       * Class applied to sticky container. Foundation defaults to `sticky-container`.
       * @option
       * @type {string}
       * @default 'sticky-container'
       */
      containerClass: 'sticky-container',
      /**
       * Number of scroll events between the plugin's recalculating sticky points. Setting it to `0` will cause it to recalc every scroll event, setting it to `-1` will prevent recalc on scroll.
       * @option
       * @type {number}
       * @default -1
       */
      checkEvery: -1
    };

    /**
     * Helper function to calculate em values
     * @param Number {em} - number of em's to calculate into pixels
     */
    function emCalc(em) {
      return parseInt(window.getComputedStyle(document.body, null).fontSize, 10) * em;
    }

    /***/
  },

  /***/7:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Triggers;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);

    var MutationObserver = function () {
      var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
      for (var i = 0; i < prefixes.length; i++) {
        if (prefixes[i] + 'MutationObserver' in window) {
          return window[prefixes[i] + 'MutationObserver'];
        }
      }
      return false;
    }();

    var triggers = function (el, type) {
      el.data(type).split(' ').forEach(function (id) {
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
      });
    };

    var Triggers = {
      Listeners: {
        Basic: {},
        Global: {}
      },
      Initializers: {}
    };

    Triggers.Listeners.Basic = {
      openListener: function () {
        triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'open');
      },
      closeListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'close');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');
        }
      },
      toggleListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'toggle');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');
        }
      },
      closeableListener: function (e) {
        e.stopPropagation();
        var animation = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');

        if (animation !== '') {
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), animation, function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');
          });
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');
        }
      },
      toggleFocusListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id).triggerHandler('toggle.zf.trigger', [__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);
      }
    };

    // Elements with [data-open] will reveal a plugin that supports it when clicked.
    Triggers.Initializers.addOpenListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);
      $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);
    };

    // Elements with [data-close] will close a plugin that supports it when clicked.
    // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
    Triggers.Initializers.addCloseListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);
      $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);
    };

    // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
    Triggers.Initializers.addToggleListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);
      $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);
    };

    // Elements with [data-closable] will respond to close.zf.trigger events.
    Triggers.Initializers.addCloseableListener = function ($elem) {
      $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);
      $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);
    };

    // Elements with [data-toggle-focus] will respond to coming in and out of focus
    Triggers.Initializers.addToggleFocusListener = function ($elem) {
      $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);
      $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
    };

    // More Global/complex listeners and triggers
    Triggers.Listeners.Global = {
      resizeListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a resize event
        $nodes.attr('data-events', "resize");
      },
      scrollListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a scroll event
        $nodes.attr('data-events', "scroll");
      },
      closeMeListener: function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);
          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      }
    };

    // Global, parses whole document.
    Triggers.Initializers.addClosemeListener = function (pluginName) {
      var yetiBoxes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),
          plugNames = ['dropdown', 'tooltip', 'reveal'];

      if (pluginName) {
        if (typeof pluginName === 'string') {
          plugNames.push(pluginName);
        } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
          plugNames.concat(pluginName);
        } else {
          console.error('Plugin names must be strings');
        }
      }
      if (yetiBoxes.length) {
        var listeners = plugNames.map(function (name) {
          return 'closeme.zf.' + name;
        }).join(' ');

        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
      }
    };

    function debounceGlobalListener(debounce, trigger, listener) {
      var timer = void 0,
          args = Array.prototype.slice.call(arguments, 3);
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger, function (e) {
        if (timer) {
          clearTimeout(timer);
        }
        timer = setTimeout(function () {
          listener.apply(null, args);
        }, debounce || 10); //default time to emit scroll event
      });
    }

    Triggers.Initializers.addResizeListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);
      }
    };

    Triggers.Initializers.addScrollListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);
      }
    };

    Triggers.Initializers.addMutationEventsListener = function ($elem) {
      if (!MutationObserver) {
        return false;
      }
      var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]');

      //element callback
      var listeningElementsMutation = function (mutationRecordsList) {
        var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);

        //trigger the event handler for the element depending on type
        switch (mutationRecordsList[0].type) {
          case "attributes":
            if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
            }
            if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('resizeme.zf.trigger', [$target]);
            }
            if (mutationRecordsList[0].attributeName === "style") {
              $target.closest("[data-mutate]").attr("data-events", "mutate");
              $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            }
            break;

          case "childList":
            $target.closest("[data-mutate]").attr("data-events", "mutate");
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            break;

          default:
            return false;
          //nothing
        }
      };

      if ($nodes.length) {
        //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
        for (var i = 0; i <= $nodes.length - 1; i++) {
          var elementObserver = new MutationObserver(listeningElementsMutation);
          elementObserver.observe($nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
        }
      }
    };

    Triggers.Initializers.addSimpleListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);

      Triggers.Initializers.addOpenListener($document);
      Triggers.Initializers.addCloseListener($document);
      Triggers.Initializers.addToggleListener($document);
      Triggers.Initializers.addCloseableListener($document);
      Triggers.Initializers.addToggleFocusListener($document);
    };

    Triggers.Initializers.addGlobalListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);
      Triggers.Initializers.addMutationEventsListener($document);
      Triggers.Initializers.addResizeListener();
      Triggers.Initializers.addScrollListener();
      Triggers.Initializers.addClosemeListener();
    };

    Triggers.init = function ($, Foundation) {
      if (typeof $.triggersInitialized === 'undefined') {
        var $document = $(document);

        if (document.readyState === "complete") {
          Triggers.Initializers.addSimpleListeners();
          Triggers.Initializers.addGlobalListeners();
        } else {
          $(window).on('load', function () {
            Triggers.Initializers.addSimpleListeners();
            Triggers.Initializers.addGlobalListeners();
          });
        }

        $.triggersInitialized = true;
      }

      if (Foundation) {
        Foundation.Triggers = Triggers;
        // Legacy included to be backwards compatible for now.
        Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;
      }
    };

    /***/
  },

  /***/96:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(30);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 80);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/14:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_accordion__ = __webpack_require__(44);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_accordion__["a" /* Accordion */], 'Accordion');

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/44:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Accordion;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(5);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Accordion module.
     * @module foundation.accordion
     * @requires foundation.util.keyboard
     */

    var Accordion = function (_Plugin) {
      _inherits(Accordion, _Plugin);

      function Accordion() {
        _classCallCheck(this, Accordion);

        return _possibleConstructorReturn(this, (Accordion.__proto__ || Object.getPrototypeOf(Accordion)).apply(this, arguments));
      }

      _createClass(Accordion, [{
        key: '_setup',

        /**
         * Creates a new instance of an accordion.
         * @class
         * @name Accordion
         * @fires Accordion#init
         * @param {jQuery} element - jQuery object to make into an accordion.
         * @param {Object} options - a plain object with settings to override the default options.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Accordion.defaults, this.$element.data(), options);

          this.className = 'Accordion'; // ie9 back compat
          this._init();

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Accordion', {
            'ENTER': 'toggle',
            'SPACE': 'toggle',
            'ARROW_DOWN': 'next',
            'ARROW_UP': 'previous'
          });
        }

        /**
         * Initializes the accordion by animating the preset active pane(s).
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          var _this3 = this;

          this.$element.attr('role', 'tablist');
          this.$tabs = this.$element.children('[data-accordion-item]');

          this.$tabs.each(function (idx, el) {
            var $el = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el),
                $content = $el.children('[data-tab-content]'),
                id = $content[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["GetYoDigits"])(6, 'accordion'),
                linkId = el.id || id + '-label';

            $el.find('a:first').attr({
              'aria-controls': id,
              'role': 'tab',
              'id': linkId,
              'aria-expanded': false,
              'aria-selected': false
            });

            $content.attr({ 'role': 'tabpanel', 'aria-labelledby': linkId, 'aria-hidden': true, 'id': id });
          });
          var $initActive = this.$element.find('.is-active').children('[data-tab-content]');
          this.firstTimeInit = true;
          if ($initActive.length) {
            this.down($initActive, this.firstTimeInit);
            this.firstTimeInit = false;
          }

          this._checkDeepLink = function () {
            var anchor = window.location.hash;
            //need a hash and a relevant anchor in this tabset
            if (anchor.length) {
              var $link = _this3.$element.find('[href$="' + anchor + '"]'),
                  $anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor);

              if ($link.length && $anchor) {
                if (!$link.parent('[data-accordion-item]').hasClass('is-active')) {
                  _this3.down($anchor, _this3.firstTimeInit);
                  _this3.firstTimeInit = false;
                };

                //roll up a little to show the titles
                if (_this3.options.deepLinkSmudge) {
                  var _this = _this3;
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).load(function () {
                    var offset = _this.$element.offset();
                    __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({ scrollTop: offset.top }, _this.options.deepLinkSmudgeDelay);
                  });
                }

                /**
                  * Fires when the zplugin has deeplinked at pageload
                  * @event Accordion#deeplink
                  */
                _this3.$element.trigger('deeplink.zf.accordion', [$link, $anchor]);
              }
            }
          };

          //use browser to open a tab, if it exists in this tabset
          if (this.options.deepLink) {
            this._checkDeepLink();
          }

          this._events();
        }

        /**
         * Adds event handlers for items within the accordion.
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this = this;

          this.$tabs.each(function () {
            var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);
            var $tabContent = $elem.children('[data-tab-content]');
            if ($tabContent.length) {
              $elem.children('a').off('click.zf.accordion keydown.zf.accordion').on('click.zf.accordion', function (e) {
                e.preventDefault();
                _this.toggle($tabContent);
              }).on('keydown.zf.accordion', function (e) {
                __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e, 'Accordion', {
                  toggle: function () {
                    _this.toggle($tabContent);
                  },
                  next: function () {
                    var $a = $elem.next().find('a').focus();
                    if (!_this.options.multiExpand) {
                      $a.trigger('click.zf.accordion');
                    }
                  },
                  previous: function () {
                    var $a = $elem.prev().find('a').focus();
                    if (!_this.options.multiExpand) {
                      $a.trigger('click.zf.accordion');
                    }
                  },
                  handled: function () {
                    e.preventDefault();
                    e.stopPropagation();
                  }
                });
              });
            }
          });
          if (this.options.deepLink) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate', this._checkDeepLink);
          }
        }

        /**
         * Toggles the selected content pane's open/close state.
         * @param {jQuery} $target - jQuery object of the pane to toggle (`.accordion-content`).
         * @function
         */

      }, {
        key: 'toggle',
        value: function toggle($target) {
          if ($target.closest('[data-accordion]').is('[disabled]')) {
            console.info('Cannot toggle an accordion that is disabled.');
            return;
          }
          if ($target.parent().hasClass('is-active')) {
            this.up($target);
          } else {
            this.down($target);
          }
          //either replace or update browser history
          if (this.options.deepLink) {
            var anchor = $target.prev('a').attr('href');

            if (this.options.updateHistory) {
              history.pushState({}, '', anchor);
            } else {
              history.replaceState({}, '', anchor);
            }
          }
        }

        /**
         * Opens the accordion tab defined by `$target`.
         * @param {jQuery} $target - Accordion pane to open (`.accordion-content`).
         * @param {Boolean} firstTime - flag to determine if reflow should happen.
         * @fires Accordion#down
         * @function
         */

      }, {
        key: 'down',
        value: function down($target, firstTime) {
          var _this4 = this;

          /**
           * checking firstTime allows for initial render of the accordion
           * to render preset is-active panes.
           */
          if ($target.closest('[data-accordion]').is('[disabled]') && !firstTime) {
            console.info('Cannot call down on an accordion that is disabled.');
            return;
          }
          $target.attr('aria-hidden', false).parent('[data-tab-content]').addBack().parent().addClass('is-active');

          if (!this.options.multiExpand && !firstTime) {
            var $currentActive = this.$element.children('.is-active').children('[data-tab-content]');
            if ($currentActive.length) {
              this.up($currentActive.not($target));
            }
          }

          $target.slideDown(this.options.slideSpeed, function () {
            /**
             * Fires when the tab is done opening.
             * @event Accordion#down
             */
            _this4.$element.trigger('down.zf.accordion', [$target]);
          });

          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + $target.attr('aria-labelledby')).attr({
            'aria-expanded': true,
            'aria-selected': true
          });
        }

        /**
         * Closes the tab defined by `$target`.
         * @param {jQuery} $target - Accordion tab to close (`.accordion-content`).
         * @fires Accordion#up
         * @function
         */

      }, {
        key: 'up',
        value: function up($target) {
          if ($target.closest('[data-accordion]').is('[disabled]')) {
            console.info('Cannot call up on an accordion that is disabled.');
            return;
          }

          var $aunts = $target.parent().siblings(),
              _this = this;

          if (!this.options.allowAllClosed && !$aunts.hasClass('is-active') || !$target.parent().hasClass('is-active')) {
            return;
          }

          $target.slideUp(_this.options.slideSpeed, function () {
            /**
             * Fires when the tab is done collapsing up.
             * @event Accordion#up
             */
            _this.$element.trigger('up.zf.accordion', [$target]);
          });

          $target.attr('aria-hidden', true).parent().removeClass('is-active');

          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + $target.attr('aria-labelledby')).attr({
            'aria-expanded': false,
            'aria-selected': false
          });
        }

        /**
         * Destroys an instance of an accordion.
         * @fires Accordion#destroyed
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.$element.find('[data-tab-content]').stop(true).slideUp(0).css('display', '');
          this.$element.find('a').off('.zf.accordion');
          if (this.options.deepLink) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate', this._checkDeepLink);
          }
        }
      }]);

      return Accordion;
    }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);

    Accordion.defaults = {
      /**
       * Amount of time to animate the opening of an accordion pane.
       * @option
       * @type {number}
       * @default 250
       */
      slideSpeed: 250,
      /**
       * Allow the accordion to have multiple open panes.
       * @option
       * @type {boolean}
       * @default false
       */
      multiExpand: false,
      /**
       * Allow the accordion to close all panes.
       * @option
       * @type {boolean}
       * @default false
       */
      allowAllClosed: false,
      /**
       * Allows the window to scroll to content of pane specified by hash anchor
       * @option
       * @type {boolean}
       * @default false
       */
      deepLink: false,

      /**
       * Adjust the deep link scroll to make sure the top of the accordion panel is visible
       * @option
       * @type {boolean}
       * @default false
       */
      deepLinkSmudge: false,

      /**
       * Animation time (ms) for the deep link adjustment
       * @option
       * @type {number}
       * @default 300
       */
      deepLinkSmudgeDelay: 300,

      /**
       * Update the browser history with the open accordion
       * @option
       * @type {boolean}
       * @default false
       */
      updateHistory: false
    };

    /***/
  },

  /***/5:
  /***/function (module, exports) {

    module.exports = { Keyboard: window.Foundation.Keyboard };

    /***/
  },

  /***/80:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(14);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 81);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/15:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_accordionMenu__ = __webpack_require__(45);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_accordionMenu__["a" /* AccordionMenu */], 'AccordionMenu');

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/45:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return AccordionMenu;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(5);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__ = __webpack_require__(9);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * AccordionMenu module.
     * @module foundation.accordionMenu
     * @requires foundation.util.keyboard
     * @requires foundation.util.nest
     */

    var AccordionMenu = function (_Plugin) {
      _inherits(AccordionMenu, _Plugin);

      function AccordionMenu() {
        _classCallCheck(this, AccordionMenu);

        return _possibleConstructorReturn(this, (AccordionMenu.__proto__ || Object.getPrototypeOf(AccordionMenu)).apply(this, arguments));
      }

      _createClass(AccordionMenu, [{
        key: '_setup',

        /**
         * Creates a new instance of an accordion menu.
         * @class
         * @name AccordionMenu
         * @fires AccordionMenu#init
         * @param {jQuery} element - jQuery object to make into an accordion menu.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, AccordionMenu.defaults, this.$element.data(), options);
          this.className = 'AccordionMenu'; // ie9 back compat

          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Feather(this.$element, 'accordion');

          this._init();

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('AccordionMenu', {
            'ENTER': 'toggle',
            'SPACE': 'toggle',
            'ARROW_RIGHT': 'open',
            'ARROW_UP': 'up',
            'ARROW_DOWN': 'down',
            'ARROW_LEFT': 'close',
            'ESCAPE': 'closeAll'
          });
        }

        /**
         * Initializes the accordion menu by hiding all nested menus.
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          var _this = this;

          this.$element.find('[data-submenu]').not('.is-active').slideUp(0); //.find('a').css('padding-left', '1rem');
          this.$element.attr({
            'role': 'tree',
            'aria-multiselectable': this.options.multiOpen
          });

          this.$menuLinks = this.$element.find('.is-accordion-submenu-parent');
          this.$menuLinks.each(function () {
            var linkId = this.id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6, 'acc-menu-link'),
                $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                $sub = $elem.children('[data-submenu]'),
                subId = $sub[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6, 'acc-menu'),
                isActive = $sub.hasClass('is-active');

            if (_this.options.submenuToggle) {
              $elem.addClass('has-submenu-toggle');
              $elem.children('a').after('<button id="' + linkId + '" class="submenu-toggle" aria-controls="' + subId + '" aria-expanded="' + isActive + '" title="' + _this.options.submenuToggleText + '"><span class="submenu-toggle-text">' + _this.options.submenuToggleText + '</span></button>');
            } else {
              $elem.attr({
                'aria-controls': subId,
                'aria-expanded': isActive,
                'id': linkId
              });
            }
            $sub.attr({
              'aria-labelledby': linkId,
              'aria-hidden': !isActive,
              'role': 'group',
              'id': subId
            });
          });
          this.$element.find('li').attr({
            'role': 'treeitem'
          });
          var initPanes = this.$element.find('.is-active');
          if (initPanes.length) {
            var _this = this;
            initPanes.each(function () {
              _this.down(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));
            });
          }
          this._events();
        }

        /**
         * Adds event handlers for items within the menu.
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this = this;

          this.$element.find('li').each(function () {
            var $submenu = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('[data-submenu]');

            if ($submenu.length) {
              if (_this.options.submenuToggle) {
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('.submenu-toggle').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
                  _this.toggle($submenu);
                });
              } else {
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('a').off('click.zf.accordionMenu').on('click.zf.accordionMenu', function (e) {
                  e.preventDefault();
                  _this.toggle($submenu);
                });
              }
            }
          }).on('keydown.zf.accordionmenu', function (e) {
            var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                $elements = $element.parent('ul').children('li'),
                $prevElement,
                $nextElement,
                $target = $element.children('[data-submenu]');

            $elements.each(function (i) {
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {
                $prevElement = $elements.eq(Math.max(0, i - 1)).find('a').first();
                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1)).find('a').first();

                if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('[data-submenu]:visible').length) {
                  // has open sub menu
                  $nextElement = $element.find('li:first-child').find('a').first();
                }
                if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':first-child')) {
                  // is first element of sub menu
                  $prevElement = $element.parents('li').first().find('a').first();
                } else if ($prevElement.parents('li').first().children('[data-submenu]:visible').length) {
                  // if previous element has open sub menu
                  $prevElement = $prevElement.parents('li').find('li:last-child').find('a').first();
                }
                if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is(':last-child')) {
                  // is last element of sub menu
                  $nextElement = $element.parents('li').first().next('li').find('a').first();
                }

                return;
              }
            });

            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e, 'AccordionMenu', {
              open: function () {
                if ($target.is(':hidden')) {
                  _this.down($target);
                  $target.find('li').first().find('a').first().focus();
                }
              },
              close: function () {
                if ($target.length && !$target.is(':hidden')) {
                  // close active sub of this item
                  _this.up($target);
                } else if ($element.parent('[data-submenu]').length) {
                  // close currently open sub
                  _this.up($element.parent('[data-submenu]'));
                  $element.parents('li').first().find('a').first().focus();
                }
              },
              up: function () {
                $prevElement.focus();
                return true;
              },
              down: function () {
                $nextElement.focus();
                return true;
              },
              toggle: function () {
                if (_this.options.submenuToggle) {
                  return false;
                }
                if ($element.children('[data-submenu]').length) {
                  _this.toggle($element.children('[data-submenu]'));
                  return true;
                }
              },
              closeAll: function () {
                _this.hideAll();
              },
              handled: function (preventDefault) {
                if (preventDefault) {
                  e.preventDefault();
                }
                e.stopImmediatePropagation();
              }
            });
          }); //.attr('tabindex', 0);
        }

        /**
         * Closes all panes of the menu.
         * @function
         */

      }, {
        key: 'hideAll',
        value: function hideAll() {
          this.up(this.$element.find('[data-submenu]'));
        }

        /**
         * Opens all panes of the menu.
         * @function
         */

      }, {
        key: 'showAll',
        value: function showAll() {
          this.down(this.$element.find('[data-submenu]'));
        }

        /**
         * Toggles the open/close state of a submenu.
         * @function
         * @param {jQuery} $target - the submenu to toggle
         */

      }, {
        key: 'toggle',
        value: function toggle($target) {
          if (!$target.is(':animated')) {
            if (!$target.is(':hidden')) {
              this.up($target);
            } else {
              this.down($target);
            }
          }
        }

        /**
         * Opens the sub-menu defined by `$target`.
         * @param {jQuery} $target - Sub-menu to open.
         * @fires AccordionMenu#down
         */

      }, {
        key: 'down',
        value: function down($target) {
          var _this = this;

          if (!this.options.multiOpen) {
            this.up(this.$element.find('.is-active').not($target.parentsUntil(this.$element).add($target)));
          }

          $target.addClass('is-active').attr({ 'aria-hidden': false });

          if (this.options.submenuToggle) {
            $target.prev('.submenu-toggle').attr({ 'aria-expanded': true });
          } else {
            $target.parent('.is-accordion-submenu-parent').attr({ 'aria-expanded': true });
          }

          $target.slideDown(_this.options.slideSpeed, function () {
            /**
             * Fires when the menu is done opening.
             * @event AccordionMenu#down
             */
            _this.$element.trigger('down.zf.accordionMenu', [$target]);
          });
        }

        /**
         * Closes the sub-menu defined by `$target`. All sub-menus inside the target will be closed as well.
         * @param {jQuery} $target - Sub-menu to close.
         * @fires AccordionMenu#up
         */

      }, {
        key: 'up',
        value: function up($target) {
          var _this = this;
          $target.slideUp(_this.options.slideSpeed, function () {
            /**
             * Fires when the menu is done collapsing up.
             * @event AccordionMenu#up
             */
            _this.$element.trigger('up.zf.accordionMenu', [$target]);
          });

          var $menus = $target.find('[data-submenu]').slideUp(0).addBack().attr('aria-hidden', true);

          if (this.options.submenuToggle) {
            $menus.prev('.submenu-toggle').attr('aria-expanded', false);
          } else {
            $menus.parent('.is-accordion-submenu-parent').attr('aria-expanded', false);
          }
        }

        /**
         * Destroys an instance of accordion menu.
         * @fires AccordionMenu#destroyed
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.$element.find('[data-submenu]').slideDown(0).css('display', '');
          this.$element.find('a').off('click.zf.accordionMenu');

          if (this.options.submenuToggle) {
            this.$element.find('.has-submenu-toggle').removeClass('has-submenu-toggle');
            this.$element.find('.submenu-toggle').remove();
          }

          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Burn(this.$element, 'accordion');
        }
      }]);

      return AccordionMenu;
    }(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["Plugin"]);

    AccordionMenu.defaults = {
      /**
       * Amount of time to animate the opening of a submenu in ms.
       * @option
       * @type {number}
       * @default 250
       */
      slideSpeed: 250,
      /**
       * Adds a separate submenu toggle button. This allows the parent item to have a link.
       * @option
       * @example true
       */
      submenuToggle: false,
      /**
       * The text used for the submenu toggle if enabled. This is used for screen readers only.
       * @option
       * @example true
       */
      submenuToggleText: 'Toggle menu',
      /**
       * Allow the menu to have multiple open panes.
       * @option
       * @type {boolean}
       * @default true
       */
      multiOpen: true
    };

    /***/
  },

  /***/5:
  /***/function (module, exports) {

    module.exports = { Keyboard: window.Foundation.Keyboard };

    /***/
  },

  /***/81:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(15);

    /***/
  },

  /***/9:
  /***/function (module, exports) {

    module.exports = { Nest: window.Foundation.Nest };

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 82);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/16:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_drilldown__ = __webpack_require__(46);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_drilldown__["a" /* Drilldown */], 'Drilldown');

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/46:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Drilldown;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(5);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__ = __webpack_require__(9);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_box__ = __webpack_require__(8);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_box___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_util_box__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Drilldown module.
     * @module foundation.drilldown
     * @requires foundation.util.keyboard
     * @requires foundation.util.nest
     * @requires foundation.util.box
     */

    var Drilldown = function (_Plugin) {
      _inherits(Drilldown, _Plugin);

      function Drilldown() {
        _classCallCheck(this, Drilldown);

        return _possibleConstructorReturn(this, (Drilldown.__proto__ || Object.getPrototypeOf(Drilldown)).apply(this, arguments));
      }

      _createClass(Drilldown, [{
        key: '_setup',

        /**
         * Creates a new instance of a drilldown menu.
         * @class
         * @name Drilldown
         * @param {jQuery} element - jQuery object to make into an accordion menu.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Drilldown.defaults, this.$element.data(), options);
          this.className = 'Drilldown'; // ie9 back compat

          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Feather(this.$element, 'drilldown');

          this._init();

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Drilldown', {
            'ENTER': 'open',
            'SPACE': 'open',
            'ARROW_RIGHT': 'next',
            'ARROW_UP': 'up',
            'ARROW_DOWN': 'down',
            'ARROW_LEFT': 'previous',
            'ESCAPE': 'close',
            'TAB': 'down',
            'SHIFT_TAB': 'up'
          });
        }

        /**
         * Initializes the drilldown by creating jQuery collections of elements
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          if (this.options.autoApplyClass) {
            this.$element.addClass('drilldown');
          }

          this.$element.attr({
            'role': 'tree',
            'aria-multiselectable': false
          });
          this.$submenuAnchors = this.$element.find('li.is-drilldown-submenu-parent').children('a');
          this.$submenus = this.$submenuAnchors.parent('li').children('[data-submenu]').attr('role', 'group');
          this.$menuItems = this.$element.find('li').not('.js-drilldown-back').attr('role', 'treeitem').find('a');
          this.$element.attr('data-mutate', this.$element.attr('data-drilldown') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6, 'drilldown'));

          this._prepareMenu();
          this._registerEvents();

          this._keyboardEvents();
        }

        /**
         * prepares drilldown menu by setting attributes to links and elements
         * sets a min height to prevent content jumping
         * wraps the element if not already wrapped
         * @private
         * @function
         */

      }, {
        key: '_prepareMenu',
        value: function _prepareMenu() {
          var _this = this;
          // if(!this.options.holdOpen){
          //   this._menuLinkEvents();
          // }
          this.$submenuAnchors.each(function () {
            var $link = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);
            var $sub = $link.parent();
            if (_this.options.parentLink) {
              $link.clone().prependTo($sub.children('[data-submenu]')).wrap('<li class="is-submenu-parent-item is-submenu-item is-drilldown-submenu-item" role="menu-item"></li>');
            }
            $link.data('savedHref', $link.attr('href')).removeAttr('href').attr('tabindex', 0);
            $link.children('[data-submenu]').attr({
              'aria-hidden': true,
              'tabindex': 0,
              'role': 'group'
            });
            _this._events($link);
          });
          this.$submenus.each(function () {
            var $menu = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                $back = $menu.find('.js-drilldown-back');
            if (!$back.length) {
              switch (_this.options.backButtonPosition) {
                case "bottom":
                  $menu.append(_this.options.backButton);
                  break;
                case "top":
                  $menu.prepend(_this.options.backButton);
                  break;
                default:
                  console.error("Unsupported backButtonPosition value '" + _this.options.backButtonPosition + "'");
              }
            }
            _this._back($menu);
          });

          this.$submenus.addClass('invisible');
          if (!this.options.autoHeight) {
            this.$submenus.addClass('drilldown-submenu-cover-previous');
          }

          // create a wrapper on element if it doesn't exist.
          if (!this.$element.parent().hasClass('is-drilldown')) {
            this.$wrapper = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.wrapper).addClass('is-drilldown');
            if (this.options.animateHeight) this.$wrapper.addClass('animate-height');
            this.$element.wrap(this.$wrapper);
          }
          // set wrapper
          this.$wrapper = this.$element.parent();
          this.$wrapper.css(this._getMaxDims());
        }
      }, {
        key: '_resize',
        value: function _resize() {
          this.$wrapper.css({ 'max-width': 'none', 'min-height': 'none' });
          // _getMaxDims has side effects (boo) but calling it should update all other necessary heights & widths
          this.$wrapper.css(this._getMaxDims());
        }

        /**
         * Adds event handlers to elements in the menu.
         * @function
         * @private
         * @param {jQuery} $elem - the current menu item to add handlers to.
         */

      }, {
        key: '_events',
        value: function _events($elem) {
          var _this = this;

          $elem.off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
            if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul', 'li').hasClass('is-drilldown-submenu-parent')) {
              e.stopImmediatePropagation();
              e.preventDefault();
            }

            // if(e.target !== e.currentTarget.firstElementChild){
            //   return false;
            // }
            _this._show($elem.parent('li'));

            if (_this.options.closeOnClick) {
              var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body');
              $body.off('.zf.drilldown').on('click.zf.drilldown', function (e) {
                if (e.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0], e.target)) {
                  return;
                }
                e.preventDefault();
                _this._hideAll();
                $body.off('.zf.drilldown');
              });
            }
          });
        }

        /**
         * Adds event handlers to the menu element.
         * @function
         * @private
         */

      }, {
        key: '_registerEvents',
        value: function _registerEvents() {
          if (this.options.scrollTop) {
            this._bindHandler = this._scrollTop.bind(this);
            this.$element.on('open.zf.drilldown hide.zf.drilldown closed.zf.drilldown', this._bindHandler);
          }
          this.$element.on('mutateme.zf.trigger', this._resize.bind(this));
        }

        /**
         * Scroll to Top of Element or data-scroll-top-element
         * @function
         * @fires Drilldown#scrollme
         */

      }, {
        key: '_scrollTop',
        value: function _scrollTop() {
          var _this = this;
          var $scrollTopElement = _this.options.scrollTopElement != '' ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()(_this.options.scrollTopElement) : _this.$element,
              scrollPos = parseInt($scrollTopElement.offset().top + _this.options.scrollTopOffset, 10);
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').stop(true).animate({ scrollTop: scrollPos }, _this.options.animationDuration, _this.options.animationEasing, function () {
            /**
              * Fires after the menu has scrolled
              * @event Drilldown#scrollme
              */
            if (this === __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html')[0]) _this.$element.trigger('scrollme.zf.drilldown');
          });
        }

        /**
         * Adds keydown event listener to `li`'s in the menu.
         * @private
         */

      }, {
        key: '_keyboardEvents',
        value: function _keyboardEvents() {
          var _this = this;

          this.$menuItems.add(this.$element.find('.js-drilldown-back > a, .is-submenu-parent-item > a')).on('keydown.zf.drilldown', function (e) {
            var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                $elements = $element.parent('li').parent('ul').children('li').children('a'),
                $prevElement,
                $nextElement;

            $elements.each(function (i) {
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {
                $prevElement = $elements.eq(Math.max(0, i - 1));
                $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
                return;
              }
            });

            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e, 'Drilldown', {
              next: function () {
                if ($element.is(_this.$submenuAnchors)) {
                  _this._show($element.parent('li'));
                  $element.parent('li').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($element), function () {
                    $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
                  });
                  return true;
                }
              },
              previous: function () {
                _this._hide($element.parent('li').parent('ul'));
                $element.parent('li').parent('ul').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($element), function () {
                  setTimeout(function () {
                    $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                  }, 1);
                });
                return true;
              },
              up: function () {
                $prevElement.focus();
                // Don't tap focus on first element in root ul
                return !$element.is(_this.$element.find('> li:first-child > a'));
              },
              down: function () {
                $nextElement.focus();
                // Don't tap focus on last element in root ul
                return !$element.is(_this.$element.find('> li:last-child > a'));
              },
              close: function () {
                // Don't close on element in root ul
                if (!$element.is(_this.$element.find('> li > a'))) {
                  _this._hide($element.parent().parent());
                  $element.parent().parent().siblings('a').focus();
                }
              },
              open: function () {
                if (!$element.is(_this.$menuItems)) {
                  // not menu item means back button
                  _this._hide($element.parent('li').parent('ul'));
                  $element.parent('li').parent('ul').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($element), function () {
                    setTimeout(function () {
                      $element.parent('li').parent('ul').parent('li').children('a').first().focus();
                    }, 1);
                  });
                  return true;
                } else if ($element.is(_this.$submenuAnchors)) {
                  _this._show($element.parent('li'));
                  $element.parent('li').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($element), function () {
                    $element.parent('li').find('ul li a').filter(_this.$menuItems).first().focus();
                  });
                  return true;
                }
              },
              handled: function (preventDefault) {
                if (preventDefault) {
                  e.preventDefault();
                }
                e.stopImmediatePropagation();
              }
            });
          }); // end keyboardAccess
        }

        /**
         * Closes all open elements, and returns to root menu.
         * @function
         * @fires Drilldown#closed
         */

      }, {
        key: '_hideAll',
        value: function _hideAll() {
          var $elem = this.$element.find('.is-drilldown-submenu.is-active').addClass('is-closing');
          if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });
          $elem.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($elem), function (e) {
            $elem.removeClass('is-active is-closing');
          });
          /**
           * Fires when the menu is fully closed.
           * @event Drilldown#closed
           */
          this.$element.trigger('closed.zf.drilldown');
        }

        /**
         * Adds event listener for each `back` button, and closes open menus.
         * @function
         * @fires Drilldown#back
         * @param {jQuery} $elem - the current sub-menu to add `back` event.
         */

      }, {
        key: '_back',
        value: function _back($elem) {
          var _this = this;
          $elem.off('click.zf.drilldown');
          $elem.children('.js-drilldown-back').on('click.zf.drilldown', function (e) {
            e.stopImmediatePropagation();
            // console.log('mouseup on back');
            _this._hide($elem);

            // If there is a parent submenu, call show
            var parentSubMenu = $elem.parent('li').parent('ul').parent('li');
            if (parentSubMenu.length) {
              _this._show(parentSubMenu);
            }
          });
        }

        /**
         * Adds event listener to menu items w/o submenus to close open menus on click.
         * @function
         * @private
         */

      }, {
        key: '_menuLinkEvents',
        value: function _menuLinkEvents() {
          var _this = this;
          this.$menuItems.not('.is-drilldown-submenu-parent').off('click.zf.drilldown').on('click.zf.drilldown', function (e) {
            // e.stopImmediatePropagation();
            setTimeout(function () {
              _this._hideAll();
            }, 0);
          });
        }

        /**
         * Opens a submenu.
         * @function
         * @fires Drilldown#open
         * @param {jQuery} $elem - the current element with a submenu to open, i.e. the `li` tag.
         */

      }, {
        key: '_show',
        value: function _show($elem) {
          if (this.options.autoHeight) this.$wrapper.css({ height: $elem.children('[data-submenu]').data('calcHeight') });
          $elem.attr('aria-expanded', true);
          $elem.children('[data-submenu]').addClass('is-active').removeClass('invisible').attr('aria-hidden', false);
          /**
           * Fires when the submenu has opened.
           * @event Drilldown#open
           */
          this.$element.trigger('open.zf.drilldown', [$elem]);
        }
      }, {
        key: '_hide',

        /**
         * Hides a submenu
         * @function
         * @fires Drilldown#hide
         * @param {jQuery} $elem - the current sub-menu to hide, i.e. the `ul` tag.
         */
        value: function _hide($elem) {
          if (this.options.autoHeight) this.$wrapper.css({ height: $elem.parent().closest('ul').data('calcHeight') });
          var _this = this;
          $elem.parent('li').attr('aria-expanded', false);
          $elem.attr('aria-hidden', true).addClass('is-closing');
          $elem.addClass('is-closing').one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])($elem), function () {
            $elem.removeClass('is-active is-closing');
            $elem.blur().addClass('invisible');
          });
          /**
           * Fires when the submenu has closed.
           * @event Drilldown#hide
           */
          $elem.trigger('hide.zf.drilldown', [$elem]);
        }

        /**
         * Iterates through the nested menus to calculate the min-height, and max-width for the menu.
         * Prevents content jumping.
         * @function
         * @private
         */

      }, {
        key: '_getMaxDims',
        value: function _getMaxDims() {
          var maxHeight = 0,
              result = {},
              _this = this;
          this.$submenus.add(this.$element).each(function () {
            var numOfElems = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).children('li').length;
            var height = __WEBPACK_IMPORTED_MODULE_4__foundation_util_box__["Box"].GetDimensions(this).height;
            maxHeight = height > maxHeight ? height : maxHeight;
            if (_this.options.autoHeight) {
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('calcHeight', height);
              if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).hasClass('is-drilldown-submenu')) result['height'] = height;
            }
          });

          if (!this.options.autoHeight) result['min-height'] = maxHeight + 'px';

          result['max-width'] = this.$element[0].getBoundingClientRect().width + 'px';

          return result;
        }

        /**
         * Destroys the Drilldown Menu
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          if (this.options.scrollTop) this.$element.off('.zf.drilldown', this._bindHandler);
          this._hideAll();
          this.$element.off('mutateme.zf.trigger');
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Burn(this.$element, 'drilldown');
          this.$element.unwrap().find('.js-drilldown-back, .is-submenu-parent-item').remove().end().find('.is-active, .is-closing, .is-drilldown-submenu').removeClass('is-active is-closing is-drilldown-submenu').end().find('[data-submenu]').removeAttr('aria-hidden tabindex role');
          this.$submenuAnchors.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).off('.zf.drilldown');
          });

          this.$submenus.removeClass('drilldown-submenu-cover-previous invisible');

          this.$element.find('a').each(function () {
            var $link = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);
            $link.removeAttr('tabindex');
            if ($link.data('savedHref')) {
              $link.attr('href', $link.data('savedHref')).removeData('savedHref');
            } else {
              return;
            }
          });
        }
      }]);

      return Drilldown;
    }(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__["Plugin"]);

    Drilldown.defaults = {
      /**
       * Drilldowns depend on styles in order to function properly; in the default build of Foundation these are
       * on the `drilldown` class. This option auto-applies this class to the drilldown upon initialization.
       * @option
       * @type {boolian}
       * @default true
       */
      autoApplyClass: true,
      /**
       * Markup used for JS generated back button. Prepended  or appended (see backButtonPosition) to submenu lists and deleted on `destroy` method, 'js-drilldown-back' class required. Remove the backslash (`\`) if copy and pasting.
       * @option
       * @type {string}
       * @default '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>'
       */
      backButton: '<li class="js-drilldown-back"><a tabindex="0">Back</a></li>',
      /**
       * Position the back button either at the top or bottom of drilldown submenus. Can be `'left'` or `'bottom'`.
       * @option
       * @type {string}
       * @default top
       */
      backButtonPosition: 'top',
      /**
       * Markup used to wrap drilldown menu. Use a class name for independent styling; the JS applied class: `is-drilldown` is required. Remove the backslash (`\`) if copy and pasting.
       * @option
       * @type {string}
       * @default '<div></div>'
       */
      wrapper: '<div></div>',
      /**
       * Adds the parent link to the submenu.
       * @option
       * @type {boolean}
       * @default false
       */
      parentLink: false,
      /**
       * Allow the menu to return to root list on body click.
       * @option
       * @type {boolean}
       * @default false
       */
      closeOnClick: false,
      /**
       * Allow the menu to auto adjust height.
       * @option
       * @type {boolean}
       * @default false
       */
      autoHeight: false,
      /**
       * Animate the auto adjust height.
       * @option
       * @type {boolean}
       * @default false
       */
      animateHeight: false,
      /**
       * Scroll to the top of the menu after opening a submenu or navigating back using the menu back button
       * @option
       * @type {boolean}
       * @default false
       */
      scrollTop: false,
      /**
       * String jquery selector (for example 'body') of element to take offset().top from, if empty string the drilldown menu offset().top is taken
       * @option
       * @type {string}
       * @default ''
       */
      scrollTopElement: '',
      /**
       * ScrollTop offset
       * @option
       * @type {number}
       * @default 0
       */
      scrollTopOffset: 0,
      /**
       * Scroll animation duration
       * @option
       * @type {number}
       * @default 500
       */
      animationDuration: 500,
      /**
       * Scroll animation easing. Can be `'swing'` or `'linear'`.
       * @option
       * @type {string}
       * @see {@link https://api.jquery.com/animate|JQuery animate}
       * @default 'swing'
       */
      animationEasing: 'swing'
      // holdOpen: false
    };

    /***/
  },

  /***/5:
  /***/function (module, exports) {

    module.exports = { Keyboard: window.Foundation.Keyboard };

    /***/
  },

  /***/8:
  /***/function (module, exports) {

    module.exports = { Box: window.Foundation.Box };

    /***/
  },

  /***/82:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(16);

    /***/
  },

  /***/9:
  /***/function (module, exports) {

    module.exports = { Nest: window.Foundation.Nest };

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 83);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/11:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Positionable;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__ = __webpack_require__(8);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_box___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var POSITIONS = ['left', 'right', 'top', 'bottom'];
    var VERTICAL_ALIGNMENTS = ['top', 'bottom', 'center'];
    var HORIZONTAL_ALIGNMENTS = ['left', 'right', 'center'];

    var ALIGNMENTS = {
      'left': VERTICAL_ALIGNMENTS,
      'right': VERTICAL_ALIGNMENTS,
      'top': HORIZONTAL_ALIGNMENTS,
      'bottom': HORIZONTAL_ALIGNMENTS
    };

    function nextItem(item, array) {
      var currentIdx = array.indexOf(item);
      if (currentIdx === array.length - 1) {
        return array[0];
      } else {
        return array[currentIdx + 1];
      }
    }

    var Positionable = function (_Plugin) {
      _inherits(Positionable, _Plugin);

      function Positionable() {
        _classCallCheck(this, Positionable);

        return _possibleConstructorReturn(this, (Positionable.__proto__ || Object.getPrototypeOf(Positionable)).apply(this, arguments));
      }

      _createClass(Positionable, [{
        key: '_init',

        /**
         * Abstract class encapsulating the tether-like explicit positioning logic
         * including repositioning based on overlap.
         * Expects classes to define defaults for vOffset, hOffset, position,
         * alignment, allowOverlap, and allowBottomOverlap. They can do this by
         * extending the defaults, or (for now recommended due to the way docs are
         * generated) by explicitly declaring them.
         *
         **/

        value: function _init() {
          this.triedPositions = {};
          this.position = this.options.position === 'auto' ? this._getDefaultPosition() : this.options.position;
          this.alignment = this.options.alignment === 'auto' ? this._getDefaultAlignment() : this.options.alignment;
        }
      }, {
        key: '_getDefaultPosition',
        value: function _getDefaultPosition() {
          return 'bottom';
        }
      }, {
        key: '_getDefaultAlignment',
        value: function _getDefaultAlignment() {
          switch (this.position) {
            case 'bottom':
            case 'top':
              return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["rtl"])() ? 'right' : 'left';
            case 'left':
            case 'right':
              return 'bottom';
          }
        }

        /**
         * Adjusts the positionable possible positions by iterating through alignments
         * and positions.
         * @function
         * @private
         */

      }, {
        key: '_reposition',
        value: function _reposition() {
          if (this._alignmentsExhausted(this.position)) {
            this.position = nextItem(this.position, POSITIONS);
            this.alignment = ALIGNMENTS[this.position][0];
          } else {
            this._realign();
          }
        }

        /**
         * Adjusts the dropdown pane possible positions by iterating through alignments
         * on the current position.
         * @function
         * @private
         */

      }, {
        key: '_realign',
        value: function _realign() {
          this._addTriedPosition(this.position, this.alignment);
          this.alignment = nextItem(this.alignment, ALIGNMENTS[this.position]);
        }
      }, {
        key: '_addTriedPosition',
        value: function _addTriedPosition(position, alignment) {
          this.triedPositions[position] = this.triedPositions[position] || [];
          this.triedPositions[position].push(alignment);
        }
      }, {
        key: '_positionsExhausted',
        value: function _positionsExhausted() {
          var isExhausted = true;
          for (var i = 0; i < POSITIONS.length; i++) {
            isExhausted = isExhausted && this._alignmentsExhausted(POSITIONS[i]);
          }
          return isExhausted;
        }
      }, {
        key: '_alignmentsExhausted',
        value: function _alignmentsExhausted(position) {
          return this.triedPositions[position] && this.triedPositions[position].length == ALIGNMENTS[position].length;
        }

        // When we're trying to center, we don't want to apply offset that's going to
        // take us just off center, so wrap around to return 0 for the appropriate
        // offset in those alignments.  TODO: Figure out if we want to make this
        // configurable behavior... it feels more intuitive, especially for tooltips, but
        // it's possible someone might actually want to start from center and then nudge
        // slightly off.

      }, {
        key: '_getVOffset',
        value: function _getVOffset() {
          return this.options.vOffset;
        }
      }, {
        key: '_getHOffset',
        value: function _getHOffset() {
          return this.options.hOffset;
        }
      }, {
        key: '_setPosition',
        value: function _setPosition($anchor, $element, $parent) {
          if ($anchor.attr('aria-expanded') === 'false') {
            return false;
          }
          var $eleDims = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetDimensions($element),
              $anchorDims = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetDimensions($anchor);

          $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));

          if (!this.options.allowOverlap) {
            var overlaps = {};
            var minOverlap = 100000000;
            // default coordinates to how we start, in case we can't figure out better
            var minCoordinates = { position: this.position, alignment: this.alignment };
            while (!this._positionsExhausted()) {
              var overlap = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].OverlapArea($element, $parent, false, false, this.options.allowBottomOverlap);
              if (overlap === 0) {
                return;
              }

              if (overlap < minOverlap) {
                minOverlap = overlap;
                minCoordinates = { position: this.position, alignment: this.alignment };
              }

              this._reposition();

              $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
            }
            // If we get through the entire loop, there was no non-overlapping
            // position available. Pick the version with least overlap.
            this.position = minCoordinates.position;
            this.alignment = minCoordinates.alignment;
            $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
          }
        }
      }]);

      return Positionable;
    }(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__["Plugin"]);

    Positionable.defaults = {
      /**
       * Position of positionable relative to anchor. Can be left, right, bottom, top, or auto.
       * @option
       * @type {string}
       * @default 'auto'
       */
      position: 'auto',
      /**
       * Alignment of positionable relative to anchor. Can be left, right, bottom, top, center, or auto.
       * @option
       * @type {string}
       * @default 'auto'
       */
      alignment: 'auto',
      /**
       * Allow overlap of container/window. If false, dropdown positionable first
       * try to position as defined by data-position and data-alignment, but
       * reposition if it would cause an overflow.
       * @option
       * @type {boolean}
       * @default false
       */
      allowOverlap: false,
      /**
       * Allow overlap of only the bottom of the container. This is the most common
       * behavior for dropdowns, allowing the dropdown to extend the bottom of the
       * screen but not otherwise influence or break out of the container.
       * @option
       * @type {boolean}
       * @default true
       */
      allowBottomOverlap: true,
      /**
       * Number of pixels the positionable should be separated vertically from anchor
       * @option
       * @type {number}
       * @default 0
       */
      vOffset: 0,
      /**
       * Number of pixels the positionable should be separated horizontally from anchor
       * @option
       * @type {number}
       * @default 0
       */
      hOffset: 0
    };

    /***/
  },

  /***/17:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_dropdown__ = __webpack_require__(47);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_dropdown__["a" /* Dropdown */], 'Dropdown');

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/4:
  /***/function (module, exports) {

    module.exports = { Motion: window.Foundation.Motion, Move: window.Foundation.Move };

    /***/
  },

  /***/47:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Dropdown;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(5);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_positionable__ = __webpack_require__(11);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__ = __webpack_require__(7);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    var _get = function get(object, property, receiver) {
      if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
          return undefined;
        } else {
          return get(parent, property, receiver);
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;if (getter === undefined) {
          return undefined;
        }return getter.call(receiver);
      }
    };

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Dropdown module.
     * @module foundation.dropdown
     * @requires foundation.util.keyboard
     * @requires foundation.util.box
     * @requires foundation.util.triggers
     */

    var Dropdown = function (_Positionable) {
      _inherits(Dropdown, _Positionable);

      function Dropdown() {
        _classCallCheck(this, Dropdown);

        return _possibleConstructorReturn(this, (Dropdown.__proto__ || Object.getPrototypeOf(Dropdown)).apply(this, arguments));
      }

      _createClass(Dropdown, [{
        key: '_setup',

        /**
         * Creates a new instance of a dropdown.
         * @class
         * @name Dropdown
         * @param {jQuery} element - jQuery object to make into a dropdown.
         *        Object should be of the dropdown panel, rather than its anchor.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Dropdown.defaults, this.$element.data(), options);
          this.className = 'Dropdown'; // ie9 back compat

          // Triggers init is idempotent, just need to make sure it is initialized
          __WEBPACK_IMPORTED_MODULE_4__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);

          this._init();

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Dropdown', {
            'ENTER': 'open',
            'SPACE': 'open',
            'ESCAPE': 'close'
          });
        }

        /**
         * Initializes the plugin by setting/checking options and attributes, adding helper variables, and saving the anchor.
         * @function
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          var $id = this.$element.attr('id');

          this.$anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle="' + $id + '"]').length ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle="' + $id + '"]') : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="' + $id + '"]');
          this.$anchor.attr({
            'aria-controls': $id,
            'data-is-focus': false,
            'data-yeti-box': $id,
            'aria-haspopup': true,
            'aria-expanded': false

          });

          if (this.options.parentClass) {
            this.$parent = this.$element.parents('.' + this.options.parentClass);
          } else {
            this.$parent = null;
          }

          this.$element.attr({
            'aria-hidden': 'true',
            'data-yeti-box': $id,
            'data-resize': $id,
            'aria-labelledby': this.$anchor[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["GetYoDigits"])(6, 'dd-anchor')
          });
          _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_init', this).call(this);
          this._events();
        }
      }, {
        key: '_getDefaultPosition',
        value: function _getDefaultPosition() {
          // handle legacy classnames
          var position = this.$element[0].className.match(/(top|left|right|bottom)/g);
          if (position) {
            return position[0];
          } else {
            return 'bottom';
          }
        }
      }, {
        key: '_getDefaultAlignment',
        value: function _getDefaultAlignment() {
          // handle legacy float approach
          var horizontalPosition = /float-(\S+)/.exec(this.$anchor[0].className);
          if (horizontalPosition) {
            return horizontalPosition[1];
          }

          return _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_getDefaultAlignment', this).call(this);
        }

        /**
         * Sets the position and orientation of the dropdown pane, checks for collisions if allow-overlap is not true.
         * Recursively calls itself if a collision is detected, with a new position class.
         * @function
         * @private
         */

      }, {
        key: '_setPosition',
        value: function _setPosition() {
          _get(Dropdown.prototype.__proto__ || Object.getPrototypeOf(Dropdown.prototype), '_setPosition', this).call(this, this.$anchor, this.$element, this.$parent);
        }

        /**
         * Adds event listeners to the element utilizing the triggers utility library.
         * @function
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this = this;
          this.$element.on({
            'open.zf.trigger': this.open.bind(this),
            'close.zf.trigger': this.close.bind(this),
            'toggle.zf.trigger': this.toggle.bind(this),
            'resizeme.zf.trigger': this._setPosition.bind(this)
          });

          if (this.options.hover) {
            this.$anchor.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
              var bodyData = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').data();
              if (typeof bodyData.whatinput === 'undefined' || bodyData.whatinput === 'mouse') {
                clearTimeout(_this.timeout);
                _this.timeout = setTimeout(function () {
                  _this.open();
                  _this.$anchor.data('hover', true);
                }, _this.options.hoverDelay);
              }
            }).on('mouseleave.zf.dropdown', function () {
              clearTimeout(_this.timeout);
              _this.timeout = setTimeout(function () {
                _this.close();
                _this.$anchor.data('hover', false);
              }, _this.options.hoverDelay);
            });
            if (this.options.hoverPane) {
              this.$element.off('mouseenter.zf.dropdown mouseleave.zf.dropdown').on('mouseenter.zf.dropdown', function () {
                clearTimeout(_this.timeout);
              }).on('mouseleave.zf.dropdown', function () {
                clearTimeout(_this.timeout);
                _this.timeout = setTimeout(function () {
                  _this.close();
                  _this.$anchor.data('hover', false);
                }, _this.options.hoverDelay);
              });
            }
          }
          this.$anchor.add(this.$element).on('keydown.zf.dropdown', function (e) {

            var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                visibleFocusableElements = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].findFocusable(_this.$element);

            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e, 'Dropdown', {
              open: function () {
                if ($target.is(_this.$anchor)) {
                  _this.open();
                  _this.$element.attr('tabindex', -1).focus();
                  e.preventDefault();
                }
              },
              close: function () {
                _this.close();
                _this.$anchor.focus();
              }
            });
          });
        }

        /**
         * Adds an event handler to the body to close any dropdowns on a click.
         * @function
         * @private
         */

      }, {
        key: '_addBodyHandler',
        value: function _addBodyHandler() {
          var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).not(this.$element),
              _this = this;
          $body.off('click.zf.dropdown').on('click.zf.dropdown', function (e) {
            if (_this.$anchor.is(e.target) || _this.$anchor.find(e.target).length) {
              return;
            }
            if (_this.$element.find(e.target).length) {
              return;
            }
            _this.close();
            $body.off('click.zf.dropdown');
          });
        }

        /**
         * Opens the dropdown pane, and fires a bubbling event to close other dropdowns.
         * @function
         * @fires Dropdown#closeme
         * @fires Dropdown#show
         */

      }, {
        key: 'open',
        value: function open() {
          // var _this = this;
          /**
           * Fires to close other open dropdowns, typically when dropdown is opening
           * @event Dropdown#closeme
           */
          this.$element.trigger('closeme.zf.dropdown', this.$element.attr('id'));
          this.$anchor.addClass('hover').attr({ 'aria-expanded': true });
          // this.$element/*.show()*/;

          this.$element.addClass('is-opening');
          this._setPosition();
          this.$element.removeClass('is-opening').addClass('is-open').attr({ 'aria-hidden': false });

          if (this.options.autoFocus) {
            var $focusable = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].findFocusable(this.$element);
            if ($focusable.length) {
              $focusable.eq(0).focus();
            }
          }

          if (this.options.closeOnClick) {
            this._addBodyHandler();
          }

          if (this.options.trapFocus) {
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].trapFocus(this.$element);
          }

          /**
           * Fires once the dropdown is visible.
           * @event Dropdown#show
           */
          this.$element.trigger('show.zf.dropdown', [this.$element]);
        }

        /**
         * Closes the open dropdown pane.
         * @function
         * @fires Dropdown#hide
         */

      }, {
        key: 'close',
        value: function close() {
          if (!this.$element.hasClass('is-open')) {
            return false;
          }
          this.$element.removeClass('is-open').attr({ 'aria-hidden': true });

          this.$anchor.removeClass('hover').attr('aria-expanded', false);

          /**
           * Fires once the dropdown is no longer visible.
           * @event Dropdown#hide
           */
          this.$element.trigger('hide.zf.dropdown', [this.$element]);

          if (this.options.trapFocus) {
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].releaseFocus(this.$element);
          }
        }

        /**
         * Toggles the dropdown pane's visibility.
         * @function
         */

      }, {
        key: 'toggle',
        value: function toggle() {
          if (this.$element.hasClass('is-open')) {
            if (this.$anchor.data('hover')) return;
            this.close();
          } else {
            this.open();
          }
        }

        /**
         * Destroys the dropdown.
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.$element.off('.zf.trigger').hide();
          this.$anchor.off('.zf.dropdown');
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).off('click.zf.dropdown');
        }
      }]);

      return Dropdown;
    }(__WEBPACK_IMPORTED_MODULE_3__foundation_positionable__["a" /* Positionable */]);

    Dropdown.defaults = {
      /**
       * Class that designates bounding container of Dropdown (default: window)
       * @option
       * @type {?string}
       * @default null
       */
      parentClass: null,
      /**
       * Amount of time to delay opening a submenu on hover event.
       * @option
       * @type {number}
       * @default 250
       */
      hoverDelay: 250,
      /**
       * Allow submenus to open on hover events
       * @option
       * @type {boolean}
       * @default false
       */
      hover: false,
      /**
       * Don't close dropdown when hovering over dropdown pane
       * @option
       * @type {boolean}
       * @default false
       */
      hoverPane: false,
      /**
       * Number of pixels between the dropdown pane and the triggering element on open.
       * @option
       * @type {number}
       * @default 0
       */
      vOffset: 0,
      /**
       * Number of pixels between the dropdown pane and the triggering element on open.
       * @option
       * @type {number}
       * @default 0
       */
      hOffset: 0,
      /**
       * DEPRECATED: Class applied to adjust open position.
       * @option
       * @type {string}
       * @default ''
       */
      positionClass: '',

      /**
       * Position of dropdown. Can be left, right, bottom, top, or auto.
       * @option
       * @type {string}
       * @default 'auto'
       */
      position: 'auto',
      /**
       * Alignment of dropdown relative to anchor. Can be left, right, bottom, top, center, or auto.
       * @option
       * @type {string}
       * @default 'auto'
       */
      alignment: 'auto',
      /**
       * Allow overlap of container/window. If false, dropdown will first try to position as defined by data-position and data-alignment, but reposition if it would cause an overflow.
       * @option
       * @type {boolean}
       * @default false
       */
      allowOverlap: false,
      /**
       * Allow overlap of only the bottom of the container. This is the most common
       * behavior for dropdowns, allowing the dropdown to extend the bottom of the
       * screen but not otherwise influence or break out of the container.
       * @option
       * @type {boolean}
       * @default true
       */
      allowBottomOverlap: true,
      /**
       * Allow the plugin to trap focus to the dropdown pane if opened with keyboard commands.
       * @option
       * @type {boolean}
       * @default false
       */
      trapFocus: false,
      /**
       * Allow the plugin to set focus to the first focusable element within the pane, regardless of method of opening.
       * @option
       * @type {boolean}
       * @default false
       */
      autoFocus: false,
      /**
       * Allows a click on the body to close the dropdown.
       * @option
       * @type {boolean}
       * @default false
       */
      closeOnClick: false
    };

    /***/
  },

  /***/5:
  /***/function (module, exports) {

    module.exports = { Keyboard: window.Foundation.Keyboard };

    /***/
  },

  /***/7:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Triggers;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);

    var MutationObserver = function () {
      var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
      for (var i = 0; i < prefixes.length; i++) {
        if (prefixes[i] + 'MutationObserver' in window) {
          return window[prefixes[i] + 'MutationObserver'];
        }
      }
      return false;
    }();

    var triggers = function (el, type) {
      el.data(type).split(' ').forEach(function (id) {
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
      });
    };

    var Triggers = {
      Listeners: {
        Basic: {},
        Global: {}
      },
      Initializers: {}
    };

    Triggers.Listeners.Basic = {
      openListener: function () {
        triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'open');
      },
      closeListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'close');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');
        }
      },
      toggleListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'toggle');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');
        }
      },
      closeableListener: function (e) {
        e.stopPropagation();
        var animation = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');

        if (animation !== '') {
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), animation, function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');
          });
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');
        }
      },
      toggleFocusListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id).triggerHandler('toggle.zf.trigger', [__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);
      }
    };

    // Elements with [data-open] will reveal a plugin that supports it when clicked.
    Triggers.Initializers.addOpenListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);
      $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);
    };

    // Elements with [data-close] will close a plugin that supports it when clicked.
    // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
    Triggers.Initializers.addCloseListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);
      $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);
    };

    // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
    Triggers.Initializers.addToggleListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);
      $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);
    };

    // Elements with [data-closable] will respond to close.zf.trigger events.
    Triggers.Initializers.addCloseableListener = function ($elem) {
      $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);
      $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);
    };

    // Elements with [data-toggle-focus] will respond to coming in and out of focus
    Triggers.Initializers.addToggleFocusListener = function ($elem) {
      $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);
      $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
    };

    // More Global/complex listeners and triggers
    Triggers.Listeners.Global = {
      resizeListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a resize event
        $nodes.attr('data-events', "resize");
      },
      scrollListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a scroll event
        $nodes.attr('data-events', "scroll");
      },
      closeMeListener: function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);
          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      }
    };

    // Global, parses whole document.
    Triggers.Initializers.addClosemeListener = function (pluginName) {
      var yetiBoxes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),
          plugNames = ['dropdown', 'tooltip', 'reveal'];

      if (pluginName) {
        if (typeof pluginName === 'string') {
          plugNames.push(pluginName);
        } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
          plugNames.concat(pluginName);
        } else {
          console.error('Plugin names must be strings');
        }
      }
      if (yetiBoxes.length) {
        var listeners = plugNames.map(function (name) {
          return 'closeme.zf.' + name;
        }).join(' ');

        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
      }
    };

    function debounceGlobalListener(debounce, trigger, listener) {
      var timer = void 0,
          args = Array.prototype.slice.call(arguments, 3);
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger, function (e) {
        if (timer) {
          clearTimeout(timer);
        }
        timer = setTimeout(function () {
          listener.apply(null, args);
        }, debounce || 10); //default time to emit scroll event
      });
    }

    Triggers.Initializers.addResizeListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);
      }
    };

    Triggers.Initializers.addScrollListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);
      }
    };

    Triggers.Initializers.addMutationEventsListener = function ($elem) {
      if (!MutationObserver) {
        return false;
      }
      var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]');

      //element callback
      var listeningElementsMutation = function (mutationRecordsList) {
        var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);

        //trigger the event handler for the element depending on type
        switch (mutationRecordsList[0].type) {
          case "attributes":
            if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
            }
            if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('resizeme.zf.trigger', [$target]);
            }
            if (mutationRecordsList[0].attributeName === "style") {
              $target.closest("[data-mutate]").attr("data-events", "mutate");
              $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            }
            break;

          case "childList":
            $target.closest("[data-mutate]").attr("data-events", "mutate");
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            break;

          default:
            return false;
          //nothing
        }
      };

      if ($nodes.length) {
        //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
        for (var i = 0; i <= $nodes.length - 1; i++) {
          var elementObserver = new MutationObserver(listeningElementsMutation);
          elementObserver.observe($nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
        }
      }
    };

    Triggers.Initializers.addSimpleListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);

      Triggers.Initializers.addOpenListener($document);
      Triggers.Initializers.addCloseListener($document);
      Triggers.Initializers.addToggleListener($document);
      Triggers.Initializers.addCloseableListener($document);
      Triggers.Initializers.addToggleFocusListener($document);
    };

    Triggers.Initializers.addGlobalListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);
      Triggers.Initializers.addMutationEventsListener($document);
      Triggers.Initializers.addResizeListener();
      Triggers.Initializers.addScrollListener();
      Triggers.Initializers.addClosemeListener();
    };

    Triggers.init = function ($, Foundation) {
      if (typeof $.triggersInitialized === 'undefined') {
        var $document = $(document);

        if (document.readyState === "complete") {
          Triggers.Initializers.addSimpleListeners();
          Triggers.Initializers.addGlobalListeners();
        } else {
          $(window).on('load', function () {
            Triggers.Initializers.addSimpleListeners();
            Triggers.Initializers.addGlobalListeners();
          });
        }

        $.triggersInitialized = true;
      }

      if (Foundation) {
        Foundation.Triggers = Triggers;
        // Legacy included to be backwards compatible for now.
        Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;
      }
    };

    /***/
  },

  /***/8:
  /***/function (module, exports) {

    module.exports = { Box: window.Foundation.Box };

    /***/
  },

  /***/83:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(17);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 84);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/18:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_dropdownMenu__ = __webpack_require__(48);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_dropdownMenu__["a" /* DropdownMenu */], 'DropdownMenu');

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/48:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return DropdownMenu;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(5);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__ = __webpack_require__(9);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__ = __webpack_require__(8);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_box___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_box__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * DropdownMenu module.
     * @module foundation.dropdown-menu
     * @requires foundation.util.keyboard
     * @requires foundation.util.box
     * @requires foundation.util.nest
     */

    var DropdownMenu = function (_Plugin) {
      _inherits(DropdownMenu, _Plugin);

      function DropdownMenu() {
        _classCallCheck(this, DropdownMenu);

        return _possibleConstructorReturn(this, (DropdownMenu.__proto__ || Object.getPrototypeOf(DropdownMenu)).apply(this, arguments));
      }

      _createClass(DropdownMenu, [{
        key: '_setup',

        /**
         * Creates a new instance of DropdownMenu.
         * @class
         * @name DropdownMenu
         * @fires DropdownMenu#init
         * @param {jQuery} element - jQuery object to make into a dropdown menu.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, DropdownMenu.defaults, this.$element.data(), options);
          this.className = 'DropdownMenu'; // ie9 back compat

          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Feather(this.$element, 'dropdown');
          this._init();

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('DropdownMenu', {
            'ENTER': 'open',
            'SPACE': 'open',
            'ARROW_RIGHT': 'next',
            'ARROW_UP': 'up',
            'ARROW_DOWN': 'down',
            'ARROW_LEFT': 'previous',
            'ESCAPE': 'close'
          });
        }

        /**
         * Initializes the plugin, and calls _prepareMenu
         * @private
         * @function
         */

      }, {
        key: '_init',
        value: function _init() {
          var subs = this.$element.find('li.is-dropdown-submenu-parent');
          this.$element.children('.is-dropdown-submenu-parent').children('.is-dropdown-submenu').addClass('first-sub');

          this.$menuItems = this.$element.find('[role="menuitem"]');
          this.$tabs = this.$element.children('[role="menuitem"]');
          this.$tabs.find('ul.is-dropdown-submenu').addClass(this.options.verticalClass);

          if (this.options.alignment === 'auto') {
            if (this.$element.hasClass(this.options.rightClass) || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__foundation_util_core__["rtl"])() || this.$element.parents('.top-bar-right').is('*')) {
              this.options.alignment = 'right';
              subs.addClass('opens-left');
            } else {
              this.options.alignment = 'left';
              subs.addClass('opens-right');
            }
          } else {
            if (this.options.alignment === 'right') {
              subs.addClass('opens-left');
            } else {
              subs.addClass('opens-right');
            }
          }
          this.changed = false;
          this._events();
        }
      }, {
        key: '_isVertical',
        value: function _isVertical() {
          return this.$tabs.css('display') === 'block' || this.$element.css('flex-direction') === 'column';
        }
      }, {
        key: '_isRtl',
        value: function _isRtl() {
          return this.$element.hasClass('align-right') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__foundation_util_core__["rtl"])() && !this.$element.hasClass('align-left');
        }

        /**
         * Adds event listeners to elements within the menu
         * @private
         * @function
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this = this,
              hasTouch = 'ontouchstart' in window || typeof window.ontouchstart !== 'undefined',
              parClass = 'is-dropdown-submenu-parent';

          // used for onClick and in the keyboard handlers
          var handleClickFn = function (e) {
            var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul', '.' + parClass),
                hasSub = $elem.hasClass(parClass),
                hasClicked = $elem.attr('data-is-click') === 'true',
                $sub = $elem.children('.is-dropdown-submenu');

            if (hasSub) {
              if (hasClicked) {
                if (!_this.options.closeOnClick || !_this.options.clickOpen && !hasTouch || _this.options.forceFollow && hasTouch) {
                  return;
                } else {
                  e.stopImmediatePropagation();
                  e.preventDefault();
                  _this._hide($elem);
                }
              } else {
                e.preventDefault();
                e.stopImmediatePropagation();
                _this._show($sub);
                $elem.add($elem.parentsUntil(_this.$element, '.' + parClass)).attr('data-is-click', true);
              }
            }
          };

          if (this.options.clickOpen || hasTouch) {
            this.$menuItems.on('click.zf.dropdownmenu touchstart.zf.dropdownmenu', handleClickFn);
          }

          // Handle Leaf element Clicks
          if (_this.options.closeOnClickInside) {
            this.$menuItems.on('click.zf.dropdownmenu', function (e) {
              var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                  hasSub = $elem.hasClass(parClass);
              if (!hasSub) {
                _this._hide();
              }
            });
          }

          if (!this.options.disableHover) {
            this.$menuItems.on('mouseenter.zf.dropdownmenu', function (e) {
              var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                  hasSub = $elem.hasClass(parClass);

              if (hasSub) {
                clearTimeout($elem.data('_delay'));
                $elem.data('_delay', setTimeout(function () {
                  _this._show($elem.children('.is-dropdown-submenu'));
                }, _this.options.hoverDelay));
              }
            }).on('mouseleave.zf.dropdownmenu', function (e) {
              var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                  hasSub = $elem.hasClass(parClass);
              if (hasSub && _this.options.autoclose) {
                if ($elem.attr('data-is-click') === 'true' && _this.options.clickOpen) {
                  return false;
                }

                clearTimeout($elem.data('_delay'));
                $elem.data('_delay', setTimeout(function () {
                  _this._hide($elem);
                }, _this.options.closingTime));
              }
            });
          }
          this.$menuItems.on('keydown.zf.dropdownmenu', function (e) {
            var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).parentsUntil('ul', '[role="menuitem"]'),
                isTab = _this.$tabs.index($element) > -1,
                $elements = isTab ? _this.$tabs : $element.siblings('li').add($element),
                $prevElement,
                $nextElement;

            $elements.each(function (i) {
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {
                $prevElement = $elements.eq(i - 1);
                $nextElement = $elements.eq(i + 1);
                return;
              }
            });

            var nextSibling = function () {
              if (!$element.is(':last-child')) {
                $nextElement.children('a:first').focus();
                e.preventDefault();
              }
            },
                prevSibling = function () {
              $prevElement.children('a:first').focus();
              e.preventDefault();
            },
                openSub = function () {
              var $sub = $element.children('ul.is-dropdown-submenu');
              if ($sub.length) {
                _this._show($sub);
                $element.find('li > a:first').focus();
                e.preventDefault();
              } else {
                return;
              }
            },
                closeSub = function () {
              //if ($element.is(':first-child')) {
              var close = $element.parent('ul').parent('li');
              close.children('a:first').focus();
              _this._hide(close);
              e.preventDefault();
              //}
            };
            var functions = {
              open: openSub,
              close: function () {
                _this._hide(_this.$element);
                _this.$menuItems.eq(0).children('a').focus(); // focus to first element
                e.preventDefault();
              },
              handled: function () {
                e.stopImmediatePropagation();
              }
            };

            if (isTab) {
              if (_this._isVertical()) {
                // vertical menu
                if (_this._isRtl()) {
                  // right aligned
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {
                    down: nextSibling,
                    up: prevSibling,
                    next: closeSub,
                    previous: openSub
                  });
                } else {
                  // left aligned
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {
                    down: nextSibling,
                    up: prevSibling,
                    next: openSub,
                    previous: closeSub
                  });
                }
              } else {
                // horizontal menu
                if (_this._isRtl()) {
                  // right aligned
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {
                    next: prevSibling,
                    previous: nextSibling,
                    down: openSub,
                    up: closeSub
                  });
                } else {
                  // left aligned
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {
                    next: nextSibling,
                    previous: prevSibling,
                    down: openSub,
                    up: closeSub
                  });
                }
              }
            } else {
              // not tabs -> one sub
              if (_this._isRtl()) {
                // right aligned
                __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {
                  next: closeSub,
                  previous: openSub,
                  down: nextSibling,
                  up: prevSibling
                });
              } else {
                // left aligned
                __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend(functions, {
                  next: openSub,
                  previous: closeSub,
                  down: nextSibling,
                  up: prevSibling
                });
              }
            }
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e, 'DropdownMenu', functions);
          });
        }

        /**
         * Adds an event handler to the body to close any dropdowns on a click.
         * @function
         * @private
         */

      }, {
        key: '_addBodyHandler',
        value: function _addBodyHandler() {
          var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body),
              _this = this;
          $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu').on('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu', function (e) {
            var $link = _this.$element.find(e.target);
            if ($link.length) {
              return;
            }

            _this._hide();
            $body.off('mouseup.zf.dropdownmenu touchend.zf.dropdownmenu');
          });
        }

        /**
         * Opens a dropdown pane, and checks for collisions first.
         * @param {jQuery} $sub - ul element that is a submenu to show
         * @function
         * @private
         * @fires DropdownMenu#show
         */

      }, {
        key: '_show',
        value: function _show($sub) {
          var idx = this.$tabs.index(this.$tabs.filter(function (i, el) {
            return __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el).find($sub).length > 0;
          }));
          var $sibs = $sub.parent('li.is-dropdown-submenu-parent').siblings('li.is-dropdown-submenu-parent');
          this._hide($sibs, idx);
          $sub.css('visibility', 'hidden').addClass('js-dropdown-active').parent('li.is-dropdown-submenu-parent').addClass('is-active');
          var clear = __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__["Box"].ImNotTouchingYou($sub, null, true);
          if (!clear) {
            var oldClass = this.options.alignment === 'left' ? '-right' : '-left',
                $parentLi = $sub.parent('.is-dropdown-submenu-parent');
            $parentLi.removeClass('opens' + oldClass).addClass('opens-' + this.options.alignment);
            clear = __WEBPACK_IMPORTED_MODULE_3__foundation_util_box__["Box"].ImNotTouchingYou($sub, null, true);
            if (!clear) {
              $parentLi.removeClass('opens-' + this.options.alignment).addClass('opens-inner');
            }
            this.changed = true;
          }
          $sub.css('visibility', '');
          if (this.options.closeOnClick) {
            this._addBodyHandler();
          }
          /**
           * Fires when the new dropdown pane is visible.
           * @event DropdownMenu#show
           */
          this.$element.trigger('show.zf.dropdownmenu', [$sub]);
        }

        /**
         * Hides a single, currently open dropdown pane, if passed a parameter, otherwise, hides everything.
         * @function
         * @param {jQuery} $elem - element with a submenu to hide
         * @param {Number} idx - index of the $tabs collection to hide
         * @private
         */

      }, {
        key: '_hide',
        value: function _hide($elem, idx) {
          var $toClose;
          if ($elem && $elem.length) {
            $toClose = $elem;
          } else if (idx !== undefined) {
            $toClose = this.$tabs.not(function (i, el) {
              return i === idx;
            });
          } else {
            $toClose = this.$element;
          }
          var somethingToClose = $toClose.hasClass('is-active') || $toClose.find('.is-active').length > 0;

          if (somethingToClose) {
            $toClose.find('li.is-active').add($toClose).attr({
              'data-is-click': false
            }).removeClass('is-active');

            $toClose.find('ul.js-dropdown-active').removeClass('js-dropdown-active');

            if (this.changed || $toClose.find('opens-inner').length) {
              var oldClass = this.options.alignment === 'left' ? 'right' : 'left';
              $toClose.find('li.is-dropdown-submenu-parent').add($toClose).removeClass('opens-inner opens-' + this.options.alignment).addClass('opens-' + oldClass);
              this.changed = false;
            }
            /**
             * Fires when the open menus are closed.
             * @event DropdownMenu#hide
             */
            this.$element.trigger('hide.zf.dropdownmenu', [$toClose]);
          }
        }

        /**
         * Destroys the plugin.
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.$menuItems.off('.zf.dropdownmenu').removeAttr('data-is-click').removeClass('is-right-arrow is-left-arrow is-down-arrow opens-right opens-left opens-inner');
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document.body).off('.zf.dropdownmenu');
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_nest__["Nest"].Burn(this.$element, 'dropdown');
        }
      }]);

      return DropdownMenu;
    }(__WEBPACK_IMPORTED_MODULE_5__foundation_plugin__["Plugin"]);

    /**
     * Default settings for plugin
     */

    DropdownMenu.defaults = {
      /**
       * Disallows hover events from opening submenus
       * @option
       * @type {boolean}
       * @default false
       */
      disableHover: false,
      /**
       * Allow a submenu to automatically close on a mouseleave event, if not clicked open.
       * @option
       * @type {boolean}
       * @default true
       */
      autoclose: true,
      /**
       * Amount of time to delay opening a submenu on hover event.
       * @option
       * @type {number}
       * @default 50
       */
      hoverDelay: 50,
      /**
       * Allow a submenu to open/remain open on parent click event. Allows cursor to move away from menu.
       * @option
       * @type {boolean}
       * @default false
       */
      clickOpen: false,
      /**
       * Amount of time to delay closing a submenu on a mouseleave event.
       * @option
       * @type {number}
       * @default 500
       */

      closingTime: 500,
      /**
       * Position of the menu relative to what direction the submenus should open. Handled by JS. Can be `'auto'`, `'left'` or `'right'`.
       * @option
       * @type {string}
       * @default 'auto'
       */
      alignment: 'auto',
      /**
       * Allow clicks on the body to close any open submenus.
       * @option
       * @type {boolean}
       * @default true
       */
      closeOnClick: true,
      /**
       * Allow clicks on leaf anchor links to close any open submenus.
       * @option
       * @type {boolean}
       * @default true
       */
      closeOnClickInside: true,
      /**
       * Class applied to vertical oriented menus, Foundation default is `vertical`. Update this if using your own class.
       * @option
       * @type {string}
       * @default 'vertical'
       */
      verticalClass: 'vertical',
      /**
       * Class applied to right-side oriented menus, Foundation default is `align-right`. Update this if using your own class.
       * @option
       * @type {string}
       * @default 'align-right'
       */
      rightClass: 'align-right',
      /**
       * Boolean to force overide the clicking of links to perform default action, on second touch event for mobile.
       * @option
       * @type {boolean}
       * @default true
       */
      forceFollow: true
    };

    /***/
  },

  /***/5:
  /***/function (module, exports) {

    module.exports = { Keyboard: window.Foundation.Keyboard };

    /***/
  },

  /***/8:
  /***/function (module, exports) {

    module.exports = { Box: window.Foundation.Box };

    /***/
  },

  /***/84:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(18);

    /***/
  },

  /***/9:
  /***/function (module, exports) {

    module.exports = { Nest: window.Foundation.Nest };

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 87);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/21:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_magellan__ = __webpack_require__(51);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_magellan__["a" /* Magellan */], 'Magellan');

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/51:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Magellan;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll__ = __webpack_require__(76);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Magellan module.
     * @module foundation.magellan
     * @requires foundation.smoothScroll
     */

    var Magellan = function (_Plugin) {
      _inherits(Magellan, _Plugin);

      function Magellan() {
        _classCallCheck(this, Magellan);

        return _possibleConstructorReturn(this, (Magellan.__proto__ || Object.getPrototypeOf(Magellan)).apply(this, arguments));
      }

      _createClass(Magellan, [{
        key: '_setup',

        /**
         * Creates a new instance of Magellan.
         * @class
         * @name Magellan
         * @fires Magellan#init
         * @param {Object} element - jQuery object to add the trigger to.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Magellan.defaults, this.$element.data(), options);
          this.className = 'Magellan'; // ie9 back compat

          this._init();
          this.calcPoints();
        }

        /**
         * Initializes the Magellan plugin and calls functions to get equalizer functioning on load.
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          var id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["GetYoDigits"])(6, 'magellan');
          var _this = this;
          this.$targets = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-magellan-target]');
          this.$links = this.$element.find('a');
          this.$element.attr({
            'data-resize': id,
            'data-scroll': id,
            'id': id
          });
          this.$active = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();
          this.scrollPos = parseInt(window.pageYOffset, 10);

          this._events();
        }

        /**
         * Calculates an array of pixel values that are the demarcation lines between locations on the page.
         * Can be invoked if new elements are added or the size of a location changes.
         * @function
         */

      }, {
        key: 'calcPoints',
        value: function calcPoints() {
          var _this = this,
              body = document.body,
              html = document.documentElement;

          this.points = [];
          this.winHeight = Math.round(Math.max(window.innerHeight, html.clientHeight));
          this.docHeight = Math.round(Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight));

          this.$targets.each(function () {
            var $tar = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                pt = Math.round($tar.offset().top - _this.options.threshold);
            $tar.targetPoint = pt;
            _this.points.push(pt);
          });
        }

        /**
         * Initializes events for Magellan.
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this = this,
              $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body'),
              opts = {
            duration: _this.options.animationDuration,
            easing: _this.options.animationEasing
          };
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load', function () {
            if (_this.options.deepLinking) {
              if (location.hash) {
                _this.scrollToLoc(location.hash);
              }
            }
            _this.calcPoints();
            _this._updateActive();
          });

          this.$element.on({
            'resizeme.zf.trigger': this.reflow.bind(this),
            'scrollme.zf.trigger': this._updateActive.bind(this)
          }).on('click.zf.magellan', 'a[href^="#"]', function (e) {
            e.preventDefault();
            var arrival = this.getAttribute('href');
            _this.scrollToLoc(arrival);
          });

          this._deepLinkScroll = function (e) {
            if (_this.options.deepLinking) {
              _this.scrollToLoc(window.location.hash);
            }
          };

          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate', this._deepLinkScroll);
        }

        /**
         * Function to scroll to a given location on the page.
         * @param {String} loc - a properly formatted jQuery id selector. Example: '#foo'
         * @function
         */

      }, {
        key: 'scrollToLoc',
        value: function scrollToLoc(loc) {
          this._inTransition = true;
          var _this = this;

          var options = {
            animationEasing: this.options.animationEasing,
            animationDuration: this.options.animationDuration,
            threshold: this.options.threshold,
            offset: this.options.offset
          };

          __WEBPACK_IMPORTED_MODULE_3__foundation_smoothScroll__["SmoothScroll"].scrollToLoc(loc, options, function () {
            _this._inTransition = false;
            _this._updateActive();
          });
        }

        /**
         * Calls necessary functions to update Magellan upon DOM change
         * @function
         */

      }, {
        key: 'reflow',
        value: function reflow() {
          this.calcPoints();
          this._updateActive();
        }

        /**
         * Updates the visibility of an active location link, and updates the url hash for the page, if deepLinking enabled.
         * @private
         * @function
         * @fires Magellan#update
         */

      }, {
        key: '_updateActive',
        value: function _updateActive() /*evt, elem, scrollPos*/{
          if (this._inTransition) {
            return;
          }
          var winPos = /*scrollPos ||*/parseInt(window.pageYOffset, 10),
              curIdx;

          if (winPos + this.winHeight === this.docHeight) {
            curIdx = this.points.length - 1;
          } else if (winPos < this.points[0]) {
            curIdx = undefined;
          } else {
            var isDown = this.scrollPos < winPos,
                _this = this,
                curVisible = this.points.filter(function (p, i) {
              return isDown ? p - _this.options.offset <= winPos : p - _this.options.offset - _this.options.threshold <= winPos;
            });
            curIdx = curVisible.length ? curVisible.length - 1 : 0;
          }

          this.$active.removeClass(this.options.activeClass);
          this.$active = this.$links.filter('[href="#' + this.$targets.eq(curIdx).data('magellan-target') + '"]').addClass(this.options.activeClass);

          if (this.options.deepLinking) {
            var hash = "";
            if (curIdx != undefined) {
              hash = this.$active[0].getAttribute('href');
            }
            if (hash !== window.location.hash) {
              if (window.history.pushState) {
                window.history.pushState(null, null, hash);
              } else {
                window.location.hash = hash;
              }
            }
          }

          this.scrollPos = winPos;
          /**
           * Fires when magellan is finished updating to the new active element.
           * @event Magellan#update
           */
          this.$element.trigger('update.zf.magellan', [this.$active]);
        }

        /**
         * Destroys an instance of Magellan and resets the url of the window.
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.$element.off('.zf.trigger .zf.magellan').find('.' + this.options.activeClass).removeClass(this.options.activeClass);

          if (this.options.deepLinking) {
            var hash = this.$active[0].getAttribute('href');
            window.location.hash.replace(hash, '');
          }
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate', this._deepLinkScroll);
        }
      }]);

      return Magellan;
    }(__WEBPACK_IMPORTED_MODULE_2__foundation_plugin__["Plugin"]);

    /**
     * Default settings for plugin
     */

    Magellan.defaults = {
      /**
       * Amount of time, in ms, the animated scrolling should take between locations.
       * @option
       * @type {number}
       * @default 500
       */
      animationDuration: 500,
      /**
       * Animation style to use when scrolling between locations. Can be `'swing'` or `'linear'`.
       * @option
       * @type {string}
       * @default 'linear'
       * @see {@link https://api.jquery.com/animate|Jquery animate}
       */
      animationEasing: 'linear',
      /**
       * Number of pixels to use as a marker for location changes.
       * @option
       * @type {number}
       * @default 50
       */
      threshold: 50,
      /**
       * Class applied to the active locations link on the magellan container.
       * @option
       * @type {string}
       * @default 'is-active'
       */
      activeClass: 'is-active',
      /**
       * Allows the script to manipulate the url of the current page, and if supported, alter the history.
       * @option
       * @type {boolean}
       * @default false
       */
      deepLinking: false,
      /**
       * Number of pixels to offset the scroll of the page on item click if using a sticky nav bar.
       * @option
       * @type {number}
       * @default 0
       */
      offset: 0
    };

    /***/
  },

  /***/76:
  /***/function (module, exports) {

    module.exports = { SmoothScroll: window.Foundation.SmoothScroll };

    /***/
  },

  /***/87:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(21);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 88);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/22:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_offcanvas__ = __webpack_require__(52);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_offcanvas__["a" /* OffCanvas */], 'OffCanvas');

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/4:
  /***/function (module, exports) {

    module.exports = { Motion: window.Foundation.Motion, Move: window.Foundation.Move };

    /***/
  },

  /***/5:
  /***/function (module, exports) {

    module.exports = { Keyboard: window.Foundation.Keyboard };

    /***/
  },

  /***/52:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return OffCanvas;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(5);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(6);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__ = __webpack_require__(7);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * OffCanvas module.
     * @module foundation.offcanvas
     * @requires foundation.util.keyboard
     * @requires foundation.util.mediaQuery
     * @requires foundation.util.triggers
     */

    var OffCanvas = function (_Plugin) {
      _inherits(OffCanvas, _Plugin);

      function OffCanvas() {
        _classCallCheck(this, OffCanvas);

        return _possibleConstructorReturn(this, (OffCanvas.__proto__ || Object.getPrototypeOf(OffCanvas)).apply(this, arguments));
      }

      _createClass(OffCanvas, [{
        key: '_setup',

        /**
         * Creates a new instance of an off-canvas wrapper.
         * @class
         * @name OffCanvas
         * @fires OffCanvas#init
         * @param {Object} element - jQuery object to initialize.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          var _this3 = this;

          this.className = 'OffCanvas'; // ie9 back compat
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, OffCanvas.defaults, this.$element.data(), options);
          this.contentClasses = { base: [], reveal: [] };
          this.$lastTrigger = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();
          this.$triggers = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();
          this.position = 'left';
          this.$content = __WEBPACK_IMPORTED_MODULE_0_jquery___default()();
          this.nested = !!this.options.nested;

          // Defines the CSS transition/position classes of the off-canvas content container.
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(['push', 'overlap']).each(function (index, val) {
            _this3.contentClasses.base.push('has-transition-' + val);
          });
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(['left', 'right', 'top', 'bottom']).each(function (index, val) {
            _this3.contentClasses.base.push('has-position-' + val);
            _this3.contentClasses.reveal.push('has-reveal-' + val);
          });

          // Triggers init is idempotent, just need to make sure it is initialized
          __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"]._init();

          this._init();
          this._events();

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('OffCanvas', {
            'ESCAPE': 'close'
          });
        }

        /**
         * Initializes the off-canvas wrapper by adding the exit overlay (if needed).
         * @function
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          var id = this.$element.attr('id');

          this.$element.attr('aria-hidden', 'true');

          // Find off-canvas content, either by ID (if specified), by siblings or by closest selector (fallback)
          if (this.options.contentId) {
            this.$content = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + this.options.contentId);
          } else if (this.$element.siblings('[data-off-canvas-content]').length) {
            this.$content = this.$element.siblings('[data-off-canvas-content]').first();
          } else {
            this.$content = this.$element.closest('[data-off-canvas-content]').first();
          }

          if (!this.options.contentId) {
            // Assume that the off-canvas element is nested if it isn't a sibling of the content
            this.nested = this.$element.siblings('[data-off-canvas-content]').length === 0;
          } else if (this.options.contentId && this.options.nested === null) {
            // Warning if using content ID without setting the nested option
            // Once the element is nested it is required to work properly in this case
            console.warn('Remember to use the nested option if using the content ID option!');
          }

          if (this.nested === true) {
            // Force transition overlap if nested
            this.options.transition = 'overlap';
            // Remove appropriate classes if already assigned in markup
            this.$element.removeClass('is-transition-push');
          }

          this.$element.addClass('is-transition-' + this.options.transition + ' is-closed');

          // Find triggers that affect this element and add aria-expanded to them
          this.$triggers = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document).find('[data-open="' + id + '"], [data-close="' + id + '"], [data-toggle="' + id + '"]').attr('aria-expanded', 'false').attr('aria-controls', id);

          // Get position by checking for related CSS class
          this.position = this.$element.is('.position-left, .position-top, .position-right, .position-bottom') ? this.$element.attr('class').match(/position\-(left|top|right|bottom)/)[1] : this.position;

          // Add an overlay over the content if necessary
          if (this.options.contentOverlay === true) {
            var overlay = document.createElement('div');
            var overlayPosition = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$element).css("position") === 'fixed' ? 'is-overlay-fixed' : 'is-overlay-absolute';
            overlay.setAttribute('class', 'js-off-canvas-overlay ' + overlayPosition);
            this.$overlay = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(overlay);
            if (overlayPosition === 'is-overlay-fixed') {
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.$overlay).insertAfter(this.$element);
            } else {
              this.$content.append(this.$overlay);
            }
          }

          this.options.isRevealed = this.options.isRevealed || new RegExp(this.options.revealClass, 'g').test(this.$element[0].className);

          if (this.options.isRevealed === true) {
            this.options.revealOn = this.options.revealOn || this.$element[0].className.match(/(reveal-for-medium|reveal-for-large)/g)[0].split('-')[2];
            this._setMQChecker();
          }

          if (this.options.transitionTime) {
            this.$element.css('transition-duration', this.options.transitionTime);
          }

          // Initally remove all transition/position CSS classes from off-canvas content container.
          this._removeContentClasses();
        }

        /**
         * Adds event handlers to the off-canvas wrapper and the exit overlay.
         * @function
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          this.$element.off('.zf.trigger .zf.offcanvas').on({
            'open.zf.trigger': this.open.bind(this),
            'close.zf.trigger': this.close.bind(this),
            'toggle.zf.trigger': this.toggle.bind(this),
            'keydown.zf.offcanvas': this._handleKeyboard.bind(this)
          });

          if (this.options.closeOnClick === true) {
            var $target = this.options.contentOverlay ? this.$overlay : this.$content;
            $target.on({ 'click.zf.offcanvas': this.close.bind(this) });
          }
        }

        /**
         * Applies event listener for elements that will reveal at certain breakpoints.
         * @private
         */

      }, {
        key: '_setMQChecker',
        value: function _setMQChecker() {
          var _this = this;

          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', function () {
            if (__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"].atLeast(_this.options.revealOn)) {
              _this.reveal(true);
            } else {
              _this.reveal(false);
            }
          }).one('load.zf.offcanvas', function () {
            if (__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"].atLeast(_this.options.revealOn)) {
              _this.reveal(true);
            }
          });
        }

        /**
         * Removes the CSS transition/position classes of the off-canvas content container.
         * Removing the classes is important when another off-canvas gets opened that uses the same content container.
         * @private
         */

      }, {
        key: '_removeContentClasses',
        value: function _removeContentClasses(hasReveal) {
          this.$content.removeClass(this.contentClasses.base.join(' '));
          if (hasReveal === true) {
            this.$content.removeClass(this.contentClasses.reveal.join(' '));
          }
        }

        /**
         * Adds the CSS transition/position classes of the off-canvas content container, based on the opening off-canvas element.
         * Beforehand any transition/position class gets removed.
         * @param {Boolean} hasReveal - true if related off-canvas element is revealed.
         * @private
         */

      }, {
        key: '_addContentClasses',
        value: function _addContentClasses(hasReveal) {
          this._removeContentClasses();
          this.$content.addClass('has-transition-' + this.options.transition + ' has-position-' + this.position);
          if (hasReveal === true) {
            this.$content.addClass('has-reveal-' + this.position);
          }
        }

        /**
         * Handles the revealing/hiding the off-canvas at breakpoints, not the same as open.
         * @param {Boolean} isRevealed - true if element should be revealed.
         * @function
         */

      }, {
        key: 'reveal',
        value: function reveal(isRevealed) {
          if (isRevealed) {
            this.close();
            this.isRevealed = true;
            this.$element.attr('aria-hidden', 'false');
            this.$element.off('open.zf.trigger toggle.zf.trigger');
            this.$element.removeClass('is-closed');
          } else {
            this.isRevealed = false;
            this.$element.attr('aria-hidden', 'true');
            this.$element.off('open.zf.trigger toggle.zf.trigger').on({
              'open.zf.trigger': this.open.bind(this),
              'toggle.zf.trigger': this.toggle.bind(this)
            });
            this.$element.addClass('is-closed');
          }
          this._addContentClasses(isRevealed);
        }

        /**
         * Stops scrolling of the body when offcanvas is open on mobile Safari and other troublesome browsers.
         * @private
         */

      }, {
        key: '_stopScrolling',
        value: function _stopScrolling(event) {
          return false;
        }

        // Taken and adapted from http://stackoverflow.com/questions/16889447/prevent-full-page-scrolling-ios
        // Only really works for y, not sure how to extend to x or if we need to.

      }, {
        key: '_recordScrollable',
        value: function _recordScrollable(event) {
          var elem = this; // called from event handler context with this as elem

          // If the element is scrollable (content overflows), then...
          if (elem.scrollHeight !== elem.clientHeight) {
            // If we're at the top, scroll down one pixel to allow scrolling up
            if (elem.scrollTop === 0) {
              elem.scrollTop = 1;
            }
            // If we're at the bottom, scroll up one pixel to allow scrolling down
            if (elem.scrollTop === elem.scrollHeight - elem.clientHeight) {
              elem.scrollTop = elem.scrollHeight - elem.clientHeight - 1;
            }
          }
          elem.allowUp = elem.scrollTop > 0;
          elem.allowDown = elem.scrollTop < elem.scrollHeight - elem.clientHeight;
          elem.lastY = event.originalEvent.pageY;
        }
      }, {
        key: '_stopScrollPropagation',
        value: function _stopScrollPropagation(event) {
          var elem = this; // called from event handler context with this as elem
          var up = event.pageY < elem.lastY;
          var down = !up;
          elem.lastY = event.pageY;

          if (up && elem.allowUp || down && elem.allowDown) {
            event.stopPropagation();
          } else {
            event.preventDefault();
          }
        }

        /**
         * Opens the off-canvas menu.
         * @function
         * @param {Object} event - Event object passed from listener.
         * @param {jQuery} trigger - element that triggered the off-canvas to open.
         * @fires OffCanvas#opened
         */

      }, {
        key: 'open',
        value: function open(event, trigger) {
          if (this.$element.hasClass('is-open') || this.isRevealed) {
            return;
          }
          var _this = this;

          if (trigger) {
            this.$lastTrigger = trigger;
          }

          if (this.options.forceTo === 'top') {
            window.scrollTo(0, 0);
          } else if (this.options.forceTo === 'bottom') {
            window.scrollTo(0, document.body.scrollHeight);
          }

          if (this.options.transitionTime && this.options.transition !== 'overlap') {
            this.$element.siblings('[data-off-canvas-content]').css('transition-duration', this.options.transitionTime);
          } else {
            this.$element.siblings('[data-off-canvas-content]').css('transition-duration', '');
          }

          /**
           * Fires when the off-canvas menu opens.
           * @event OffCanvas#opened
           */
          this.$element.addClass('is-open').removeClass('is-closed');

          this.$triggers.attr('aria-expanded', 'true');
          this.$element.attr('aria-hidden', 'false').trigger('opened.zf.offcanvas');

          this.$content.addClass('is-open-' + this.position);

          // If `contentScroll` is set to false, add class and disable scrolling on touch devices.
          if (this.options.contentScroll === false) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').addClass('is-off-canvas-open').on('touchmove', this._stopScrolling);
            this.$element.on('touchstart', this._recordScrollable);
            this.$element.on('touchmove', this._stopScrollPropagation);
          }

          if (this.options.contentOverlay === true) {
            this.$overlay.addClass('is-visible');
          }

          if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
            this.$overlay.addClass('is-closable');
          }

          if (this.options.autoFocus === true) {
            this.$element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])(this.$element), function () {
              if (!_this.$element.hasClass('is-open')) {
                return; // exit if prematurely closed
              }
              var canvasFocus = _this.$element.find('[data-autofocus]');
              if (canvasFocus.length) {
                canvasFocus.eq(0).focus();
              } else {
                _this.$element.find('a, button').eq(0).focus();
              }
            });
          }

          if (this.options.trapFocus === true) {
            this.$content.attr('tabindex', '-1');
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].trapFocus(this.$element);
          }

          this._addContentClasses();
        }

        /**
         * Closes the off-canvas menu.
         * @function
         * @param {Function} cb - optional cb to fire after closure.
         * @fires OffCanvas#closed
         */

      }, {
        key: 'close',
        value: function close(cb) {
          if (!this.$element.hasClass('is-open') || this.isRevealed) {
            return;
          }

          var _this = this;

          this.$element.removeClass('is-open');

          this.$element.attr('aria-hidden', 'true')
          /**
           * Fires when the off-canvas menu opens.
           * @event OffCanvas#closed
           */
          .trigger('closed.zf.offcanvas');

          this.$content.removeClass('is-open-left is-open-top is-open-right is-open-bottom');

          // If `contentScroll` is set to false, remove class and re-enable scrolling on touch devices.
          if (this.options.contentScroll === false) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').removeClass('is-off-canvas-open').off('touchmove', this._stopScrolling);
            this.$element.off('touchstart', this._recordScrollable);
            this.$element.off('touchmove', this._stopScrollPropagation);
          }

          if (this.options.contentOverlay === true) {
            this.$overlay.removeClass('is-visible');
          }

          if (this.options.closeOnClick === true && this.options.contentOverlay === true) {
            this.$overlay.removeClass('is-closable');
          }

          this.$triggers.attr('aria-expanded', 'false');

          if (this.options.trapFocus === true) {
            this.$content.removeAttr('tabindex');
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].releaseFocus(this.$element);
          }

          // Listen to transitionEnd and add class when done.
          this.$element.one(__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["transitionend"])(this.$element), function (e) {
            _this.$element.addClass('is-closed');
            _this._removeContentClasses();
          });
        }

        /**
         * Toggles the off-canvas menu open or closed.
         * @function
         * @param {Object} event - Event object passed from listener.
         * @param {jQuery} trigger - element that triggered the off-canvas to open.
         */

      }, {
        key: 'toggle',
        value: function toggle(event, trigger) {
          if (this.$element.hasClass('is-open')) {
            this.close(event, trigger);
          } else {
            this.open(event, trigger);
          }
        }

        /**
         * Handles keyboard input when detected. When the escape key is pressed, the off-canvas menu closes, and focus is restored to the element that opened the menu.
         * @function
         * @private
         */

      }, {
        key: '_handleKeyboard',
        value: function _handleKeyboard(e) {
          var _this4 = this;

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e, 'OffCanvas', {
            close: function () {
              _this4.close();
              _this4.$lastTrigger.focus();
              return true;
            },
            handled: function () {
              e.stopPropagation();
              e.preventDefault();
            }
          });
        }

        /**
         * Destroys the offcanvas plugin.
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.close();
          this.$element.off('.zf.trigger .zf.offcanvas');
          this.$overlay.off('.zf.offcanvas');
        }
      }]);

      return OffCanvas;
    }(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["Plugin"]);

    OffCanvas.defaults = {
      /**
       * Allow the user to click outside of the menu to close it.
       * @option
       * @type {boolean}
       * @default true
       */
      closeOnClick: true,

      /**
       * Adds an overlay on top of `[data-off-canvas-content]`.
       * @option
       * @type {boolean}
       * @default true
       */
      contentOverlay: true,

      /**
       * Target an off-canvas content container by ID that may be placed anywhere. If null the closest content container will be taken.
       * @option
       * @type {?string}
       * @default null
       */
      contentId: null,

      /**
       * Define the off-canvas element is nested in an off-canvas content. This is required when using the contentId option for a nested element.
       * @option
       * @type {boolean}
       * @default null
       */
      nested: null,

      /**
       * Enable/disable scrolling of the main content when an off canvas panel is open.
       * @option
       * @type {boolean}
       * @default true
       */
      contentScroll: true,

      /**
       * Amount of time in ms the open and close transition requires. If none selected, pulls from body style.
       * @option
       * @type {number}
       * @default null
       */
      transitionTime: null,

      /**
       * Type of transition for the offcanvas menu. Options are 'push', 'detached' or 'slide'.
       * @option
       * @type {string}
       * @default push
       */
      transition: 'push',

      /**
       * Force the page to scroll to top or bottom on open.
       * @option
       * @type {?string}
       * @default null
       */
      forceTo: null,

      /**
       * Allow the offcanvas to remain open for certain breakpoints.
       * @option
       * @type {boolean}
       * @default false
       */
      isRevealed: false,

      /**
       * Breakpoint at which to reveal. JS will use a RegExp to target standard classes, if changing classnames, pass your class with the `revealClass` option.
       * @option
       * @type {?string}
       * @default null
       */
      revealOn: null,

      /**
       * Force focus to the offcanvas on open. If true, will focus the opening trigger on close.
       * @option
       * @type {boolean}
       * @default true
       */
      autoFocus: true,

      /**
       * Class used to force an offcanvas to remain open. Foundation defaults for this are `reveal-for-large` & `reveal-for-medium`.
       * @option
       * @type {string}
       * @default reveal-for-
       * @todo improve the regex testing for this.
       */
      revealClass: 'reveal-for-',

      /**
       * Triggers optional focus trapping when opening an offcanvas. Sets tabindex of [data-off-canvas-content] to -1 for accessibility purposes.
       * @option
       * @type {boolean}
       * @default false
       */
      trapFocus: false
    };

    /***/
  },

  /***/6:
  /***/function (module, exports) {

    module.exports = { MediaQuery: window.Foundation.MediaQuery };

    /***/
  },

  /***/7:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Triggers;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);

    var MutationObserver = function () {
      var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
      for (var i = 0; i < prefixes.length; i++) {
        if (prefixes[i] + 'MutationObserver' in window) {
          return window[prefixes[i] + 'MutationObserver'];
        }
      }
      return false;
    }();

    var triggers = function (el, type) {
      el.data(type).split(' ').forEach(function (id) {
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
      });
    };

    var Triggers = {
      Listeners: {
        Basic: {},
        Global: {}
      },
      Initializers: {}
    };

    Triggers.Listeners.Basic = {
      openListener: function () {
        triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'open');
      },
      closeListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'close');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');
        }
      },
      toggleListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'toggle');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');
        }
      },
      closeableListener: function (e) {
        e.stopPropagation();
        var animation = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');

        if (animation !== '') {
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), animation, function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');
          });
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');
        }
      },
      toggleFocusListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id).triggerHandler('toggle.zf.trigger', [__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);
      }
    };

    // Elements with [data-open] will reveal a plugin that supports it when clicked.
    Triggers.Initializers.addOpenListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);
      $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);
    };

    // Elements with [data-close] will close a plugin that supports it when clicked.
    // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
    Triggers.Initializers.addCloseListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);
      $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);
    };

    // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
    Triggers.Initializers.addToggleListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);
      $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);
    };

    // Elements with [data-closable] will respond to close.zf.trigger events.
    Triggers.Initializers.addCloseableListener = function ($elem) {
      $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);
      $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);
    };

    // Elements with [data-toggle-focus] will respond to coming in and out of focus
    Triggers.Initializers.addToggleFocusListener = function ($elem) {
      $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);
      $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
    };

    // More Global/complex listeners and triggers
    Triggers.Listeners.Global = {
      resizeListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a resize event
        $nodes.attr('data-events', "resize");
      },
      scrollListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a scroll event
        $nodes.attr('data-events', "scroll");
      },
      closeMeListener: function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);
          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      }
    };

    // Global, parses whole document.
    Triggers.Initializers.addClosemeListener = function (pluginName) {
      var yetiBoxes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),
          plugNames = ['dropdown', 'tooltip', 'reveal'];

      if (pluginName) {
        if (typeof pluginName === 'string') {
          plugNames.push(pluginName);
        } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
          plugNames.concat(pluginName);
        } else {
          console.error('Plugin names must be strings');
        }
      }
      if (yetiBoxes.length) {
        var listeners = plugNames.map(function (name) {
          return 'closeme.zf.' + name;
        }).join(' ');

        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
      }
    };

    function debounceGlobalListener(debounce, trigger, listener) {
      var timer = void 0,
          args = Array.prototype.slice.call(arguments, 3);
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger, function (e) {
        if (timer) {
          clearTimeout(timer);
        }
        timer = setTimeout(function () {
          listener.apply(null, args);
        }, debounce || 10); //default time to emit scroll event
      });
    }

    Triggers.Initializers.addResizeListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);
      }
    };

    Triggers.Initializers.addScrollListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);
      }
    };

    Triggers.Initializers.addMutationEventsListener = function ($elem) {
      if (!MutationObserver) {
        return false;
      }
      var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]');

      //element callback
      var listeningElementsMutation = function (mutationRecordsList) {
        var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);

        //trigger the event handler for the element depending on type
        switch (mutationRecordsList[0].type) {
          case "attributes":
            if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
            }
            if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('resizeme.zf.trigger', [$target]);
            }
            if (mutationRecordsList[0].attributeName === "style") {
              $target.closest("[data-mutate]").attr("data-events", "mutate");
              $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            }
            break;

          case "childList":
            $target.closest("[data-mutate]").attr("data-events", "mutate");
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            break;

          default:
            return false;
          //nothing
        }
      };

      if ($nodes.length) {
        //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
        for (var i = 0; i <= $nodes.length - 1; i++) {
          var elementObserver = new MutationObserver(listeningElementsMutation);
          elementObserver.observe($nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
        }
      }
    };

    Triggers.Initializers.addSimpleListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);

      Triggers.Initializers.addOpenListener($document);
      Triggers.Initializers.addCloseListener($document);
      Triggers.Initializers.addToggleListener($document);
      Triggers.Initializers.addCloseableListener($document);
      Triggers.Initializers.addToggleFocusListener($document);
    };

    Triggers.Initializers.addGlobalListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);
      Triggers.Initializers.addMutationEventsListener($document);
      Triggers.Initializers.addResizeListener();
      Triggers.Initializers.addScrollListener();
      Triggers.Initializers.addClosemeListener();
    };

    Triggers.init = function ($, Foundation) {
      if (typeof $.triggersInitialized === 'undefined') {
        var $document = $(document);

        if (document.readyState === "complete") {
          Triggers.Initializers.addSimpleListeners();
          Triggers.Initializers.addGlobalListeners();
        } else {
          $(window).on('load', function () {
            Triggers.Initializers.addSimpleListeners();
            Triggers.Initializers.addGlobalListeners();
          });
        }

        $.triggersInitialized = true;
      }

      if (Foundation) {
        Foundation.Triggers = Triggers;
        // Legacy included to be backwards compatible for now.
        Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;
      }
    };

    /***/
  },

  /***/88:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(22);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 89);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/10:
  /***/function (module, exports) {

    module.exports = { onImagesLoaded: window.Foundation.onImagesLoaded };

    /***/
  },

  /***/12:
  /***/function (module, exports) {

    module.exports = { Touch: window.Foundation.Touch };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/23:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_orbit__ = __webpack_require__(53);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_orbit__["a" /* Orbit */], 'Orbit');

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/4:
  /***/function (module, exports) {

    module.exports = { Motion: window.Foundation.Motion, Move: window.Foundation.Move };

    /***/
  },

  /***/5:
  /***/function (module, exports) {

    module.exports = { Keyboard: window.Foundation.Keyboard };

    /***/
  },

  /***/53:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Orbit;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(5);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_timer__ = __webpack_require__(78);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_timer___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_timer__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader__ = __webpack_require__(10);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__foundation_util_touch__ = __webpack_require__(12);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__foundation_util_touch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__foundation_util_touch__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Orbit module.
     * @module foundation.orbit
     * @requires foundation.util.keyboard
     * @requires foundation.util.motion
     * @requires foundation.util.timer
     * @requires foundation.util.imageLoader
     * @requires foundation.util.touch
     */

    var Orbit = function (_Plugin) {
      _inherits(Orbit, _Plugin);

      function Orbit() {
        _classCallCheck(this, Orbit);

        return _possibleConstructorReturn(this, (Orbit.__proto__ || Object.getPrototypeOf(Orbit)).apply(this, arguments));
      }

      _createClass(Orbit, [{
        key: '_setup',

        /**
        * Creates a new instance of an orbit carousel.
        * @class
        * @name Orbit
        * @param {jQuery} element - jQuery object to make into an Orbit Carousel.
        * @param {Object} options - Overrides to the default plugin settings.
        */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Orbit.defaults, this.$element.data(), options);
          this.className = 'Orbit'; // ie9 back compat

          __WEBPACK_IMPORTED_MODULE_7__foundation_util_touch__["Touch"].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a); // Touch init is idempotent, we just need to make sure it's initialied.

          this._init();

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Orbit', {
            'ltr': {
              'ARROW_RIGHT': 'next',
              'ARROW_LEFT': 'previous'
            },
            'rtl': {
              'ARROW_LEFT': 'next',
              'ARROW_RIGHT': 'previous'
            }
          });
        }

        /**
        * Initializes the plugin by creating jQuery collections, setting attributes, and starting the animation.
        * @function
        * @private
        */

      }, {
        key: '_init',
        value: function _init() {
          // @TODO: consider discussion on PR #9278 about DOM pollution by changeSlide
          this._reset();

          this.$wrapper = this.$element.find('.' + this.options.containerClass);
          this.$slides = this.$element.find('.' + this.options.slideClass);

          var $images = this.$element.find('img'),
              initActive = this.$slides.filter('.is-active'),
              id = this.$element[0].id || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_5__foundation_util_core__["GetYoDigits"])(6, 'orbit');

          this.$element.attr({
            'data-resize': id,
            'id': id
          });

          if (!initActive.length) {
            this.$slides.eq(0).addClass('is-active');
          }

          if (!this.options.useMUI) {
            this.$slides.addClass('no-motionui');
          }

          if ($images.length) {
            __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_4__foundation_util_imageLoader__["onImagesLoaded"])($images, this._prepareForOrbit.bind(this));
          } else {
            this._prepareForOrbit(); //hehe
          }

          if (this.options.bullets) {
            this._loadBullets();
          }

          this._events();

          if (this.options.autoPlay && this.$slides.length > 1) {
            this.geoSync();
          }

          if (this.options.accessible) {
            // allow wrapper to be focusable to enable arrow navigation
            this.$wrapper.attr('tabindex', 0);
          }
        }

        /**
        * Creates a jQuery collection of bullets, if they are being used.
        * @function
        * @private
        */

      }, {
        key: '_loadBullets',
        value: function _loadBullets() {
          this.$bullets = this.$element.find('.' + this.options.boxOfBullets).find('button');
        }

        /**
        * Sets a `timer` object on the orbit, and starts the counter for the next slide.
        * @function
        */

      }, {
        key: 'geoSync',
        value: function geoSync() {
          var _this = this;
          this.timer = new __WEBPACK_IMPORTED_MODULE_3__foundation_util_timer__["Timer"](this.$element, {
            duration: this.options.timerDelay,
            infinite: false
          }, function () {
            _this.changeSlide(true);
          });
          this.timer.start();
        }

        /**
        * Sets wrapper and slide heights for the orbit.
        * @function
        * @private
        */

      }, {
        key: '_prepareForOrbit',
        value: function _prepareForOrbit() {
          var _this = this;
          this._setWrapperHeight();
        }

        /**
        * Calulates the height of each slide in the collection, and uses the tallest one for the wrapper height.
        * @function
        * @private
        * @param {Function} cb - a callback function to fire when complete.
        */

      }, {
        key: '_setWrapperHeight',
        value: function _setWrapperHeight(cb) {
          //rewrite this to `for` loop
          var max = 0,
              temp,
              counter = 0,
              _this = this;

          this.$slides.each(function () {
            temp = this.getBoundingClientRect().height;
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).attr('data-slide', counter);

            if (_this.$slides.filter('.is-active')[0] !== _this.$slides.eq(counter)[0]) {
              //if not the active slide, set css position and display property
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).css({ 'position': 'relative', 'display': 'none' });
            }
            max = temp > max ? temp : max;
            counter++;
          });

          if (counter === this.$slides.length) {
            this.$wrapper.css({ 'height': max }); //only change the wrapper height property once.
            if (cb) {
              cb(max);
            } //fire callback with max height dimension.
          }
        }

        /**
        * Sets the max-height of each slide.
        * @function
        * @private
        */

      }, {
        key: '_setSlideHeight',
        value: function _setSlideHeight(height) {
          this.$slides.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).css('max-height', height);
          });
        }

        /**
        * Adds event listeners to basically everything within the element.
        * @function
        * @private
        */

      }, {
        key: '_events',
        value: function _events() {
          var _this = this;

          //***************************************
          //**Now using custom event - thanks to:**
          //**      Yohai Ararat of Toronto      **
          //***************************************
          //
          this.$element.off('.resizeme.zf.trigger').on({
            'resizeme.zf.trigger': this._prepareForOrbit.bind(this)
          });
          if (this.$slides.length > 1) {

            if (this.options.swipe) {
              this.$slides.off('swipeleft.zf.orbit swiperight.zf.orbit').on('swipeleft.zf.orbit', function (e) {
                e.preventDefault();
                _this.changeSlide(true);
              }).on('swiperight.zf.orbit', function (e) {
                e.preventDefault();
                _this.changeSlide(false);
              });
            }
            //***************************************

            if (this.options.autoPlay) {
              this.$slides.on('click.zf.orbit', function () {
                _this.$element.data('clickedOn', _this.$element.data('clickedOn') ? false : true);
                _this.timer[_this.$element.data('clickedOn') ? 'pause' : 'start']();
              });

              if (this.options.pauseOnHover) {
                this.$element.on('mouseenter.zf.orbit', function () {
                  _this.timer.pause();
                }).on('mouseleave.zf.orbit', function () {
                  if (!_this.$element.data('clickedOn')) {
                    _this.timer.start();
                  }
                });
              }
            }

            if (this.options.navButtons) {
              var $controls = this.$element.find('.' + this.options.nextClass + ', .' + this.options.prevClass);
              $controls.attr('tabindex', 0)
              //also need to handle enter/return and spacebar key presses
              .on('click.zf.orbit touchend.zf.orbit', function (e) {
                e.preventDefault();
                _this.changeSlide(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).hasClass(_this.options.nextClass));
              });
            }

            if (this.options.bullets) {
              this.$bullets.on('click.zf.orbit touchend.zf.orbit', function () {
                if (/is-active/g.test(this.className)) {
                  return false;
                } //if this is active, kick out of function.
                var idx = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('slide'),
                    ltr = idx > _this.$slides.filter('.is-active').data('slide'),
                    $slide = _this.$slides.eq(idx);

                _this.changeSlide(ltr, $slide, idx);
              });
            }

            if (this.options.accessible) {
              this.$wrapper.add(this.$bullets).on('keydown.zf.orbit', function (e) {
                // handle keyboard event with keyboard util
                __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e, 'Orbit', {
                  next: function () {
                    _this.changeSlide(true);
                  },
                  previous: function () {
                    _this.changeSlide(false);
                  },
                  handled: function () {
                    // if bullet is focused, make sure focus moves
                    if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).is(_this.$bullets)) {
                      _this.$bullets.filter('.is-active').focus();
                    }
                  }
                });
              });
            }
          }
        }

        /**
         * Resets Orbit so it can be reinitialized
         */

      }, {
        key: '_reset',
        value: function _reset() {
          // Don't do anything if there are no slides (first run)
          if (typeof this.$slides == 'undefined') {
            return;
          }

          if (this.$slides.length > 1) {
            // Remove old events
            this.$element.off('.zf.orbit').find('*').off('.zf.orbit');

            // Restart timer if autoPlay is enabled
            if (this.options.autoPlay) {
              this.timer.restart();
            }

            // Reset all sliddes
            this.$slides.each(function (el) {
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(el).removeClass('is-active is-active is-in').removeAttr('aria-live').hide();
            });

            // Show the first slide
            this.$slides.first().addClass('is-active').show();

            // Triggers when the slide has finished animating
            this.$element.trigger('slidechange.zf.orbit', [this.$slides.first()]);

            // Select first bullet if bullets are present
            if (this.options.bullets) {
              this._updateBullets(0);
            }
          }
        }

        /**
        * Changes the current slide to a new one.
        * @function
        * @param {Boolean} isLTR - flag if the slide should move left to right.
        * @param {jQuery} chosenSlide - the jQuery element of the slide to show next, if one is selected.
        * @param {Number} idx - the index of the new slide in its collection, if one chosen.
        * @fires Orbit#slidechange
        */

      }, {
        key: 'changeSlide',
        value: function changeSlide(isLTR, chosenSlide, idx) {
          if (!this.$slides) {
            return;
          } // Don't freak out if we're in the middle of cleanup
          var $curSlide = this.$slides.filter('.is-active').eq(0);

          if (/mui/g.test($curSlide[0].className)) {
            return false;
          } //if the slide is currently animating, kick out of the function

          var $firstSlide = this.$slides.first(),
              $lastSlide = this.$slides.last(),
              dirIn = isLTR ? 'Right' : 'Left',
              dirOut = isLTR ? 'Left' : 'Right',
              _this = this,
              $newSlide;

          if (!chosenSlide) {
            //most of the time, this will be auto played or clicked from the navButtons.
            $newSlide = isLTR ? //if wrapping enabled, check to see if there is a `next` or `prev` sibling, if not, select the first or last slide to fill in. if wrapping not enabled, attempt to select `next` or `prev`, if there's nothing there, the function will kick out on next step. CRAZY NESTED TERNARIES!!!!!
            this.options.infiniteWrap ? $curSlide.next('.' + this.options.slideClass).length ? $curSlide.next('.' + this.options.slideClass) : $firstSlide : $curSlide.next('.' + this.options.slideClass) : //pick next slide if moving left to right
            this.options.infiniteWrap ? $curSlide.prev('.' + this.options.slideClass).length ? $curSlide.prev('.' + this.options.slideClass) : $lastSlide : $curSlide.prev('.' + this.options.slideClass); //pick prev slide if moving right to left
          } else {
            $newSlide = chosenSlide;
          }

          if ($newSlide.length) {
            /**
            * Triggers before the next slide starts animating in and only if a next slide has been found.
            * @event Orbit#beforeslidechange
            */
            this.$element.trigger('beforeslidechange.zf.orbit', [$curSlide, $newSlide]);

            if (this.options.bullets) {
              idx = idx || this.$slides.index($newSlide); //grab index to update bullets
              this._updateBullets(idx);
            }

            if (this.options.useMUI && !this.$element.is(':hidden')) {
              __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["Motion"].animateIn($newSlide.addClass('is-active').css({ 'position': 'absolute', 'top': 0 }), this.options['animInFrom' + dirIn], function () {
                $newSlide.css({ 'position': 'relative', 'display': 'block' }).attr('aria-live', 'polite');
              });

              __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["Motion"].animateOut($curSlide.removeClass('is-active'), this.options['animOutTo' + dirOut], function () {
                $curSlide.removeAttr('aria-live');
                if (_this.options.autoPlay && !_this.timer.isPaused) {
                  _this.timer.restart();
                }
                //do stuff?
              });
            } else {
              $curSlide.removeClass('is-active is-in').removeAttr('aria-live').hide();
              $newSlide.addClass('is-active is-in').attr('aria-live', 'polite').show();
              if (this.options.autoPlay && !this.timer.isPaused) {
                this.timer.restart();
              }
            }
            /**
            * Triggers when the slide has finished animating in.
            * @event Orbit#slidechange
            */
            this.$element.trigger('slidechange.zf.orbit', [$newSlide]);
          }
        }

        /**
        * Updates the active state of the bullets, if displayed.
        * @function
        * @private
        * @param {Number} idx - the index of the current slide.
        */

      }, {
        key: '_updateBullets',
        value: function _updateBullets(idx) {
          var $oldBullet = this.$element.find('.' + this.options.boxOfBullets).find('.is-active').removeClass('is-active').blur(),
              span = $oldBullet.find('span:last').detach(),
              $newBullet = this.$bullets.eq(idx).addClass('is-active').append(span);
        }

        /**
        * Destroys the carousel and hides the element.
        * @function
        */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.$element.off('.zf.orbit').find('*').off('.zf.orbit').end().hide();
        }
      }]);

      return Orbit;
    }(__WEBPACK_IMPORTED_MODULE_6__foundation_plugin__["Plugin"]);

    Orbit.defaults = {
      /**
      * Tells the JS to look for and loadBullets.
      * @option
       * @type {boolean}
      * @default true
      */
      bullets: true,
      /**
      * Tells the JS to apply event listeners to nav buttons
      * @option
       * @type {boolean}
      * @default true
      */
      navButtons: true,
      /**
      * motion-ui animation class to apply
      * @option
       * @type {string}
      * @default 'slide-in-right'
      */
      animInFromRight: 'slide-in-right',
      /**
      * motion-ui animation class to apply
      * @option
       * @type {string}
      * @default 'slide-out-right'
      */
      animOutToRight: 'slide-out-right',
      /**
      * motion-ui animation class to apply
      * @option
       * @type {string}
      * @default 'slide-in-left'
      *
      */
      animInFromLeft: 'slide-in-left',
      /**
      * motion-ui animation class to apply
      * @option
       * @type {string}
      * @default 'slide-out-left'
      */
      animOutToLeft: 'slide-out-left',
      /**
      * Allows Orbit to automatically animate on page load.
      * @option
       * @type {boolean}
      * @default true
      */
      autoPlay: true,
      /**
      * Amount of time, in ms, between slide transitions
      * @option
       * @type {number}
      * @default 5000
      */
      timerDelay: 5000,
      /**
      * Allows Orbit to infinitely loop through the slides
      * @option
       * @type {boolean}
      * @default true
      */
      infiniteWrap: true,
      /**
      * Allows the Orbit slides to bind to swipe events for mobile, requires an additional util library
      * @option
       * @type {boolean}
      * @default true
      */
      swipe: true,
      /**
      * Allows the timing function to pause animation on hover.
      * @option
       * @type {boolean}
      * @default true
      */
      pauseOnHover: true,
      /**
      * Allows Orbit to bind keyboard events to the slider, to animate frames with arrow keys
      * @option
       * @type {boolean}
      * @default true
      */
      accessible: true,
      /**
      * Class applied to the container of Orbit
      * @option
       * @type {string}
      * @default 'orbit-container'
      */
      containerClass: 'orbit-container',
      /**
      * Class applied to individual slides.
      * @option
       * @type {string}
      * @default 'orbit-slide'
      */
      slideClass: 'orbit-slide',
      /**
      * Class applied to the bullet container. You're welcome.
      * @option
       * @type {string}
      * @default 'orbit-bullets'
      */
      boxOfBullets: 'orbit-bullets',
      /**
      * Class applied to the `next` navigation button.
      * @option
       * @type {string}
      * @default 'orbit-next'
      */
      nextClass: 'orbit-next',
      /**
      * Class applied to the `previous` navigation button.
      * @option
       * @type {string}
      * @default 'orbit-previous'
      */
      prevClass: 'orbit-previous',
      /**
      * Boolean to flag the js to use motion ui classes or not. Default to true for backwards compatability.
      * @option
       * @type {boolean}
      * @default true
      */
      useMUI: true
    };

    /***/
  },

  /***/78:
  /***/function (module, exports) {

    module.exports = { Timer: window.Foundation.Timer };

    /***/
  },

  /***/89:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(23);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 90);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/24:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_responsiveAccordionTabs__ = __webpack_require__(54);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_responsiveAccordionTabs__["a" /* ResponsiveAccordionTabs */], 'ResponsiveAccordionTabs');

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/54:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return ResponsiveAccordionTabs;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(6);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_accordion__ = __webpack_require__(72);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_accordion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_accordion__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_tabs__ = __webpack_require__(77);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_tabs___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__foundation_tabs__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    // The plugin matches the plugin classes with these plugin instances.
    var MenuPlugins = {
      tabs: {
        cssClass: 'tabs',
        plugin: __WEBPACK_IMPORTED_MODULE_5__foundation_tabs__["Tabs"]
      },
      accordion: {
        cssClass: 'accordion',
        plugin: __WEBPACK_IMPORTED_MODULE_4__foundation_accordion__["Accordion"]
      }
    };

    /**
     * ResponsiveAccordionTabs module.
     * @module foundation.responsiveAccordionTabs
     * @requires foundation.util.motion
     * @requires foundation.accordion
     * @requires foundation.tabs
     */

    var ResponsiveAccordionTabs = function (_Plugin) {
      _inherits(ResponsiveAccordionTabs, _Plugin);

      function ResponsiveAccordionTabs() {
        _classCallCheck(this, ResponsiveAccordionTabs);

        return _possibleConstructorReturn(this, (ResponsiveAccordionTabs.__proto__ || Object.getPrototypeOf(ResponsiveAccordionTabs)).apply(this, arguments));
      }

      _createClass(ResponsiveAccordionTabs, [{
        key: '_setup',

        /**
         * Creates a new instance of a responsive accordion tabs.
         * @class
         * @name ResponsiveAccordionTabs
         * @fires ResponsiveAccordionTabs#init
         * @param {jQuery} element - jQuery object to make into Responsive Accordion Tabs.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, this.$element.data(), options);
          this.rules = this.$element.data('responsive-accordion-tabs');
          this.currentMq = null;
          this.currentPlugin = null;
          this.className = 'ResponsiveAccordionTabs'; // ie9 back compat
          if (!this.$element.attr('id')) {
            this.$element.attr('id', __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["GetYoDigits"])(6, 'responsiveaccordiontabs'));
          };

          this._init();
          this._events();
        }

        /**
         * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.
         * @function
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"]._init();

          // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
          if (typeof this.rules === 'string') {
            var rulesTree = {};

            // Parse rules from "classes" pulled from data attribute
            var rules = this.rules.split(' ');

            // Iterate through every rule found
            for (var i = 0; i < rules.length; i++) {
              var rule = rules[i].split('-');
              var ruleSize = rule.length > 1 ? rule[0] : 'small';
              var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

              if (MenuPlugins[rulePlugin] !== null) {
                rulesTree[ruleSize] = MenuPlugins[rulePlugin];
              }
            }

            this.rules = rulesTree;
          }

          this._getAllOptions();

          if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.isEmptyObject(this.rules)) {
            this._checkMediaQueries();
          }
        }
      }, {
        key: '_getAllOptions',
        value: function _getAllOptions() {
          //get all defaults and options
          var _this = this;
          _this.allOptions = {};
          for (var key in MenuPlugins) {
            if (MenuPlugins.hasOwnProperty(key)) {
              var obj = MenuPlugins[key];
              try {
                var dummyPlugin = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<ul></ul>');
                var tmpPlugin = new obj.plugin(dummyPlugin, _this.options);
                for (var keyKey in tmpPlugin.options) {
                  if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {
                    var objObj = tmpPlugin.options[keyKey];
                    _this.allOptions[keyKey] = objObj;
                  }
                }
                tmpPlugin.destroy();
              } catch (e) {}
            }
          }
        }

        /**
         * Initializes events for the Menu.
         * @function
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this = this;

          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', function () {
            _this._checkMediaQueries();
          });
        }

        /**
         * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
         * @function
         * @private
         */

      }, {
        key: '_checkMediaQueries',
        value: function _checkMediaQueries() {
          var matchedMq,
              _this = this;
          // Iterate through each rule and find the last matching rule
          __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(this.rules, function (key) {
            if (__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].atLeast(key)) {
              matchedMq = key;
            }
          });

          // No match? No dice
          if (!matchedMq) return;

          // Plugin already initialized? We good
          if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

          // Remove existing plugin-specific CSS classes
          __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(MenuPlugins, function (key, value) {
            _this.$element.removeClass(value.cssClass);
          });

          // Add the CSS class for the new plugin
          this.$element.addClass(this.rules[matchedMq].cssClass);

          // Create an instance of the new plugin
          if (this.currentPlugin) {
            //don't know why but on nested elements data zfPlugin get's lost
            if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin', this.storezfData);
            this.currentPlugin.destroy();
          }
          this._handleMarkup(this.rules[matchedMq].cssClass);
          this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
          this.storezfData = this.currentPlugin.$element.data('zfPlugin');
        }
      }, {
        key: '_handleMarkup',
        value: function _handleMarkup(toSet) {
          var _this = this,
              fromString = 'accordion';
          var $panels = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content=' + this.$element.attr('id') + ']');
          if ($panels.length) fromString = 'tabs';
          if (fromString === toSet) {
            return;
          };

          var tabsTitle = _this.allOptions.linkClass ? _this.allOptions.linkClass : 'tabs-title';
          var tabsPanel = _this.allOptions.panelClass ? _this.allOptions.panelClass : 'tabs-panel';

          this.$element.removeAttr('role');
          var $liHeads = this.$element.children('.' + tabsTitle + ',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');
          var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');

          if (fromString === 'tabs') {
            $panels = $panels.children('.' + tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');
            $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');
          } else {
            $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');
          };

          $panels.css({ display: '', visibility: '' });
          $liHeads.css({ display: '', visibility: '' });
          if (toSet === 'accordion') {
            $panels.each(function (key, value) {
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content', '').removeClass('is-active').css({ height: '' });
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content=' + _this.$element.attr('id') + ']').after('<div id="tabs-placeholder-' + _this.$element.attr('id') + '"></div>').detach();
              $liHeads.addClass('accordion-item').attr('data-accordion-item', '');
              $liHeadsA.addClass('accordion-title');
            });
          } else if (toSet === 'tabs') {
            var $tabsContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content=' + _this.$element.attr('id') + ']');
            var $placeholder = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#tabs-placeholder-' + _this.$element.attr('id'));
            if ($placeholder.length) {
              $tabsContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div class="tabs-content"></div>').insertAfter($placeholder).attr('data-tabs-content', _this.$element.attr('id'));
              $placeholder.remove();
            } else {
              $tabsContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div class="tabs-content"></div>').insertAfter(_this.$element).attr('data-tabs-content', _this.$element.attr('id'));
            };
            $panels.each(function (key, value) {
              var tempValue = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).appendTo($tabsContent).addClass(tabsPanel);
              var hash = $liHeadsA.get(key).hash.slice(1);
              var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["GetYoDigits"])(6, 'accordion');
              if (hash !== id) {
                if (hash !== '') {
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id', hash);
                } else {
                  hash = id;
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()(value).attr('id', hash);
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeadsA.get(key)).attr('href', __WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeadsA.get(key)).attr('href').replace('#', '') + '#' + hash);
                };
              };
              var isActive = __WEBPACK_IMPORTED_MODULE_0_jquery___default()($liHeads.get(key)).hasClass('is-active');
              if (isActive) {
                tempValue.addClass('is-active');
              };
            });
            $liHeads.addClass(tabsTitle);
          };
        }

        /**
         * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          if (this.currentPlugin) this.currentPlugin.destroy();
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.ResponsiveAccordionTabs');
        }
      }]);

      return ResponsiveAccordionTabs;
    }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);

    ResponsiveAccordionTabs.defaults = {};

    /***/
  },

  /***/6:
  /***/function (module, exports) {

    module.exports = { MediaQuery: window.Foundation.MediaQuery };

    /***/
  },

  /***/72:
  /***/function (module, exports) {

    module.exports = { Accordion: window.Foundation.Accordion };

    /***/
  },

  /***/77:
  /***/function (module, exports) {

    module.exports = { Tabs: window.Foundation.Tabs };

    /***/
  },

  /***/90:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(24);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 91);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/25:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_responsiveMenu__ = __webpack_require__(55);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_responsiveMenu__["a" /* ResponsiveMenu */], 'ResponsiveMenu');

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/55:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return ResponsiveMenu;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(6);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu__ = __webpack_require__(75);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_drilldown__ = __webpack_require__(74);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_drilldown___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__foundation_drilldown__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu__ = __webpack_require__(73);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var MenuPlugins = {
      dropdown: {
        cssClass: 'dropdown',
        plugin: __WEBPACK_IMPORTED_MODULE_4__foundation_dropdownMenu__["DropdownMenu"]
      },
      drilldown: {
        cssClass: 'drilldown',
        plugin: __WEBPACK_IMPORTED_MODULE_5__foundation_drilldown__["Drilldown"]
      },
      accordion: {
        cssClass: 'accordion-menu',
        plugin: __WEBPACK_IMPORTED_MODULE_6__foundation_accordionMenu__["AccordionMenu"]
      }
    };

    // import "foundation.util.triggers.js";


    /**
     * ResponsiveMenu module.
     * @module foundation.responsiveMenu
     * @requires foundation.util.triggers
     * @requires foundation.util.mediaQuery
     */

    var ResponsiveMenu = function (_Plugin) {
      _inherits(ResponsiveMenu, _Plugin);

      function ResponsiveMenu() {
        _classCallCheck(this, ResponsiveMenu);

        return _possibleConstructorReturn(this, (ResponsiveMenu.__proto__ || Object.getPrototypeOf(ResponsiveMenu)).apply(this, arguments));
      }

      _createClass(ResponsiveMenu, [{
        key: '_setup',

        /**
         * Creates a new instance of a responsive menu.
         * @class
         * @name ResponsiveMenu
         * @fires ResponsiveMenu#init
         * @param {jQuery} element - jQuery object to make into a dropdown menu.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);
          this.rules = this.$element.data('responsive-menu');
          this.currentMq = null;
          this.currentPlugin = null;
          this.className = 'ResponsiveMenu'; // ie9 back compat

          this._init();
          this._events();
        }

        /**
         * Initializes the Menu by parsing the classes from the 'data-ResponsiveMenu' attribute on the element.
         * @function
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"]._init();
          // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
          if (typeof this.rules === 'string') {
            var rulesTree = {};

            // Parse rules from "classes" pulled from data attribute
            var rules = this.rules.split(' ');

            // Iterate through every rule found
            for (var i = 0; i < rules.length; i++) {
              var rule = rules[i].split('-');
              var ruleSize = rule.length > 1 ? rule[0] : 'small';
              var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

              if (MenuPlugins[rulePlugin] !== null) {
                rulesTree[ruleSize] = MenuPlugins[rulePlugin];
              }
            }

            this.rules = rulesTree;
          }

          if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.isEmptyObject(this.rules)) {
            this._checkMediaQueries();
          }
          // Add data-mutate since children may need it.
          this.$element.attr('data-mutate', this.$element.attr('data-mutate') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["GetYoDigits"])(6, 'responsive-menu'));
        }

        /**
         * Initializes events for the Menu.
         * @function
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this = this;

          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', function () {
            _this._checkMediaQueries();
          });
          // $(window).on('resize.zf.ResponsiveMenu', function() {
          //   _this._checkMediaQueries();
          // });
        }

        /**
         * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
         * @function
         * @private
         */

      }, {
        key: '_checkMediaQueries',
        value: function _checkMediaQueries() {
          var matchedMq,
              _this = this;
          // Iterate through each rule and find the last matching rule
          __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(this.rules, function (key) {
            if (__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].atLeast(key)) {
              matchedMq = key;
            }
          });

          // No match? No dice
          if (!matchedMq) return;

          // Plugin already initialized? We good
          if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

          // Remove existing plugin-specific CSS classes
          __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.each(MenuPlugins, function (key, value) {
            _this.$element.removeClass(value.cssClass);
          });

          // Add the CSS class for the new plugin
          this.$element.addClass(this.rules[matchedMq].cssClass);

          // Create an instance of the new plugin
          if (this.currentPlugin) this.currentPlugin.destroy();
          this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
        }

        /**
         * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.currentPlugin.destroy();
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.ResponsiveMenu');
        }
      }]);

      return ResponsiveMenu;
    }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);

    ResponsiveMenu.defaults = {};

    /***/
  },

  /***/6:
  /***/function (module, exports) {

    module.exports = { MediaQuery: window.Foundation.MediaQuery };

    /***/
  },

  /***/73:
  /***/function (module, exports) {

    module.exports = { AccordionMenu: window.Foundation.AccordionMenu };

    /***/
  },

  /***/74:
  /***/function (module, exports) {

    module.exports = { Drilldown: window.Foundation.Drilldown };

    /***/
  },

  /***/75:
  /***/function (module, exports) {

    module.exports = { DropdownMenu: window.Foundation.DropdownMenu };

    /***/
  },

  /***/91:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(25);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 92);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/26:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_responsiveToggle__ = __webpack_require__(56);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_responsiveToggle__["a" /* ResponsiveToggle */], 'ResponsiveToggle');

    /***/
  },

  /***/4:
  /***/function (module, exports) {

    module.exports = { Motion: window.Foundation.Motion, Move: window.Foundation.Move };

    /***/
  },

  /***/56:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return ResponsiveToggle;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__ = __webpack_require__(6);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * ResponsiveToggle module.
     * @module foundation.responsiveToggle
     * @requires foundation.util.mediaQuery
     * @requires foundation.util.motion
     */

    var ResponsiveToggle = function (_Plugin) {
      _inherits(ResponsiveToggle, _Plugin);

      function ResponsiveToggle() {
        _classCallCheck(this, ResponsiveToggle);

        return _possibleConstructorReturn(this, (ResponsiveToggle.__proto__ || Object.getPrototypeOf(ResponsiveToggle)).apply(this, arguments));
      }

      _createClass(ResponsiveToggle, [{
        key: '_setup',

        /**
         * Creates a new instance of Tab Bar.
         * @class
         * @name ResponsiveToggle
         * @fires ResponsiveToggle#init
         * @param {jQuery} element - jQuery object to attach tab bar functionality to.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(element);
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, ResponsiveToggle.defaults, this.$element.data(), options);
          this.className = 'ResponsiveToggle'; // ie9 back compat

          this._init();
          this._events();
        }

        /**
         * Initializes the tab bar by finding the target element, toggling element, and running update().
         * @function
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"]._init();
          var targetID = this.$element.data('responsive-toggle');
          if (!targetID) {
            console.error('Your tab bar needs an ID of a Menu as the value of data-tab-bar.');
          }

          this.$targetMenu = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + targetID);
          this.$toggler = this.$element.find('[data-toggle]').filter(function () {
            var target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');
            return target === targetID || target === "";
          });
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, this.options, this.$targetMenu.data());

          // If they were set, parse the animation classes
          if (this.options.animate) {
            var input = this.options.animate.split(' ');

            this.animationIn = input[0];
            this.animationOut = input[1] || null;
          }

          this._update();
        }

        /**
         * Adds necessary event handlers for the tab bar to work.
         * @function
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this = this;

          this._updateMqHandler = this._update.bind(this);

          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', this._updateMqHandler);

          this.$toggler.on('click.zf.responsiveToggle', this.toggleMenu.bind(this));
        }

        /**
         * Checks the current media query to determine if the tab bar should be visible or hidden.
         * @function
         * @private
         */

      }, {
        key: '_update',
        value: function _update() {
          // Mobile
          if (!__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].atLeast(this.options.hideFor)) {
            this.$element.show();
            this.$targetMenu.hide();
          }

          // Desktop
          else {
              this.$element.hide();
              this.$targetMenu.show();
            }
        }

        /**
         * Toggles the element attached to the tab bar. The toggle only happens if the screen is small enough to allow it.
         * @function
         * @fires ResponsiveToggle#toggled
         */

      }, {
        key: 'toggleMenu',
        value: function toggleMenu() {
          var _this3 = this;

          if (!__WEBPACK_IMPORTED_MODULE_1__foundation_util_mediaQuery__["MediaQuery"].atLeast(this.options.hideFor)) {
            /**
             * Fires when the element attached to the tab bar toggles.
             * @event ResponsiveToggle#toggled
             */
            if (this.options.animate) {
              if (this.$targetMenu.is(':hidden')) {
                __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["Motion"].animateIn(this.$targetMenu, this.animationIn, function () {
                  _this3.$element.trigger('toggled.zf.responsiveToggle');
                  _this3.$targetMenu.find('[data-mutate]').triggerHandler('mutateme.zf.trigger');
                });
              } else {
                __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["Motion"].animateOut(this.$targetMenu, this.animationOut, function () {
                  _this3.$element.trigger('toggled.zf.responsiveToggle');
                });
              }
            } else {
              this.$targetMenu.toggle(0);
              this.$targetMenu.find('[data-mutate]').trigger('mutateme.zf.trigger');
              this.$element.trigger('toggled.zf.responsiveToggle');
            }
          }
        }
      }, {
        key: '_destroy',
        value: function _destroy() {
          this.$element.off('.zf.responsiveToggle');
          this.$toggler.off('.zf.responsiveToggle');

          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('changed.zf.mediaquery', this._updateMqHandler);
        }
      }]);

      return ResponsiveToggle;
    }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);

    ResponsiveToggle.defaults = {
      /**
       * The breakpoint after which the menu is always shown, and the tab bar is hidden.
       * @option
       * @type {string}
       * @default 'medium'
       */
      hideFor: 'medium',

      /**
       * To decide if the toggle should be animated or not.
       * @option
       * @type {boolean}
       * @default false
       */
      animate: false
    };

    /***/
  },

  /***/6:
  /***/function (module, exports) {

    module.exports = { MediaQuery: window.Foundation.MediaQuery };

    /***/
  },

  /***/92:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(26);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 93);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/27:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_reveal__ = __webpack_require__(57);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_reveal__["a" /* Reveal */], 'Reveal');

    /***/
  },

  /***/4:
  /***/function (module, exports) {

    module.exports = { Motion: window.Foundation.Motion, Move: window.Foundation.Move };

    /***/
  },

  /***/5:
  /***/function (module, exports) {

    module.exports = { Keyboard: window.Foundation.Keyboard };

    /***/
  },

  /***/57:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Reveal;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(5);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(6);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__ = __webpack_require__(7);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Reveal module.
     * @module foundation.reveal
     * @requires foundation.util.keyboard
     * @requires foundation.util.triggers
     * @requires foundation.util.mediaQuery
     * @requires foundation.util.motion if using animations
     */

    var Reveal = function (_Plugin) {
      _inherits(Reveal, _Plugin);

      function Reveal() {
        _classCallCheck(this, Reveal);

        return _possibleConstructorReturn(this, (Reveal.__proto__ || Object.getPrototypeOf(Reveal)).apply(this, arguments));
      }

      _createClass(Reveal, [{
        key: '_setup',

        /**
         * Creates a new instance of Reveal.
         * @class
         * @name Reveal
         * @param {jQuery} element - jQuery object to use for the modal.
         * @param {Object} options - optional parameters.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Reveal.defaults, this.$element.data(), options);
          this.className = 'Reveal'; // ie9 back compat
          this._init();

          // Triggers init is idempotent, just need to make sure it is initialized
          __WEBPACK_IMPORTED_MODULE_5__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Reveal', {
            'ESCAPE': 'close'
          });
        }

        /**
         * Initializes the modal by adding the overlay and close buttons, (if selected).
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"]._init();
          this.id = this.$element.attr('id');
          this.isActive = false;
          this.cached = { mq: __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"].current };
          this.isMobile = mobileSniff();

          this.$anchor = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="' + this.id + '"]').length ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-open="' + this.id + '"]') : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-toggle="' + this.id + '"]');
          this.$anchor.attr({
            'aria-controls': this.id,
            'aria-haspopup': true,
            'tabindex': 0
          });

          if (this.options.fullScreen || this.$element.hasClass('full')) {
            this.options.fullScreen = true;
            this.options.overlay = false;
          }
          if (this.options.overlay && !this.$overlay) {
            this.$overlay = this._makeOverlay(this.id);
          }

          this.$element.attr({
            'role': 'dialog',
            'aria-hidden': true,
            'data-yeti-box': this.id,
            'data-resize': this.id
          });

          if (this.$overlay) {
            this.$element.detach().appendTo(this.$overlay);
          } else {
            this.$element.detach().appendTo(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.appendTo));
            this.$element.addClass('without-overlay');
          }
          this._events();
          if (this.options.deepLink && window.location.hash === '#' + this.id) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).one('load.zf.reveal', this.open.bind(this));
          }
        }

        /**
         * Creates an overlay div to display behind the modal.
         * @private
         */

      }, {
        key: '_makeOverlay',
        value: function _makeOverlay() {
          var additionalOverlayClasses = '';

          if (this.options.additionalOverlayClasses) {
            additionalOverlayClasses = ' ' + this.options.additionalOverlayClasses;
          }

          return __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div></div>').addClass('reveal-overlay' + additionalOverlayClasses).appendTo(this.options.appendTo);
        }

        /**
         * Updates position of modal
         * TODO:  Figure out if we actually need to cache these values or if it doesn't matter
         * @private
         */

      }, {
        key: '_updatePosition',
        value: function _updatePosition() {
          var width = this.$element.outerWidth();
          var outerWidth = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).width();
          var height = this.$element.outerHeight();
          var outerHeight = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).height();
          var left, top;
          if (this.options.hOffset === 'auto') {
            left = parseInt((outerWidth - width) / 2, 10);
          } else {
            left = parseInt(this.options.hOffset, 10);
          }
          if (this.options.vOffset === 'auto') {
            if (height > outerHeight) {
              top = parseInt(Math.min(100, outerHeight / 10), 10);
            } else {
              top = parseInt((outerHeight - height) / 4, 10);
            }
          } else {
            top = parseInt(this.options.vOffset, 10);
          }
          this.$element.css({ top: top + 'px' });
          // only worry about left if we don't have an overlay or we havea  horizontal offset,
          // otherwise we're perfectly in the middle
          if (!this.$overlay || this.options.hOffset !== 'auto') {
            this.$element.css({ left: left + 'px' });
            this.$element.css({ margin: '0px' });
          }
        }

        /**
         * Adds event handlers for the modal.
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this3 = this;

          var _this = this;

          this.$element.on({
            'open.zf.trigger': this.open.bind(this),
            'close.zf.trigger': function (event, $element) {
              if (event.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default()(event.target).parents('[data-closable]')[0] === $element) {
                // only close reveal when it's explicitly called
                return _this3.close.apply(_this3);
              }
            },
            'toggle.zf.trigger': this.toggle.bind(this),
            'resizeme.zf.trigger': function () {
              _this._updatePosition();
            }
          });

          if (this.options.closeOnClick && this.options.overlay) {
            this.$overlay.off('.zf.reveal').on('click.zf.reveal', function (e) {
              if (e.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0], e.target) || !__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(document, e.target)) {
                return;
              }
              _this.close();
            });
          }
          if (this.options.deepLink) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate.zf.reveal:' + this.id, this._handleState.bind(this));
          }
        }

        /**
         * Handles modal methods on back/forward button clicks or any other event that triggers popstate.
         * @private
         */

      }, {
        key: '_handleState',
        value: function _handleState(e) {
          if (window.location.hash === '#' + this.id && !this.isActive) {
            this.open();
          } else {
            this.close();
          }
        }

        /**
         * Opens the modal controlled by `this.$anchor`, and closes all others by default.
         * @function
         * @fires Reveal#closeme
         * @fires Reveal#open
         */

      }, {
        key: 'open',
        value: function open() {
          var _this4 = this;

          // either update or replace browser history
          if (this.options.deepLink) {
            var hash = '#' + this.id;

            if (window.history.pushState) {
              if (this.options.updateHistory) {
                window.history.pushState({}, '', hash);
              } else {
                window.history.replaceState({}, '', hash);
              }
            } else {
              window.location.hash = hash;
            }
          }

          this.isActive = true;

          // Make elements invisible, but remove display: none so we can get size and positioning
          this.$element.css({ 'visibility': 'hidden' }).show().scrollTop(0);
          if (this.options.overlay) {
            this.$overlay.css({ 'visibility': 'hidden' }).show();
          }

          this._updatePosition();

          this.$element.hide().css({ 'visibility': '' });

          if (this.$overlay) {
            this.$overlay.css({ 'visibility': '' }).hide();
            if (this.$element.hasClass('fast')) {
              this.$overlay.addClass('fast');
            } else if (this.$element.hasClass('slow')) {
              this.$overlay.addClass('slow');
            }
          }

          if (!this.options.multipleOpened) {
            /**
             * Fires immediately before the modal opens.
             * Closes any other modals that are currently open
             * @event Reveal#closeme
             */
            this.$element.trigger('closeme.zf.reveal', this.id);
          }

          var _this = this;

          function addRevealOpenClasses() {
            if (_this.isMobile) {
              if (!_this.originalScrollPos) {
                _this.originalScrollPos = window.pageYOffset;
              }
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').addClass('is-reveal-open');
            } else {
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').addClass('is-reveal-open');
            }
          }
          // Motion UI method of reveal
          if (this.options.animationIn) {
            var afterAnimation = function () {
              _this.$element.attr({
                'aria-hidden': false,
                'tabindex': -1
              }).focus();
              addRevealOpenClasses();
              __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].trapFocus(_this.$element);
            };

            if (this.options.overlay) {
              __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["Motion"].animateIn(this.$overlay, 'fade-in');
            }
            __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["Motion"].animateIn(this.$element, this.options.animationIn, function () {
              if (_this4.$element) {
                // protect against object having been removed
                _this4.focusableElements = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].findFocusable(_this4.$element);
                afterAnimation();
              }
            });
          }
          // jQuery method of reveal
          else {
              if (this.options.overlay) {
                this.$overlay.show(0);
              }
              this.$element.show(this.options.showDelay);
            }

          // handle accessibility
          this.$element.attr({
            'aria-hidden': false,
            'tabindex': -1
          }).focus();
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].trapFocus(this.$element);

          addRevealOpenClasses();

          this._extraHandlers();

          /**
           * Fires when the modal has successfully opened.
           * @event Reveal#open
           */
          this.$element.trigger('open.zf.reveal');
        }

        /**
         * Adds extra event handlers for the body and window if necessary.
         * @private
         */

      }, {
        key: '_extraHandlers',
        value: function _extraHandlers() {
          var _this = this;
          if (!this.$element) {
            return;
          } // If we're in the middle of cleanup, don't freak out
          this.focusableElements = __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].findFocusable(this.$element);

          if (!this.options.overlay && this.options.closeOnClick && !this.options.fullScreen) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').on('click.zf.reveal', function (e) {
              if (e.target === _this.$element[0] || __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(_this.$element[0], e.target) || !__WEBPACK_IMPORTED_MODULE_0_jquery___default.a.contains(document, e.target)) {
                return;
              }
              _this.close();
            });
          }

          if (this.options.closeOnEsc) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('keydown.zf.reveal', function (e) {
              __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e, 'Reveal', {
                close: function () {
                  if (_this.options.closeOnEsc) {
                    _this.close();
                  }
                }
              });
            });
          }
        }

        /**
         * Closes the modal.
         * @function
         * @fires Reveal#closed
         */

      }, {
        key: 'close',
        value: function close() {
          if (!this.isActive || !this.$element.is(':visible')) {
            return false;
          }
          var _this = this;

          // Motion UI method of hiding
          if (this.options.animationOut) {
            if (this.options.overlay) {
              __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["Motion"].animateOut(this.$overlay, 'fade-out');
            }

            __WEBPACK_IMPORTED_MODULE_3__foundation_util_motion__["Motion"].animateOut(this.$element, this.options.animationOut, finishUp);
          }
          // jQuery method of hiding
          else {
              this.$element.hide(this.options.hideDelay);

              if (this.options.overlay) {
                this.$overlay.hide(0, finishUp);
              } else {
                finishUp();
              }
            }

          // Conditionals to remove extra event listeners added on open
          if (this.options.closeOnEsc) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('keydown.zf.reveal');
          }

          if (!this.options.overlay && this.options.closeOnClick) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').off('click.zf.reveal');
          }

          this.$element.off('keydown.zf.reveal');

          function finishUp() {
            if (_this.isMobile) {
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()('.reveal:visible').length === 0) {
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').removeClass('is-reveal-open');
              }
              if (_this.originalScrollPos) {
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').scrollTop(_this.originalScrollPos);
                _this.originalScrollPos = null;
              }
            } else {
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()('.reveal:visible').length === 0) {
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body').removeClass('is-reveal-open');
              }
            }

            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].releaseFocus(_this.$element);

            _this.$element.attr('aria-hidden', true);

            /**
            * Fires when the modal is done closing.
            * @event Reveal#closed
            */
            _this.$element.trigger('closed.zf.reveal');
          }

          /**
          * Resets the modal content
          * This prevents a running video to keep going in the background
          */
          if (this.options.resetOnClose) {
            this.$element.html(this.$element.html());
          }

          this.isActive = false;
          if (_this.options.deepLink) {
            if (window.history.replaceState) {
              window.history.replaceState('', document.title, window.location.href.replace('#' + this.id, ''));
            } else {
              window.location.hash = '';
            }
          }

          this.$anchor.focus();
        }

        /**
         * Toggles the open/closed state of a modal.
         * @function
         */

      }, {
        key: 'toggle',
        value: function toggle() {
          if (this.isActive) {
            this.close();
          } else {
            this.open();
          }
        }
      }, {
        key: '_destroy',

        /**
         * Destroys an instance of a modal.
         * @function
         */
        value: function _destroy() {
          if (this.options.overlay) {
            this.$element.appendTo(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.appendTo)); // move $element outside of $overlay to prevent error unregisterPlugin()
            this.$overlay.hide().off().remove();
          }
          this.$element.hide().off();
          this.$anchor.off('.zf');
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('.zf.reveal:' + this.id);
        }
      }]);

      return Reveal;
    }(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["Plugin"]);

    Reveal.defaults = {
      /**
       * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
       * @option
       * @type {string}
       * @default ''
       */
      animationIn: '',
      /**
       * Motion-UI class to use for animated elements. If none used, defaults to simple show/hide.
       * @option
       * @type {string}
       * @default ''
       */
      animationOut: '',
      /**
       * Time, in ms, to delay the opening of a modal after a click if no animation used.
       * @option
       * @type {number}
       * @default 0
       */
      showDelay: 0,
      /**
       * Time, in ms, to delay the closing of a modal after a click if no animation used.
       * @option
       * @type {number}
       * @default 0
       */
      hideDelay: 0,
      /**
       * Allows a click on the body/overlay to close the modal.
       * @option
       * @type {boolean}
       * @default true
       */
      closeOnClick: true,
      /**
       * Allows the modal to close if the user presses the `ESCAPE` key.
       * @option
       * @type {boolean}
       * @default true
       */
      closeOnEsc: true,
      /**
       * If true, allows multiple modals to be displayed at once.
       * @option
       * @type {boolean}
       * @default false
       */
      multipleOpened: false,
      /**
       * Distance, in pixels, the modal should push down from the top of the screen.
       * @option
       * @type {number|string}
       * @default auto
       */
      vOffset: 'auto',
      /**
       * Distance, in pixels, the modal should push in from the side of the screen.
       * @option
       * @type {number|string}
       * @default auto
       */
      hOffset: 'auto',
      /**
       * Allows the modal to be fullscreen, completely blocking out the rest of the view. JS checks for this as well.
       * @option
       * @type {boolean}
       * @default false
       */
      fullScreen: false,
      /**
       * Percentage of screen height the modal should push up from the bottom of the view.
       * @option
       * @type {number}
       * @default 10
       */
      btmOffsetPct: 10,
      /**
       * Allows the modal to generate an overlay div, which will cover the view when modal opens.
       * @option
       * @type {boolean}
       * @default true
       */
      overlay: true,
      /**
       * Allows the modal to remove and reinject markup on close. Should be true if using video elements w/o using provider's api, otherwise, videos will continue to play in the background.
       * @option
       * @type {boolean}
       * @default false
       */
      resetOnClose: false,
      /**
       * Allows the modal to alter the url on open/close, and allows the use of the `back` button to close modals. ALSO, allows a modal to auto-maniacally open on page load IF the hash === the modal's user-set id.
       * @option
       * @type {boolean}
       * @default false
       */
      deepLink: false,
      /**
       * Update the browser history with the open modal
       * @option
       * @default false
       */
      updateHistory: false,
      /**
      * Allows the modal to append to custom div.
      * @option
      * @type {string}
      * @default "body"
      */
      appendTo: "body",
      /**
       * Allows adding additional class names to the reveal overlay.
       * @option
       * @type {string}
       * @default ''
       */
      additionalOverlayClasses: ''
    };

    function iPhoneSniff() {
      return (/iP(ad|hone|od).*OS/.test(window.navigator.userAgent)
      );
    }

    function androidSniff() {
      return (/Android/.test(window.navigator.userAgent)
      );
    }

    function mobileSniff() {
      return iPhoneSniff() || androidSniff();
    }

    /***/
  },

  /***/6:
  /***/function (module, exports) {

    module.exports = { MediaQuery: window.Foundation.MediaQuery };

    /***/
  },

  /***/7:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Triggers;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);

    var MutationObserver = function () {
      var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
      for (var i = 0; i < prefixes.length; i++) {
        if (prefixes[i] + 'MutationObserver' in window) {
          return window[prefixes[i] + 'MutationObserver'];
        }
      }
      return false;
    }();

    var triggers = function (el, type) {
      el.data(type).split(' ').forEach(function (id) {
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
      });
    };

    var Triggers = {
      Listeners: {
        Basic: {},
        Global: {}
      },
      Initializers: {}
    };

    Triggers.Listeners.Basic = {
      openListener: function () {
        triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'open');
      },
      closeListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'close');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');
        }
      },
      toggleListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'toggle');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');
        }
      },
      closeableListener: function (e) {
        e.stopPropagation();
        var animation = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');

        if (animation !== '') {
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), animation, function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');
          });
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');
        }
      },
      toggleFocusListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id).triggerHandler('toggle.zf.trigger', [__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);
      }
    };

    // Elements with [data-open] will reveal a plugin that supports it when clicked.
    Triggers.Initializers.addOpenListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);
      $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);
    };

    // Elements with [data-close] will close a plugin that supports it when clicked.
    // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
    Triggers.Initializers.addCloseListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);
      $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);
    };

    // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
    Triggers.Initializers.addToggleListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);
      $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);
    };

    // Elements with [data-closable] will respond to close.zf.trigger events.
    Triggers.Initializers.addCloseableListener = function ($elem) {
      $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);
      $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);
    };

    // Elements with [data-toggle-focus] will respond to coming in and out of focus
    Triggers.Initializers.addToggleFocusListener = function ($elem) {
      $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);
      $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
    };

    // More Global/complex listeners and triggers
    Triggers.Listeners.Global = {
      resizeListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a resize event
        $nodes.attr('data-events', "resize");
      },
      scrollListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a scroll event
        $nodes.attr('data-events', "scroll");
      },
      closeMeListener: function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);
          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      }
    };

    // Global, parses whole document.
    Triggers.Initializers.addClosemeListener = function (pluginName) {
      var yetiBoxes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),
          plugNames = ['dropdown', 'tooltip', 'reveal'];

      if (pluginName) {
        if (typeof pluginName === 'string') {
          plugNames.push(pluginName);
        } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
          plugNames.concat(pluginName);
        } else {
          console.error('Plugin names must be strings');
        }
      }
      if (yetiBoxes.length) {
        var listeners = plugNames.map(function (name) {
          return 'closeme.zf.' + name;
        }).join(' ');

        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
      }
    };

    function debounceGlobalListener(debounce, trigger, listener) {
      var timer = void 0,
          args = Array.prototype.slice.call(arguments, 3);
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger, function (e) {
        if (timer) {
          clearTimeout(timer);
        }
        timer = setTimeout(function () {
          listener.apply(null, args);
        }, debounce || 10); //default time to emit scroll event
      });
    }

    Triggers.Initializers.addResizeListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);
      }
    };

    Triggers.Initializers.addScrollListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);
      }
    };

    Triggers.Initializers.addMutationEventsListener = function ($elem) {
      if (!MutationObserver) {
        return false;
      }
      var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]');

      //element callback
      var listeningElementsMutation = function (mutationRecordsList) {
        var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);

        //trigger the event handler for the element depending on type
        switch (mutationRecordsList[0].type) {
          case "attributes":
            if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
            }
            if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('resizeme.zf.trigger', [$target]);
            }
            if (mutationRecordsList[0].attributeName === "style") {
              $target.closest("[data-mutate]").attr("data-events", "mutate");
              $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            }
            break;

          case "childList":
            $target.closest("[data-mutate]").attr("data-events", "mutate");
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            break;

          default:
            return false;
          //nothing
        }
      };

      if ($nodes.length) {
        //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
        for (var i = 0; i <= $nodes.length - 1; i++) {
          var elementObserver = new MutationObserver(listeningElementsMutation);
          elementObserver.observe($nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
        }
      }
    };

    Triggers.Initializers.addSimpleListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);

      Triggers.Initializers.addOpenListener($document);
      Triggers.Initializers.addCloseListener($document);
      Triggers.Initializers.addToggleListener($document);
      Triggers.Initializers.addCloseableListener($document);
      Triggers.Initializers.addToggleFocusListener($document);
    };

    Triggers.Initializers.addGlobalListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);
      Triggers.Initializers.addMutationEventsListener($document);
      Triggers.Initializers.addResizeListener();
      Triggers.Initializers.addScrollListener();
      Triggers.Initializers.addClosemeListener();
    };

    Triggers.init = function ($, Foundation) {
      if (typeof $.triggersInitialized === 'undefined') {
        var $document = $(document);

        if (document.readyState === "complete") {
          Triggers.Initializers.addSimpleListeners();
          Triggers.Initializers.addGlobalListeners();
        } else {
          $(window).on('load', function () {
            Triggers.Initializers.addSimpleListeners();
            Triggers.Initializers.addGlobalListeners();
          });
        }

        $.triggersInitialized = true;
      }

      if (Foundation) {
        Foundation.Triggers = Triggers;
        // Legacy included to be backwards compatible for now.
        Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;
      }
    };

    /***/
  },

  /***/93:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(27);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 94);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/12:
  /***/function (module, exports) {

    module.exports = { Touch: window.Foundation.Touch };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/28:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_slider__ = __webpack_require__(58);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_slider__["a" /* Slider */], 'Slider');

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/4:
  /***/function (module, exports) {

    module.exports = { Motion: window.Foundation.Motion, Move: window.Foundation.Move };

    /***/
  },

  /***/5:
  /***/function (module, exports) {

    module.exports = { Keyboard: window.Foundation.Keyboard };

    /***/
  },

  /***/58:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Slider;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(5);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_util_touch__ = __webpack_require__(12);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__foundation_util_touch___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__foundation_util_touch__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__foundation_util_triggers__ = __webpack_require__(7);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Slider module.
     * @module foundation.slider
     * @requires foundation.util.motion
     * @requires foundation.util.triggers
     * @requires foundation.util.keyboard
     * @requires foundation.util.touch
     */

    var Slider = function (_Plugin) {
      _inherits(Slider, _Plugin);

      function Slider() {
        _classCallCheck(this, Slider);

        return _possibleConstructorReturn(this, (Slider.__proto__ || Object.getPrototypeOf(Slider)).apply(this, arguments));
      }

      _createClass(Slider, [{
        key: '_setup',

        /**
         * Creates a new instance of a slider control.
         * @class
         * @name Slider
         * @param {jQuery} element - jQuery object to make into a slider control.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Slider.defaults, this.$element.data(), options);
          this.className = 'Slider'; // ie9 back compat

          // Touch and Triggers inits are idempotent, we just need to make sure it's initialied.
          __WEBPACK_IMPORTED_MODULE_5__foundation_util_touch__["Touch"].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);
          __WEBPACK_IMPORTED_MODULE_6__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);

          this._init();

          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Slider', {
            'ltr': {
              'ARROW_RIGHT': 'increase',
              'ARROW_UP': 'increase',
              'ARROW_DOWN': 'decrease',
              'ARROW_LEFT': 'decrease',
              'SHIFT_ARROW_RIGHT': 'increase_fast',
              'SHIFT_ARROW_UP': 'increase_fast',
              'SHIFT_ARROW_DOWN': 'decrease_fast',
              'SHIFT_ARROW_LEFT': 'decrease_fast',
              'HOME': 'min',
              'END': 'max'
            },
            'rtl': {
              'ARROW_LEFT': 'increase',
              'ARROW_RIGHT': 'decrease',
              'SHIFT_ARROW_LEFT': 'increase_fast',
              'SHIFT_ARROW_RIGHT': 'decrease_fast'
            }
          });
        }

        /**
         * Initilizes the plugin by reading/setting attributes, creating collections and setting the initial position of the handle(s).
         * @function
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          this.inputs = this.$element.find('input');
          this.handles = this.$element.find('[data-slider-handle]');

          this.$handle = this.handles.eq(0);
          this.$input = this.inputs.length ? this.inputs.eq(0) : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + this.$handle.attr('aria-controls'));
          this.$fill = this.$element.find('[data-slider-fill]').css(this.options.vertical ? 'height' : 'width', 0);

          var isDbl = false,
              _this = this;
          if (this.options.disabled || this.$element.hasClass(this.options.disabledClass)) {
            this.options.disabled = true;
            this.$element.addClass(this.options.disabledClass);
          }
          if (!this.inputs.length) {
            this.inputs = __WEBPACK_IMPORTED_MODULE_0_jquery___default()().add(this.$input);
            this.options.binding = true;
          }

          this._setInitAttr(0);

          if (this.handles[1]) {
            this.options.doubleSided = true;
            this.$handle2 = this.handles.eq(1);
            this.$input2 = this.inputs.length > 1 ? this.inputs.eq(1) : __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + this.$handle2.attr('aria-controls'));

            if (!this.inputs[1]) {
              this.inputs = this.inputs.add(this.$input2);
            }
            isDbl = true;

            // this.$handle.triggerHandler('click.zf.slider');
            this._setInitAttr(1);
          }

          // Set handle positions
          this.setHandles();

          this._events();
        }
      }, {
        key: 'setHandles',
        value: function setHandles() {
          var _this3 = this;

          if (this.handles[1]) {
            this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true, function () {
              _this3._setHandlePos(_this3.$handle2, _this3.inputs.eq(1).val(), true);
            });
          } else {
            this._setHandlePos(this.$handle, this.inputs.eq(0).val(), true);
          }
        }
      }, {
        key: '_reflow',
        value: function _reflow() {
          this.setHandles();
        }
        /**
        * @function
        * @private
        * @param {Number} value - floating point (the value) to be transformed using to a relative position on the slider (the inverse of _value)
        */

      }, {
        key: '_pctOfBar',
        value: function _pctOfBar(value) {
          var pctOfBar = percent(value - this.options.start, this.options.end - this.options.start);

          switch (this.options.positionValueFunction) {
            case "pow":
              pctOfBar = this._logTransform(pctOfBar);
              break;
            case "log":
              pctOfBar = this._powTransform(pctOfBar);
              break;
          }

          return pctOfBar.toFixed(2);
        }

        /**
        * @function
        * @private
        * @param {Number} pctOfBar - floating point, the relative position of the slider (typically between 0-1) to be transformed to a value
        */

      }, {
        key: '_value',
        value: function _value(pctOfBar) {
          switch (this.options.positionValueFunction) {
            case "pow":
              pctOfBar = this._powTransform(pctOfBar);
              break;
            case "log":
              pctOfBar = this._logTransform(pctOfBar);
              break;
          }
          var value = (this.options.end - this.options.start) * pctOfBar + this.options.start;

          return value;
        }

        /**
        * @function
        * @private
        * @param {Number} value - floating point (typically between 0-1) to be transformed using the log function
        */

      }, {
        key: '_logTransform',
        value: function _logTransform(value) {
          return baseLog(this.options.nonLinearBase, value * (this.options.nonLinearBase - 1) + 1);
        }

        /**
        * @function
        * @private
        * @param {Number} value - floating point (typically between 0-1) to be transformed using the power function
        */

      }, {
        key: '_powTransform',
        value: function _powTransform(value) {
          return (Math.pow(this.options.nonLinearBase, value) - 1) / (this.options.nonLinearBase - 1);
        }

        /**
         * Sets the position of the selected handle and fill bar.
         * @function
         * @private
         * @param {jQuery} $hndl - the selected handle to move.
         * @param {Number} location - floating point between the start and end values of the slider bar.
         * @param {Function} cb - callback function to fire on completion.
         * @fires Slider#moved
         * @fires Slider#changed
         */

      }, {
        key: '_setHandlePos',
        value: function _setHandlePos($hndl, location, noInvert, cb) {
          // don't move if the slider has been disabled since its initialization
          if (this.$element.hasClass(this.options.disabledClass)) {
            return;
          }
          //might need to alter that slightly for bars that will have odd number selections.
          location = parseFloat(location); //on input change events, convert string to number...grumble.

          // prevent slider from running out of bounds, if value exceeds the limits set through options, override the value to min/max
          if (location < this.options.start) {
            location = this.options.start;
          } else if (location > this.options.end) {
            location = this.options.end;
          }

          var isDbl = this.options.doubleSided;

          if (isDbl) {
            //this block is to prevent 2 handles from crossing eachother. Could/should be improved.
            if (this.handles.index($hndl) === 0) {
              var h2Val = parseFloat(this.$handle2.attr('aria-valuenow'));
              location = location >= h2Val ? h2Val - this.options.step : location;
            } else {
              var h1Val = parseFloat(this.$handle.attr('aria-valuenow'));
              location = location <= h1Val ? h1Val + this.options.step : location;
            }
          }

          //this is for single-handled vertical sliders, it adjusts the value to account for the slider being "upside-down"
          //for click and drag events, it's weird due to the scale(-1, 1) css property
          if (this.options.vertical && !noInvert) {
            location = this.options.end - location;
          }

          var _this = this,
              vert = this.options.vertical,
              hOrW = vert ? 'height' : 'width',
              lOrT = vert ? 'top' : 'left',
              handleDim = $hndl[0].getBoundingClientRect()[hOrW],
              elemDim = this.$element[0].getBoundingClientRect()[hOrW],


          //percentage of bar min/max value based on click or drag point
          pctOfBar = this._pctOfBar(location),


          //number of actual pixels to shift the handle, based on the percentage obtained above
          pxToMove = (elemDim - handleDim) * pctOfBar,


          //percentage of bar to shift the handle
          movement = (percent(pxToMove, elemDim) * 100).toFixed(this.options.decimal);
          //fixing the decimal value for the location number, is passed to other methods as a fixed floating-point value
          location = parseFloat(location.toFixed(this.options.decimal));
          // declare empty object for css adjustments, only used with 2 handled-sliders
          var css = {};

          this._setValues($hndl, location);

          // TODO update to calculate based on values set to respective inputs??
          if (isDbl) {
            var isLeftHndl = this.handles.index($hndl) === 0,


            //empty variable, will be used for min-height/width for fill bar
            dim,


            //percentage w/h of the handle compared to the slider bar
            handlePct = ~~(percent(handleDim, elemDim) * 100);
            //if left handle, the math is slightly different than if it's the right handle, and the left/top property needs to be changed for the fill bar
            if (isLeftHndl) {
              //left or top percentage value to apply to the fill bar.
              css[lOrT] = movement + '%';
              //calculate the new min-height/width for the fill bar.
              dim = parseFloat(this.$handle2[0].style[lOrT]) - movement + handlePct;
              //this callback is necessary to prevent errors and allow the proper placement and initialization of a 2-handled slider
              //plus, it means we don't care if 'dim' isNaN on init, it won't be in the future.
              if (cb && typeof cb === 'function') {
                cb();
              } //this is only needed for the initialization of 2 handled sliders
            } else {
              //just caching the value of the left/bottom handle's left/top property
              var handlePos = parseFloat(this.$handle[0].style[lOrT]);
              //calculate the new min-height/width for the fill bar. Use isNaN to prevent false positives for numbers <= 0
              //based on the percentage of movement of the handle being manipulated, less the opposing handle's left/top position, plus the percentage w/h of the handle itself
              dim = movement - (isNaN(handlePos) ? (this.options.initialStart - this.options.start) / ((this.options.end - this.options.start) / 100) : handlePos) + handlePct;
            }
            // assign the min-height/width to our css object
            css['min-' + hOrW] = dim + '%';
          }

          this.$element.one('finished.zf.animate', function () {
            /**
             * Fires when the handle is done moving.
             * @event Slider#moved
             */
            _this.$element.trigger('moved.zf.slider', [$hndl]);
          });

          //because we don't know exactly how the handle will be moved, check the amount of time it should take to move.
          var moveTime = this.$element.data('dragging') ? 1000 / 60 : this.options.moveTime;

          __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_motion__["Move"])(moveTime, $hndl, function () {
            // adjusting the left/top property of the handle, based on the percentage calculated above
            // if movement isNaN, that is because the slider is hidden and we cannot determine handle width,
            // fall back to next best guess.
            if (isNaN(movement)) {
              $hndl.css(lOrT, pctOfBar * 100 + '%');
            } else {
              $hndl.css(lOrT, movement + '%');
            }

            if (!_this.options.doubleSided) {
              //if single-handled, a simple method to expand the fill bar
              _this.$fill.css(hOrW, pctOfBar * 100 + '%');
            } else {
              //otherwise, use the css object we created above
              _this.$fill.css(css);
            }
          });

          /**
           * Fires when the value has not been change for a given time.
           * @event Slider#changed
           */
          clearTimeout(_this.timeout);
          _this.timeout = setTimeout(function () {
            _this.$element.trigger('changed.zf.slider', [$hndl]);
          }, _this.options.changedDelay);
        }

        /**
         * Sets the initial attribute for the slider element.
         * @function
         * @private
         * @param {Number} idx - index of the current handle/input to use.
         */

      }, {
        key: '_setInitAttr',
        value: function _setInitAttr(idx) {
          var initVal = idx === 0 ? this.options.initialStart : this.options.initialEnd;
          var id = this.inputs.eq(idx).attr('id') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["GetYoDigits"])(6, 'slider');
          this.inputs.eq(idx).attr({
            'id': id,
            'max': this.options.end,
            'min': this.options.start,
            'step': this.options.step
          });
          this.inputs.eq(idx).val(initVal);
          this.handles.eq(idx).attr({
            'role': 'slider',
            'aria-controls': id,
            'aria-valuemax': this.options.end,
            'aria-valuemin': this.options.start,
            'aria-valuenow': initVal,
            'aria-orientation': this.options.vertical ? 'vertical' : 'horizontal',
            'tabindex': 0
          });
        }

        /**
         * Sets the input and `aria-valuenow` values for the slider element.
         * @function
         * @private
         * @param {jQuery} $handle - the currently selected handle.
         * @param {Number} val - floating point of the new value.
         */

      }, {
        key: '_setValues',
        value: function _setValues($handle, val) {
          var idx = this.options.doubleSided ? this.handles.index($handle) : 0;
          this.inputs.eq(idx).val(val);
          $handle.attr('aria-valuenow', val);
        }

        /**
         * Handles events on the slider element.
         * Calculates the new location of the current handle.
         * If there are two handles and the bar was clicked, it determines which handle to move.
         * @function
         * @private
         * @param {Object} e - the `event` object passed from the listener.
         * @param {jQuery} $handle - the current handle to calculate for, if selected.
         * @param {Number} val - floating point number for the new value of the slider.
         * TODO clean this up, there's a lot of repeated code between this and the _setHandlePos fn.
         */

      }, {
        key: '_handleEvent',
        value: function _handleEvent(e, $handle, val) {
          var value, hasVal;
          if (!val) {
            //click or drag events
            e.preventDefault();
            var _this = this,
                vertical = this.options.vertical,
                param = vertical ? 'height' : 'width',
                direction = vertical ? 'top' : 'left',
                eventOffset = vertical ? e.pageY : e.pageX,
                halfOfHandle = this.$handle[0].getBoundingClientRect()[param] / 2,
                barDim = this.$element[0].getBoundingClientRect()[param],
                windowScroll = vertical ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).scrollTop() : __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).scrollLeft();

            var elemOffset = this.$element.offset()[direction];

            // touch events emulated by the touch util give position relative to screen, add window.scroll to event coordinates...
            // best way to guess this is simulated is if clientY == pageY
            if (e.clientY === e.pageY) {
              eventOffset = eventOffset + windowScroll;
            }
            var eventFromBar = eventOffset - elemOffset;
            var barXY;
            if (eventFromBar < 0) {
              barXY = 0;
            } else if (eventFromBar > barDim) {
              barXY = barDim;
            } else {
              barXY = eventFromBar;
            }
            var offsetPct = percent(barXY, barDim);

            value = this._value(offsetPct);

            // turn everything around for RTL, yay math!
            if (__webpack_require__.i(__WEBPACK_IMPORTED_MODULE_3__foundation_util_core__["rtl"])() && !this.options.vertical) {
              value = this.options.end - value;
            }

            value = _this._adjustValue(null, value);
            //boolean flag for the setHandlePos fn, specifically for vertical sliders
            hasVal = false;

            if (!$handle) {
              //figure out which handle it is, pass it to the next function.
              var firstHndlPos = absPosition(this.$handle, direction, barXY, param),
                  secndHndlPos = absPosition(this.$handle2, direction, barXY, param);
              $handle = firstHndlPos <= secndHndlPos ? this.$handle : this.$handle2;
            }
          } else {
            //change event on input
            value = this._adjustValue(null, val);
            hasVal = true;
          }

          this._setHandlePos($handle, value, hasVal);
        }

        /**
         * Adjustes value for handle in regard to step value. returns adjusted value
         * @function
         * @private
         * @param {jQuery} $handle - the selected handle.
         * @param {Number} value - value to adjust. used if $handle is falsy
         */

      }, {
        key: '_adjustValue',
        value: function _adjustValue($handle, value) {
          var val,
              step = this.options.step,
              div = parseFloat(step / 2),
              left,
              prev_val,
              next_val;
          if (!!$handle) {
            val = parseFloat($handle.attr('aria-valuenow'));
          } else {
            val = value;
          }
          left = val % step;
          prev_val = val - left;
          next_val = prev_val + step;
          if (left === 0) {
            return val;
          }
          val = val >= prev_val + div ? next_val : prev_val;
          return val;
        }

        /**
         * Adds event listeners to the slider elements.
         * @function
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          this._eventsForHandle(this.$handle);
          if (this.handles[1]) {
            this._eventsForHandle(this.$handle2);
          }
        }

        /**
         * Adds event listeners a particular handle
         * @function
         * @private
         * @param {jQuery} $handle - the current handle to apply listeners to.
         */

      }, {
        key: '_eventsForHandle',
        value: function _eventsForHandle($handle) {
          var _this = this,
              curHandle,
              timer;

          this.inputs.off('change.zf.slider').on('change.zf.slider', function (e) {
            var idx = _this.inputs.index(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));
            _this._handleEvent(e, _this.handles.eq(idx), __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).val());
          });

          if (this.options.clickSelect) {
            this.$element.off('click.zf.slider').on('click.zf.slider', function (e) {
              if (_this.$element.data('dragging')) {
                return false;
              }

              if (!__WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.target).is('[data-slider-handle]')) {
                if (_this.options.doubleSided) {
                  _this._handleEvent(e);
                } else {
                  _this._handleEvent(e, _this.$handle);
                }
              }
            });
          }

          if (this.options.draggable) {
            this.handles.addTouch();

            var $body = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('body');
            $handle.off('mousedown.zf.slider').on('mousedown.zf.slider', function (e) {
              $handle.addClass('is-dragging');
              _this.$fill.addClass('is-dragging'); //
              _this.$element.data('dragging', true);

              curHandle = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(e.currentTarget);

              $body.on('mousemove.zf.slider', function (e) {
                e.preventDefault();
                _this._handleEvent(e, curHandle);
              }).on('mouseup.zf.slider', function (e) {
                _this._handleEvent(e, curHandle);

                $handle.removeClass('is-dragging');
                _this.$fill.removeClass('is-dragging');
                _this.$element.data('dragging', false);

                $body.off('mousemove.zf.slider mouseup.zf.slider');
              });
            })
            // prevent events triggered by touch
            .on('selectstart.zf.slider touchmove.zf.slider', function (e) {
              e.preventDefault();
            });
          }

          $handle.off('keydown.zf.slider').on('keydown.zf.slider', function (e) {
            var _$handle = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                idx = _this.options.doubleSided ? _this.handles.index(_$handle) : 0,
                oldValue = parseFloat(_this.inputs.eq(idx).val()),
                newValue;

            // handle keyboard event with keyboard util
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e, 'Slider', {
              decrease: function () {
                newValue = oldValue - _this.options.step;
              },
              increase: function () {
                newValue = oldValue + _this.options.step;
              },
              decrease_fast: function () {
                newValue = oldValue - _this.options.step * 10;
              },
              increase_fast: function () {
                newValue = oldValue + _this.options.step * 10;
              },
              min: function () {
                newValue = _this.options.start;
              },
              max: function () {
                newValue = _this.options.end;
              },
              handled: function () {
                // only set handle pos when event was handled specially
                e.preventDefault();
                _this._setHandlePos(_$handle, newValue, true);
              }
            });
            /*if (newValue) { // if pressed key has special function, update value
              e.preventDefault();
              _this._setHandlePos(_$handle, newValue);
            }*/
          });
        }

        /**
         * Destroys the slider plugin.
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.handles.off('.zf.slider');
          this.inputs.off('.zf.slider');
          this.$element.off('.zf.slider');

          clearTimeout(this.timeout);
        }
      }]);

      return Slider;
    }(__WEBPACK_IMPORTED_MODULE_4__foundation_plugin__["Plugin"]);

    Slider.defaults = {
      /**
       * Minimum value for the slider scale.
       * @option
       * @type {number}
       * @default 0
       */
      start: 0,
      /**
       * Maximum value for the slider scale.
       * @option
       * @type {number}
       * @default 100
       */
      end: 100,
      /**
       * Minimum value change per change event.
       * @option
       * @type {number}
       * @default 1
       */
      step: 1,
      /**
       * Value at which the handle/input *(left handle/first input)* should be set to on initialization.
       * @option
       * @type {number}
       * @default 0
       */
      initialStart: 0,
      /**
       * Value at which the right handle/second input should be set to on initialization.
       * @option
       * @type {number}
       * @default 100
       */
      initialEnd: 100,
      /**
       * Allows the input to be located outside the container and visible. Set to by the JS
       * @option
       * @type {boolean}
       * @default false
       */
      binding: false,
      /**
       * Allows the user to click/tap on the slider bar to select a value.
       * @option
       * @type {boolean}
       * @default true
       */
      clickSelect: true,
      /**
       * Set to true and use the `vertical` class to change alignment to vertical.
       * @option
       * @type {boolean}
       * @default false
       */
      vertical: false,
      /**
       * Allows the user to drag the slider handle(s) to select a value.
       * @option
       * @type {boolean}
       * @default true
       */
      draggable: true,
      /**
       * Disables the slider and prevents event listeners from being applied. Double checked by JS with `disabledClass`.
       * @option
       * @type {boolean}
       * @default false
       */
      disabled: false,
      /**
       * Allows the use of two handles. Double checked by the JS. Changes some logic handling.
       * @option
       * @type {boolean}
       * @default false
       */
      doubleSided: false,
      /**
       * Potential future feature.
       */
      // steps: 100,
      /**
       * Number of decimal places the plugin should go to for floating point precision.
       * @option
       * @type {number}
       * @default 2
       */
      decimal: 2,
      /**
       * Time delay for dragged elements.
       */
      // dragDelay: 0,
      /**
       * Time, in ms, to animate the movement of a slider handle if user clicks/taps on the bar. Needs to be manually set if updating the transition time in the Sass settings.
       * @option
       * @type {number}
       * @default 200
       */
      moveTime: 200, //update this if changing the transition time in the sass
      /**
       * Class applied to disabled sliders.
       * @option
       * @type {string}
       * @default 'disabled'
       */
      disabledClass: 'disabled',
      /**
       * Will invert the default layout for a vertical<span data-tooltip title="who would do this???"> </span>slider.
       * @option
       * @type {boolean}
       * @default false
       */
      invertVertical: false,
      /**
       * Milliseconds before the `changed.zf-slider` event is triggered after value change.
       * @option
       * @type {number}
       * @default 500
       */
      changedDelay: 500,
      /**
      * Basevalue for non-linear sliders
      * @option
      * @type {number}
      * @default 5
      */
      nonLinearBase: 5,
      /**
      * Basevalue for non-linear sliders, possible values are: `'linear'`, `'pow'` & `'log'`. Pow and Log use the nonLinearBase setting.
      * @option
      * @type {string}
      * @default 'linear'
      */
      positionValueFunction: 'linear'
    };

    function percent(frac, num) {
      return frac / num;
    }
    function absPosition($handle, dir, clickPos, param) {
      return Math.abs($handle.position()[dir] + $handle[param]() / 2 - clickPos);
    }
    function baseLog(base, value) {
      return Math.log(value) / Math.log(base);
    }

    /***/
  },

  /***/7:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Triggers;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);

    var MutationObserver = function () {
      var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
      for (var i = 0; i < prefixes.length; i++) {
        if (prefixes[i] + 'MutationObserver' in window) {
          return window[prefixes[i] + 'MutationObserver'];
        }
      }
      return false;
    }();

    var triggers = function (el, type) {
      el.data(type).split(' ').forEach(function (id) {
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
      });
    };

    var Triggers = {
      Listeners: {
        Basic: {},
        Global: {}
      },
      Initializers: {}
    };

    Triggers.Listeners.Basic = {
      openListener: function () {
        triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'open');
      },
      closeListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'close');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');
        }
      },
      toggleListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'toggle');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');
        }
      },
      closeableListener: function (e) {
        e.stopPropagation();
        var animation = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');

        if (animation !== '') {
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), animation, function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');
          });
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');
        }
      },
      toggleFocusListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id).triggerHandler('toggle.zf.trigger', [__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);
      }
    };

    // Elements with [data-open] will reveal a plugin that supports it when clicked.
    Triggers.Initializers.addOpenListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);
      $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);
    };

    // Elements with [data-close] will close a plugin that supports it when clicked.
    // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
    Triggers.Initializers.addCloseListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);
      $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);
    };

    // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
    Triggers.Initializers.addToggleListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);
      $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);
    };

    // Elements with [data-closable] will respond to close.zf.trigger events.
    Triggers.Initializers.addCloseableListener = function ($elem) {
      $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);
      $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);
    };

    // Elements with [data-toggle-focus] will respond to coming in and out of focus
    Triggers.Initializers.addToggleFocusListener = function ($elem) {
      $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);
      $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
    };

    // More Global/complex listeners and triggers
    Triggers.Listeners.Global = {
      resizeListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a resize event
        $nodes.attr('data-events', "resize");
      },
      scrollListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a scroll event
        $nodes.attr('data-events', "scroll");
      },
      closeMeListener: function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);
          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      }
    };

    // Global, parses whole document.
    Triggers.Initializers.addClosemeListener = function (pluginName) {
      var yetiBoxes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),
          plugNames = ['dropdown', 'tooltip', 'reveal'];

      if (pluginName) {
        if (typeof pluginName === 'string') {
          plugNames.push(pluginName);
        } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
          plugNames.concat(pluginName);
        } else {
          console.error('Plugin names must be strings');
        }
      }
      if (yetiBoxes.length) {
        var listeners = plugNames.map(function (name) {
          return 'closeme.zf.' + name;
        }).join(' ');

        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
      }
    };

    function debounceGlobalListener(debounce, trigger, listener) {
      var timer = void 0,
          args = Array.prototype.slice.call(arguments, 3);
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger, function (e) {
        if (timer) {
          clearTimeout(timer);
        }
        timer = setTimeout(function () {
          listener.apply(null, args);
        }, debounce || 10); //default time to emit scroll event
      });
    }

    Triggers.Initializers.addResizeListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);
      }
    };

    Triggers.Initializers.addScrollListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);
      }
    };

    Triggers.Initializers.addMutationEventsListener = function ($elem) {
      if (!MutationObserver) {
        return false;
      }
      var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]');

      //element callback
      var listeningElementsMutation = function (mutationRecordsList) {
        var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);

        //trigger the event handler for the element depending on type
        switch (mutationRecordsList[0].type) {
          case "attributes":
            if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
            }
            if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('resizeme.zf.trigger', [$target]);
            }
            if (mutationRecordsList[0].attributeName === "style") {
              $target.closest("[data-mutate]").attr("data-events", "mutate");
              $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            }
            break;

          case "childList":
            $target.closest("[data-mutate]").attr("data-events", "mutate");
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            break;

          default:
            return false;
          //nothing
        }
      };

      if ($nodes.length) {
        //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
        for (var i = 0; i <= $nodes.length - 1; i++) {
          var elementObserver = new MutationObserver(listeningElementsMutation);
          elementObserver.observe($nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
        }
      }
    };

    Triggers.Initializers.addSimpleListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);

      Triggers.Initializers.addOpenListener($document);
      Triggers.Initializers.addCloseListener($document);
      Triggers.Initializers.addToggleListener($document);
      Triggers.Initializers.addCloseableListener($document);
      Triggers.Initializers.addToggleFocusListener($document);
    };

    Triggers.Initializers.addGlobalListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);
      Triggers.Initializers.addMutationEventsListener($document);
      Triggers.Initializers.addResizeListener();
      Triggers.Initializers.addScrollListener();
      Triggers.Initializers.addClosemeListener();
    };

    Triggers.init = function ($, Foundation) {
      if (typeof $.triggersInitialized === 'undefined') {
        var $document = $(document);

        if (document.readyState === "complete") {
          Triggers.Initializers.addSimpleListeners();
          Triggers.Initializers.addGlobalListeners();
        } else {
          $(window).on('load', function () {
            Triggers.Initializers.addSimpleListeners();
            Triggers.Initializers.addGlobalListeners();
          });
        }

        $.triggersInitialized = true;
      }

      if (Foundation) {
        Foundation.Triggers = Triggers;
        // Legacy included to be backwards compatible for now.
        Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;
      }
    };

    /***/
  },

  /***/94:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(28);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 97);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/10:
  /***/function (module, exports) {

    module.exports = { onImagesLoaded: window.Foundation.onImagesLoaded };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/31:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_tabs__ = __webpack_require__(61);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_tabs__["a" /* Tabs */], 'Tabs');

    /***/
  },

  /***/5:
  /***/function (module, exports) {

    module.exports = { Keyboard: window.Foundation.Keyboard };

    /***/
  },

  /***/61:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Tabs;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__ = __webpack_require__(5);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__ = __webpack_require__(10);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Tabs module.
     * @module foundation.tabs
     * @requires foundation.util.keyboard
     * @requires foundation.util.imageLoader if tabs contain images
     */

    var Tabs = function (_Plugin) {
      _inherits(Tabs, _Plugin);

      function Tabs() {
        _classCallCheck(this, Tabs);

        return _possibleConstructorReturn(this, (Tabs.__proto__ || Object.getPrototypeOf(Tabs)).apply(this, arguments));
      }

      _createClass(Tabs, [{
        key: '_setup',

        /**
         * Creates a new instance of tabs.
         * @class
         * @name Tabs
         * @fires Tabs#init
         * @param {jQuery} element - jQuery object to make into tabs.
         * @param {Object} options - Overrides to the default plugin settings.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Tabs.defaults, this.$element.data(), options);
          this.className = 'Tabs'; // ie9 back compat

          this._init();
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].register('Tabs', {
            'ENTER': 'open',
            'SPACE': 'open',
            'ARROW_RIGHT': 'next',
            'ARROW_UP': 'previous',
            'ARROW_DOWN': 'next',
            'ARROW_LEFT': 'previous'
            // 'TAB': 'next',
            // 'SHIFT_TAB': 'previous'
          });
        }

        /**
         * Initializes the tabs by showing and focusing (if autoFocus=true) the preset active tab.
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          var _this3 = this;

          var _this = this;

          this.$element.attr({ 'role': 'tablist' });
          this.$tabTitles = this.$element.find('.' + this.options.linkClass);
          this.$tabContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-tabs-content="' + this.$element[0].id + '"]');

          this.$tabTitles.each(function () {
            var $elem = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                $link = $elem.find('a'),
                isActive = $elem.hasClass('' + _this.options.linkActiveClass),
                hash = $link.attr('data-tabs-target') || $link[0].hash.slice(1),
                linkId = $link[0].id ? $link[0].id : hash + '-label',
                $tabContent = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + hash);

            $elem.attr({ 'role': 'presentation' });

            $link.attr({
              'role': 'tab',
              'aria-controls': hash,
              'aria-selected': isActive,
              'id': linkId,
              'tabindex': isActive ? '0' : '-1'
            });

            $tabContent.attr({
              'role': 'tabpanel',
              'aria-labelledby': linkId
            });

            if (!isActive) {
              $tabContent.attr('aria-hidden', 'true');
            }

            if (isActive && _this.options.autoFocus) {
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).load(function () {
                __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({ scrollTop: $elem.offset().top }, _this.options.deepLinkSmudgeDelay, function () {
                  $link.focus();
                });
              });
            }
          });
          if (this.options.matchHeight) {
            var $images = this.$tabContent.find('img');

            if ($images.length) {
              __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_imageLoader__["onImagesLoaded"])($images, this._setHeight.bind(this));
            } else {
              this._setHeight();
            }
          }

          //current context-bound function to open tabs on page load or history popstate
          this._checkDeepLink = function () {
            var anchor = window.location.hash;
            //need a hash and a relevant anchor in this tabset
            if (anchor.length) {
              var $link = _this3.$element.find('[href$="' + anchor + '"]');
              if ($link.length) {
                _this3.selectTab(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor), true);

                //roll up a little to show the titles
                if (_this3.options.deepLinkSmudge) {
                  var offset = _this3.$element.offset();
                  __WEBPACK_IMPORTED_MODULE_0_jquery___default()('html, body').animate({ scrollTop: offset.top }, _this3.options.deepLinkSmudgeDelay);
                }

                /**
                  * Fires when the zplugin has deeplinked at pageload
                  * @event Tabs#deeplink
                  */
                _this3.$element.trigger('deeplink.zf.tabs', [$link, __WEBPACK_IMPORTED_MODULE_0_jquery___default()(anchor)]);
              }
            }
          };

          //use browser to open a tab, if it exists in this tabset
          if (this.options.deepLink) {
            this._checkDeepLink();
          }

          this._events();
        }

        /**
         * Adds event handlers for items within the tabs.
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          this._addKeyHandler();
          this._addClickHandler();
          this._setHeightMqHandler = null;

          if (this.options.matchHeight) {
            this._setHeightMqHandler = this._setHeight.bind(this);

            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('changed.zf.mediaquery', this._setHeightMqHandler);
          }

          if (this.options.deepLink) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).on('popstate', this._checkDeepLink);
          }
        }

        /**
         * Adds click handlers for items within the tabs.
         * @private
         */

      }, {
        key: '_addClickHandler',
        value: function _addClickHandler() {
          var _this = this;

          this.$element.off('click.zf.tabs').on('click.zf.tabs', '.' + this.options.linkClass, function (e) {
            e.preventDefault();
            e.stopPropagation();
            _this._handleTabChange(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this));
          });
        }

        /**
         * Adds keyboard event handlers for items within the tabs.
         * @private
         */

      }, {
        key: '_addKeyHandler',
        value: function _addKeyHandler() {
          var _this = this;

          this.$tabTitles.off('keydown.zf.tabs').on('keydown.zf.tabs', function (e) {
            if (e.which === 9) return;

            var $element = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                $elements = $element.parent('ul').children('li'),
                $prevElement,
                $nextElement;

            $elements.each(function (i) {
              if (__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).is($element)) {
                if (_this.options.wrapOnKeys) {
                  $prevElement = i === 0 ? $elements.last() : $elements.eq(i - 1);
                  $nextElement = i === $elements.length - 1 ? $elements.first() : $elements.eq(i + 1);
                } else {
                  $prevElement = $elements.eq(Math.max(0, i - 1));
                  $nextElement = $elements.eq(Math.min(i + 1, $elements.length - 1));
                }
                return;
              }
            });

            // handle keyboard event with keyboard util
            __WEBPACK_IMPORTED_MODULE_1__foundation_util_keyboard__["Keyboard"].handleKey(e, 'Tabs', {
              open: function () {
                $element.find('[role="tab"]').focus();
                _this._handleTabChange($element);
              },
              previous: function () {
                $prevElement.find('[role="tab"]').focus();
                _this._handleTabChange($prevElement);
              },
              next: function () {
                $nextElement.find('[role="tab"]').focus();
                _this._handleTabChange($nextElement);
              },
              handled: function () {
                e.stopPropagation();
                e.preventDefault();
              }
            });
          });
        }

        /**
         * Opens the tab `$targetContent` defined by `$target`. Collapses active tab.
         * @param {jQuery} $target - Tab to open.
         * @param {boolean} historyHandled - browser has already handled a history update
         * @fires Tabs#change
         * @function
         */

      }, {
        key: '_handleTabChange',
        value: function _handleTabChange($target, historyHandled) {

          /**
           * Check for active class on target. Collapse if exists.
           */
          if ($target.hasClass('' + this.options.linkActiveClass)) {
            if (this.options.activeCollapse) {
              this._collapseTab($target);

              /**
               * Fires when the zplugin has successfully collapsed tabs.
               * @event Tabs#collapse
               */
              this.$element.trigger('collapse.zf.tabs', [$target]);
            }
            return;
          }

          var $oldTab = this.$element.find('.' + this.options.linkClass + '.' + this.options.linkActiveClass),
              $tabLink = $target.find('[role="tab"]'),
              hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),
              $targetContent = this.$tabContent.find('#' + hash);

          //close old tab
          this._collapseTab($oldTab);

          //open new tab
          this._openTab($target);

          //either replace or update browser history
          if (this.options.deepLink && !historyHandled) {
            var anchor = $target.find('a').attr('href');

            if (this.options.updateHistory) {
              history.pushState({}, '', anchor);
            } else {
              history.replaceState({}, '', anchor);
            }
          }

          /**
           * Fires when the plugin has successfully changed tabs.
           * @event Tabs#change
           */
          this.$element.trigger('change.zf.tabs', [$target, $targetContent]);

          //fire to children a mutation event
          $targetContent.find("[data-mutate]").trigger("mutateme.zf.trigger");
        }

        /**
         * Opens the tab `$targetContent` defined by `$target`.
         * @param {jQuery} $target - Tab to Open.
         * @function
         */

      }, {
        key: '_openTab',
        value: function _openTab($target) {
          var $tabLink = $target.find('[role="tab"]'),
              hash = $tabLink.attr('data-tabs-target') || $tabLink[0].hash.slice(1),
              $targetContent = this.$tabContent.find('#' + hash);

          $target.addClass('' + this.options.linkActiveClass);

          $tabLink.attr({
            'aria-selected': 'true',
            'tabindex': '0'
          });

          $targetContent.addClass('' + this.options.panelActiveClass).removeAttr('aria-hidden');
        }

        /**
         * Collapses `$targetContent` defined by `$target`.
         * @param {jQuery} $target - Tab to Open.
         * @function
         */

      }, {
        key: '_collapseTab',
        value: function _collapseTab($target) {
          var $target_anchor = $target.removeClass('' + this.options.linkActiveClass).find('[role="tab"]').attr({
            'aria-selected': 'false',
            'tabindex': -1
          });

          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + $target_anchor.attr('aria-controls')).removeClass('' + this.options.panelActiveClass).attr({ 'aria-hidden': 'true' });
        }

        /**
         * Public method for selecting a content pane to display.
         * @param {jQuery | String} elem - jQuery object or string of the id of the pane to display.
         * @param {boolean} historyHandled - browser has already handled a history update
         * @function
         */

      }, {
        key: 'selectTab',
        value: function selectTab(elem, historyHandled) {
          var idStr;

          if (typeof elem === 'object') {
            idStr = elem[0].id;
          } else {
            idStr = elem;
          }

          if (idStr.indexOf('#') < 0) {
            idStr = '#' + idStr;
          }

          var $target = this.$tabTitles.find('[href$="' + idStr + '"]').parent('.' + this.options.linkClass);

          this._handleTabChange($target, historyHandled);
        }
      }, {
        key: '_setHeight',

        /**
         * Sets the height of each panel to the height of the tallest panel.
         * If enabled in options, gets called on media query change.
         * If loading content via external source, can be called directly or with _reflow.
         * If enabled with `data-match-height="true"`, tabs sets to equal height
         * @function
         * @private
         */
        value: function _setHeight() {
          var max = 0,
              _this = this; // Lock down the `this` value for the root tabs object

          this.$tabContent.find('.' + this.options.panelClass).css('height', '').each(function () {

            var panel = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this),
                isActive = panel.hasClass('' + _this.options.panelActiveClass); // get the options from the parent instead of trying to get them from the child

            if (!isActive) {
              panel.css({ 'visibility': 'hidden', 'display': 'block' });
            }

            var temp = this.getBoundingClientRect().height;

            if (!isActive) {
              panel.css({
                'visibility': '',
                'display': ''
              });
            }

            max = temp > max ? temp : max;
          }).css('height', max + 'px');
        }

        /**
         * Destroys an instance of an tabs.
         * @fires Tabs#destroyed
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.$element.find('.' + this.options.linkClass).off('.zf.tabs').hide().end().find('.' + this.options.panelClass).hide();

          if (this.options.matchHeight) {
            if (this._setHeightMqHandler != null) {
              __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('changed.zf.mediaquery', this._setHeightMqHandler);
            }
          }

          if (this.options.deepLink) {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off('popstate', this._checkDeepLink);
          }
        }
      }]);

      return Tabs;
    }(__WEBPACK_IMPORTED_MODULE_3__foundation_plugin__["Plugin"]);

    Tabs.defaults = {
      /**
       * Allows the window to scroll to content of pane specified by hash anchor
       * @option
       * @type {boolean}
       * @default false
       */
      deepLink: false,

      /**
       * Adjust the deep link scroll to make sure the top of the tab panel is visible
       * @option
       * @type {boolean}
       * @default false
       */
      deepLinkSmudge: false,

      /**
       * Animation time (ms) for the deep link adjustment
       * @option
       * @type {number}
       * @default 300
       */
      deepLinkSmudgeDelay: 300,

      /**
       * Update the browser history with the open tab
       * @option
       * @type {boolean}
       * @default false
       */
      updateHistory: false,

      /**
       * Allows the window to scroll to content of active pane on load if set to true.
       * Not recommended if more than one tab panel per page.
       * @option
       * @type {boolean}
       * @default false
       */
      autoFocus: false,

      /**
       * Allows keyboard input to 'wrap' around the tab links.
       * @option
       * @type {boolean}
       * @default true
       */
      wrapOnKeys: true,

      /**
       * Allows the tab content panes to match heights if set to true.
       * @option
       * @type {boolean}
       * @default false
       */
      matchHeight: false,

      /**
       * Allows active tabs to collapse when clicked.
       * @option
       * @type {boolean}
       * @default false
       */
      activeCollapse: false,

      /**
       * Class applied to `li`'s in tab link list.
       * @option
       * @type {string}
       * @default 'tabs-title'
       */
      linkClass: 'tabs-title',

      /**
       * Class applied to the active `li` in tab link list.
       * @option
       * @type {string}
       * @default 'is-active'
       */
      linkActiveClass: 'is-active',

      /**
       * Class applied to the content containers.
       * @option
       * @type {string}
       * @default 'tabs-panel'
       */
      panelClass: 'tabs-panel',

      /**
       * Class applied to the active content container.
       * @option
       * @type {string}
       * @default 'is-active'
       */
      panelActiveClass: 'is-active'
    };

    /***/
  },

  /***/97:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(31);

    /***/
  }

  /******/ });
'use strict';

/******/(function (modules) {
  // webpackBootstrap
  /******/ // The module cache
  /******/var installedModules = {};
  /******/
  /******/ // The require function
  /******/function __webpack_require__(moduleId) {
    /******/
    /******/ // Check if module is in cache
    /******/if (installedModules[moduleId]) {
      /******/return installedModules[moduleId].exports;
      /******/
    }
    /******/ // Create a new module (and put it into the cache)
    /******/var module = installedModules[moduleId] = {
      /******/i: moduleId,
      /******/l: false,
      /******/exports: {}
      /******/ };
    /******/
    /******/ // Execute the module function
    /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
    /******/
    /******/ // Flag the module as loaded
    /******/module.l = true;
    /******/
    /******/ // Return the exports of the module
    /******/return module.exports;
    /******/
  }
  /******/
  /******/
  /******/ // expose the modules object (__webpack_modules__)
  /******/__webpack_require__.m = modules;
  /******/
  /******/ // expose the module cache
  /******/__webpack_require__.c = installedModules;
  /******/
  /******/ // identity function for calling harmony imports with the correct context
  /******/__webpack_require__.i = function (value) {
    return value;
  };
  /******/
  /******/ // define getter function for harmony exports
  /******/__webpack_require__.d = function (exports, name, getter) {
    /******/if (!__webpack_require__.o(exports, name)) {
      /******/Object.defineProperty(exports, name, {
        /******/configurable: false,
        /******/enumerable: true,
        /******/get: getter
        /******/ });
      /******/
    }
    /******/
  };
  /******/
  /******/ // getDefaultExport function for compatibility with non-harmony modules
  /******/__webpack_require__.n = function (module) {
    /******/var getter = module && module.__esModule ?
    /******/function getDefault() {
      return module['default'];
    } :
    /******/function getModuleExports() {
      return module;
    };
    /******/__webpack_require__.d(getter, 'a', getter);
    /******/return getter;
    /******/
  };
  /******/
  /******/ // Object.prototype.hasOwnProperty.call
  /******/__webpack_require__.o = function (object, property) {
    return Object.prototype.hasOwnProperty.call(object, property);
  };
  /******/
  /******/ // __webpack_public_path__
  /******/__webpack_require__.p = "";
  /******/
  /******/ // Load entry module and return exports
  /******/return __webpack_require__(__webpack_require__.s = 99);
  /******/
})(
/************************************************************************/
/******/{

  /***/0:
  /***/function (module, exports) {

    module.exports = jQuery;

    /***/
  },

  /***/1:
  /***/function (module, exports) {

    module.exports = { Foundation: window.Foundation };

    /***/
  },

  /***/11:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Positionable;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__ = __webpack_require__(8);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_util_box___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin__ = __webpack_require__(2);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_plugin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    var POSITIONS = ['left', 'right', 'top', 'bottom'];
    var VERTICAL_ALIGNMENTS = ['top', 'bottom', 'center'];
    var HORIZONTAL_ALIGNMENTS = ['left', 'right', 'center'];

    var ALIGNMENTS = {
      'left': VERTICAL_ALIGNMENTS,
      'right': VERTICAL_ALIGNMENTS,
      'top': HORIZONTAL_ALIGNMENTS,
      'bottom': HORIZONTAL_ALIGNMENTS
    };

    function nextItem(item, array) {
      var currentIdx = array.indexOf(item);
      if (currentIdx === array.length - 1) {
        return array[0];
      } else {
        return array[currentIdx + 1];
      }
    }

    var Positionable = function (_Plugin) {
      _inherits(Positionable, _Plugin);

      function Positionable() {
        _classCallCheck(this, Positionable);

        return _possibleConstructorReturn(this, (Positionable.__proto__ || Object.getPrototypeOf(Positionable)).apply(this, arguments));
      }

      _createClass(Positionable, [{
        key: '_init',

        /**
         * Abstract class encapsulating the tether-like explicit positioning logic
         * including repositioning based on overlap.
         * Expects classes to define defaults for vOffset, hOffset, position,
         * alignment, allowOverlap, and allowBottomOverlap. They can do this by
         * extending the defaults, or (for now recommended due to the way docs are
         * generated) by explicitly declaring them.
         *
         **/

        value: function _init() {
          this.triedPositions = {};
          this.position = this.options.position === 'auto' ? this._getDefaultPosition() : this.options.position;
          this.alignment = this.options.alignment === 'auto' ? this._getDefaultAlignment() : this.options.alignment;
        }
      }, {
        key: '_getDefaultPosition',
        value: function _getDefaultPosition() {
          return 'bottom';
        }
      }, {
        key: '_getDefaultAlignment',
        value: function _getDefaultAlignment() {
          switch (this.position) {
            case 'bottom':
            case 'top':
              return __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_2__foundation_util_core__["rtl"])() ? 'right' : 'left';
            case 'left':
            case 'right':
              return 'bottom';
          }
        }

        /**
         * Adjusts the positionable possible positions by iterating through alignments
         * and positions.
         * @function
         * @private
         */

      }, {
        key: '_reposition',
        value: function _reposition() {
          if (this._alignmentsExhausted(this.position)) {
            this.position = nextItem(this.position, POSITIONS);
            this.alignment = ALIGNMENTS[this.position][0];
          } else {
            this._realign();
          }
        }

        /**
         * Adjusts the dropdown pane possible positions by iterating through alignments
         * on the current position.
         * @function
         * @private
         */

      }, {
        key: '_realign',
        value: function _realign() {
          this._addTriedPosition(this.position, this.alignment);
          this.alignment = nextItem(this.alignment, ALIGNMENTS[this.position]);
        }
      }, {
        key: '_addTriedPosition',
        value: function _addTriedPosition(position, alignment) {
          this.triedPositions[position] = this.triedPositions[position] || [];
          this.triedPositions[position].push(alignment);
        }
      }, {
        key: '_positionsExhausted',
        value: function _positionsExhausted() {
          var isExhausted = true;
          for (var i = 0; i < POSITIONS.length; i++) {
            isExhausted = isExhausted && this._alignmentsExhausted(POSITIONS[i]);
          }
          return isExhausted;
        }
      }, {
        key: '_alignmentsExhausted',
        value: function _alignmentsExhausted(position) {
          return this.triedPositions[position] && this.triedPositions[position].length == ALIGNMENTS[position].length;
        }

        // When we're trying to center, we don't want to apply offset that's going to
        // take us just off center, so wrap around to return 0 for the appropriate
        // offset in those alignments.  TODO: Figure out if we want to make this
        // configurable behavior... it feels more intuitive, especially for tooltips, but
        // it's possible someone might actually want to start from center and then nudge
        // slightly off.

      }, {
        key: '_getVOffset',
        value: function _getVOffset() {
          return this.options.vOffset;
        }
      }, {
        key: '_getHOffset',
        value: function _getHOffset() {
          return this.options.hOffset;
        }
      }, {
        key: '_setPosition',
        value: function _setPosition($anchor, $element, $parent) {
          if ($anchor.attr('aria-expanded') === 'false') {
            return false;
          }
          var $eleDims = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetDimensions($element),
              $anchorDims = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetDimensions($anchor);

          $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));

          if (!this.options.allowOverlap) {
            var overlaps = {};
            var minOverlap = 100000000;
            // default coordinates to how we start, in case we can't figure out better
            var minCoordinates = { position: this.position, alignment: this.alignment };
            while (!this._positionsExhausted()) {
              var overlap = __WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].OverlapArea($element, $parent, false, false, this.options.allowBottomOverlap);
              if (overlap === 0) {
                return;
              }

              if (overlap < minOverlap) {
                minOverlap = overlap;
                minCoordinates = { position: this.position, alignment: this.alignment };
              }

              this._reposition();

              $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
            }
            // If we get through the entire loop, there was no non-overlapping
            // position available. Pick the version with least overlap.
            this.position = minCoordinates.position;
            this.alignment = minCoordinates.alignment;
            $element.offset(__WEBPACK_IMPORTED_MODULE_0__foundation_util_box__["Box"].GetExplicitOffsets($element, $anchor, this.position, this.alignment, this._getVOffset(), this._getHOffset()));
          }
        }
      }]);

      return Positionable;
    }(__WEBPACK_IMPORTED_MODULE_1__foundation_plugin__["Plugin"]);

    Positionable.defaults = {
      /**
       * Position of positionable relative to anchor. Can be left, right, bottom, top, or auto.
       * @option
       * @type {string}
       * @default 'auto'
       */
      position: 'auto',
      /**
       * Alignment of positionable relative to anchor. Can be left, right, bottom, top, center, or auto.
       * @option
       * @type {string}
       * @default 'auto'
       */
      alignment: 'auto',
      /**
       * Allow overlap of container/window. If false, dropdown positionable first
       * try to position as defined by data-position and data-alignment, but
       * reposition if it would cause an overflow.
       * @option
       * @type {boolean}
       * @default false
       */
      allowOverlap: false,
      /**
       * Allow overlap of only the bottom of the container. This is the most common
       * behavior for dropdowns, allowing the dropdown to extend the bottom of the
       * screen but not otherwise influence or break out of the container.
       * @option
       * @type {boolean}
       * @default true
       */
      allowBottomOverlap: true,
      /**
       * Number of pixels the positionable should be separated vertically from anchor
       * @option
       * @type {number}
       * @default 0
       */
      vOffset: 0,
      /**
       * Number of pixels the positionable should be separated horizontally from anchor
       * @option
       * @type {number}
       * @default 0
       */
      hOffset: 0
    };

    /***/
  },

  /***/2:
  /***/function (module, exports) {

    module.exports = { Plugin: window.Foundation.Plugin };

    /***/
  },

  /***/3:
  /***/function (module, exports) {

    module.exports = { rtl: window.Foundation.rtl, GetYoDigits: window.Foundation.GetYoDigits, transitionend: window.Foundation.transitionend };

    /***/
  },

  /***/33:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";

    Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core__ = __webpack_require__(1);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__foundation_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__foundation_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_tooltip__ = __webpack_require__(63);

    __WEBPACK_IMPORTED_MODULE_0__foundation_core__["Foundation"].plugin(__WEBPACK_IMPORTED_MODULE_1__foundation_tooltip__["a" /* Tooltip */], 'Tooltip');

    /***/
  },

  /***/4:
  /***/function (module, exports) {

    module.exports = { Motion: window.Foundation.Motion, Move: window.Foundation.Move };

    /***/
  },

  /***/6:
  /***/function (module, exports) {

    module.exports = { MediaQuery: window.Foundation.MediaQuery };

    /***/
  },

  /***/63:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Tooltip;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core__ = __webpack_require__(3);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_core___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__ = __webpack_require__(6);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__ = __webpack_require__(7);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__foundation_positionable__ = __webpack_require__(11);

    var _createClass = function () {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
      }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
      };
    }();

    var _get = function get(object, property, receiver) {
      if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
        var parent = Object.getPrototypeOf(object);if (parent === null) {
          return undefined;
        } else {
          return get(parent, property, receiver);
        }
      } else if ("value" in desc) {
        return desc.value;
      } else {
        var getter = desc.get;if (getter === undefined) {
          return undefined;
        }return getter.call(receiver);
      }
    };

    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }

    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }

    /**
     * Tooltip module.
     * @module foundation.tooltip
     * @requires foundation.util.box
     * @requires foundation.util.mediaQuery
     * @requires foundation.util.triggers
     */

    var Tooltip = function (_Positionable) {
      _inherits(Tooltip, _Positionable);

      function Tooltip() {
        _classCallCheck(this, Tooltip);

        return _possibleConstructorReturn(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).apply(this, arguments));
      }

      _createClass(Tooltip, [{
        key: '_setup',

        /**
         * Creates a new instance of a Tooltip.
         * @class
         * @name Tooltip
         * @fires Tooltip#init
         * @param {jQuery} element - jQuery object to attach a tooltip to.
         * @param {Object} options - object to extend the default configuration.
         */
        value: function _setup(element, options) {
          this.$element = element;
          this.options = __WEBPACK_IMPORTED_MODULE_0_jquery___default.a.extend({}, Tooltip.defaults, this.$element.data(), options);
          this.className = 'Tooltip'; // ie9 back compat

          this.isActive = false;
          this.isClick = false;

          // Triggers init is idempotent, just need to make sure it is initialized
          __WEBPACK_IMPORTED_MODULE_3__foundation_util_triggers__["a" /* Triggers */].init(__WEBPACK_IMPORTED_MODULE_0_jquery___default.a);

          this._init();
        }

        /**
         * Initializes the tooltip by setting the creating the tip element, adding it's text, setting private variables and setting attributes on the anchor.
         * @private
         */

      }, {
        key: '_init',
        value: function _init() {
          __WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"]._init();
          var elemId = this.$element.attr('aria-describedby') || __webpack_require__.i(__WEBPACK_IMPORTED_MODULE_1__foundation_util_core__["GetYoDigits"])(6, 'tooltip');

          this.options.tipText = this.options.tipText || this.$element.attr('title');
          this.template = this.options.template ? __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this.options.template) : this._buildTemplate(elemId);

          if (this.options.allowHtml) {
            this.template.appendTo(document.body).html(this.options.tipText).hide();
          } else {
            this.template.appendTo(document.body).text(this.options.tipText).hide();
          }

          this.$element.attr({
            'title': '',
            'aria-describedby': elemId,
            'data-yeti-box': elemId,
            'data-toggle': elemId,
            'data-resize': elemId
          }).addClass(this.options.triggerClass);

          _get(Tooltip.prototype.__proto__ || Object.getPrototypeOf(Tooltip.prototype), '_init', this).call(this);
          this._events();
        }
      }, {
        key: '_getDefaultPosition',
        value: function _getDefaultPosition() {
          // handle legacy classnames
          var position = this.$element[0].className.match(/\b(top|left|right|bottom)\b/g);
          return position ? position[0] : 'top';
        }
      }, {
        key: '_getDefaultAlignment',
        value: function _getDefaultAlignment() {
          return 'center';
        }
      }, {
        key: '_getHOffset',
        value: function _getHOffset() {
          if (this.position === 'left' || this.position === 'right') {
            return this.options.hOffset + this.options.tooltipWidth;
          } else {
            return this.options.hOffset;
          }
        }
      }, {
        key: '_getVOffset',
        value: function _getVOffset() {
          if (this.position === 'top' || this.position === 'bottom') {
            return this.options.vOffset + this.options.tooltipHeight;
          } else {
            return this.options.vOffset;
          }
        }

        /**
         * builds the tooltip element, adds attributes, and returns the template.
         * @private
         */

      }, {
        key: '_buildTemplate',
        value: function _buildTemplate(id) {
          var templateClasses = (this.options.tooltipClass + ' ' + this.options.positionClass + ' ' + this.options.templateClasses).trim();
          var $template = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('<div></div>').addClass(templateClasses).attr({
            'role': 'tooltip',
            'aria-hidden': true,
            'data-is-active': false,
            'data-is-focus': false,
            'id': id
          });
          return $template;
        }

        /**
         * sets the position class of an element and recursively calls itself until there are no more possible positions to attempt, or the tooltip element is no longer colliding.
         * if the tooltip is larger than the screen width, default to full width - any user selected margin
         * @private
         */

      }, {
        key: '_setPosition',
        value: function _setPosition() {
          _get(Tooltip.prototype.__proto__ || Object.getPrototypeOf(Tooltip.prototype), '_setPosition', this).call(this, this.$element, this.template);
        }

        /**
         * reveals the tooltip, and fires an event to close any other open tooltips on the page
         * @fires Tooltip#closeme
         * @fires Tooltip#show
         * @function
         */

      }, {
        key: 'show',
        value: function show() {
          if (this.options.showOn !== 'all' && !__WEBPACK_IMPORTED_MODULE_2__foundation_util_mediaQuery__["MediaQuery"].is(this.options.showOn)) {
            // console.error('The screen is too small to display this tooltip');
            return false;
          }

          var _this = this;
          this.template.css('visibility', 'hidden').show();
          this._setPosition();
          this.template.removeClass('top bottom left right').addClass(this.position);
          this.template.removeClass('align-top align-bottom align-left align-right align-center').addClass('align-' + this.alignment);

          /**
           * Fires to close all other open tooltips on the page
           * @event Closeme#tooltip
           */
          this.$element.trigger('closeme.zf.tooltip', this.template.attr('id'));

          this.template.attr({
            'data-is-active': true,
            'aria-hidden': false
          });
          _this.isActive = true;
          // console.log(this.template);
          this.template.stop().hide().css('visibility', '').fadeIn(this.options.fadeInDuration, function () {
            //maybe do stuff?
          });
          /**
           * Fires when the tooltip is shown
           * @event Tooltip#show
           */
          this.$element.trigger('show.zf.tooltip');
        }

        /**
         * Hides the current tooltip, and resets the positioning class if it was changed due to collision
         * @fires Tooltip#hide
         * @function
         */

      }, {
        key: 'hide',
        value: function hide() {
          // console.log('hiding', this.$element.data('yeti-box'));
          var _this = this;
          this.template.stop().attr({
            'aria-hidden': true,
            'data-is-active': false
          }).fadeOut(this.options.fadeOutDuration, function () {
            _this.isActive = false;
            _this.isClick = false;
          });
          /**
           * fires when the tooltip is hidden
           * @event Tooltip#hide
           */
          this.$element.trigger('hide.zf.tooltip');
        }

        /**
         * adds event listeners for the tooltip and its anchor
         * TODO combine some of the listeners like focus and mouseenter, etc.
         * @private
         */

      }, {
        key: '_events',
        value: function _events() {
          var _this = this;
          var $template = this.template;
          var isFocus = false;

          if (!this.options.disableHover) {

            this.$element.on('mouseenter.zf.tooltip', function (e) {
              if (!_this.isActive) {
                _this.timeout = setTimeout(function () {
                  _this.show();
                }, _this.options.hoverDelay);
              }
            }).on('mouseleave.zf.tooltip', function (e) {
              clearTimeout(_this.timeout);
              if (!isFocus || _this.isClick && !_this.options.clickOpen) {
                _this.hide();
              }
            });
          }

          if (this.options.clickOpen) {
            this.$element.on('mousedown.zf.tooltip', function (e) {
              e.stopImmediatePropagation();
              if (_this.isClick) {
                //_this.hide();
                // _this.isClick = false;
              } else {
                _this.isClick = true;
                if ((_this.options.disableHover || !_this.$element.attr('tabindex')) && !_this.isActive) {
                  _this.show();
                }
              }
            });
          } else {
            this.$element.on('mousedown.zf.tooltip', function (e) {
              e.stopImmediatePropagation();
              _this.isClick = true;
            });
          }

          if (!this.options.disableForTouch) {
            this.$element.on('tap.zf.tooltip touchend.zf.tooltip', function (e) {
              _this.isActive ? _this.hide() : _this.show();
            });
          }

          this.$element.on({
            // 'toggle.zf.trigger': this.toggle.bind(this),
            // 'close.zf.trigger': this.hide.bind(this)
            'close.zf.trigger': this.hide.bind(this)
          });

          this.$element.on('focus.zf.tooltip', function (e) {
            isFocus = true;
            if (_this.isClick) {
              // If we're not showing open on clicks, we need to pretend a click-launched focus isn't
              // a real focus, otherwise on hover and come back we get bad behavior
              if (!_this.options.clickOpen) {
                isFocus = false;
              }
              return false;
            } else {
              _this.show();
            }
          }).on('focusout.zf.tooltip', function (e) {
            isFocus = false;
            _this.isClick = false;
            _this.hide();
          }).on('resizeme.zf.trigger', function () {
            if (_this.isActive) {
              _this._setPosition();
            }
          });
        }

        /**
         * adds a toggle method, in addition to the static show() & hide() functions
         * @function
         */

      }, {
        key: 'toggle',
        value: function toggle() {
          if (this.isActive) {
            this.hide();
          } else {
            this.show();
          }
        }

        /**
         * Destroys an instance of tooltip, removes template element from the view.
         * @function
         */

      }, {
        key: '_destroy',
        value: function _destroy() {
          this.$element.attr('title', this.template.text()).off('.zf.trigger .zf.tooltip').removeClass('has-tip top right left').removeAttr('aria-describedby aria-haspopup data-disable-hover data-resize data-toggle data-tooltip data-yeti-box');

          this.template.remove();
        }
      }]);

      return Tooltip;
    }(__WEBPACK_IMPORTED_MODULE_4__foundation_positionable__["a" /* Positionable */]);

    Tooltip.defaults = {
      disableForTouch: false,
      /**
       * Time, in ms, before a tooltip should open on hover.
       * @option
       * @type {number}
       * @default 200
       */
      hoverDelay: 200,
      /**
       * Time, in ms, a tooltip should take to fade into view.
       * @option
       * @type {number}
       * @default 150
       */
      fadeInDuration: 150,
      /**
       * Time, in ms, a tooltip should take to fade out of view.
       * @option
       * @type {number}
       * @default 150
       */
      fadeOutDuration: 150,
      /**
       * Disables hover events from opening the tooltip if set to true
       * @option
       * @type {boolean}
       * @default false
       */
      disableHover: false,
      /**
       * Optional addtional classes to apply to the tooltip template on init.
       * @option
       * @type {string}
       * @default ''
       */
      templateClasses: '',
      /**
       * Non-optional class added to tooltip templates. Foundation default is 'tooltip'.
       * @option
       * @type {string}
       * @default 'tooltip'
       */
      tooltipClass: 'tooltip',
      /**
       * Class applied to the tooltip anchor element.
       * @option
       * @type {string}
       * @default 'has-tip'
       */
      triggerClass: 'has-tip',
      /**
       * Minimum breakpoint size at which to open the tooltip.
       * @option
       * @type {string}
       * @default 'small'
       */
      showOn: 'small',
      /**
       * Custom template to be used to generate markup for tooltip.
       * @option
       * @type {string}
       * @default ''
       */
      template: '',
      /**
       * Text displayed in the tooltip template on open.
       * @option
       * @type {string}
       * @default ''
       */
      tipText: '',
      touchCloseText: 'Tap to close.',
      /**
       * Allows the tooltip to remain open if triggered with a click or touch event.
       * @option
       * @type {boolean}
       * @default true
       */
      clickOpen: true,
      /**
       * DEPRECATED Additional positioning classes, set by the JS
       * @option
       * @type {string}
       * @default ''
       */
      positionClass: '',
      /**
       * Position of tooltip. Can be left, right, bottom, top, or auto.
       * @option
       * @type {string}
       * @default 'auto'
       */
      position: 'auto',
      /**
       * Alignment of tooltip relative to anchor. Can be left, right, bottom, top, center, or auto.
       * @option
       * @type {string}
       * @default 'auto'
       */
      alignment: 'auto',
      /**
       * Allow overlap of container/window. If false, tooltip will first try to
       * position as defined by data-position and data-alignment, but reposition if
       * it would cause an overflow.  @option
       * @type {boolean}
       * @default false
       */
      allowOverlap: false,
      /**
       * Allow overlap of only the bottom of the container. This is the most common
       * behavior for dropdowns, allowing the dropdown to extend the bottom of the
       * screen but not otherwise influence or break out of the container.
       * Less common for tooltips.
       * @option
       * @type {boolean}
       * @default false
       */
      allowBottomOverlap: false,
      /**
       * Distance, in pixels, the template should push away from the anchor on the Y axis.
       * @option
       * @type {number}
       * @default 0
       */
      vOffset: 0,
      /**
       * Distance, in pixels, the template should push away from the anchor on the X axis
       * @option
       * @type {number}
       * @default 0
       */
      hOffset: 0,
      /**
       * Distance, in pixels, the template spacing auto-adjust for a vertical tooltip
       * @option
       * @type {number}
       * @default 14
       */
      tooltipHeight: 14,
      /**
       * Distance, in pixels, the template spacing auto-adjust for a horizontal tooltip
       * @option
       * @type {number}
       * @default 12
       */
      tooltipWidth: 12,
      /**
      * Allow HTML in tooltip. Warning: If you are loading user-generated content into tooltips,
      * allowing HTML may open yourself up to XSS attacks.
      * @option
      * @type {boolean}
      * @default false
      */
      allowHtml: false
    };

    /**
     * TODO utilize resize event trigger
     */

    /***/
  },

  /***/7:
  /***/function (module, __webpack_exports__, __webpack_require__) {

    "use strict";
    /* harmony export (binding) */
    __webpack_require__.d(__webpack_exports__, "a", function () {
      return Triggers;
    });
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(0);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__ = __webpack_require__(4);
    /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__);

    var MutationObserver = function () {
      var prefixes = ['WebKit', 'Moz', 'O', 'Ms', ''];
      for (var i = 0; i < prefixes.length; i++) {
        if (prefixes[i] + 'MutationObserver' in window) {
          return window[prefixes[i] + 'MutationObserver'];
        }
      }
      return false;
    }();

    var triggers = function (el, type) {
      el.data(type).split(' ').forEach(function (id) {
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id)[type === 'close' ? 'trigger' : 'triggerHandler'](type + '.zf.trigger', [el]);
      });
    };

    var Triggers = {
      Listeners: {
        Basic: {},
        Global: {}
      },
      Initializers: {}
    };

    Triggers.Listeners.Basic = {
      openListener: function () {
        triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'open');
      },
      closeListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('close');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'close');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('close.zf.trigger');
        }
      },
      toggleListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle');
        if (id) {
          triggers(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), 'toggle');
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('toggle.zf.trigger');
        }
      },
      closeableListener: function (e) {
        e.stopPropagation();
        var animation = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('closable');

        if (animation !== '') {
          __WEBPACK_IMPORTED_MODULE_1__foundation_util_motion__["Motion"].animateOut(__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this), animation, function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).trigger('closed.zf');
          });
        } else {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).fadeOut().trigger('closed.zf');
        }
      },
      toggleFocusListener: function () {
        var id = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).data('toggle-focus');
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#' + id).triggerHandler('toggle.zf.trigger', [__WEBPACK_IMPORTED_MODULE_0_jquery___default()(this)]);
      }
    };

    // Elements with [data-open] will reveal a plugin that supports it when clicked.
    Triggers.Initializers.addOpenListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.openListener);
      $elem.on('click.zf.trigger', '[data-open]', Triggers.Listeners.Basic.openListener);
    };

    // Elements with [data-close] will close a plugin that supports it when clicked.
    // If used without a value on [data-close], the event will bubble, allowing it to close a parent component.
    Triggers.Initializers.addCloseListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.closeListener);
      $elem.on('click.zf.trigger', '[data-close]', Triggers.Listeners.Basic.closeListener);
    };

    // Elements with [data-toggle] will toggle a plugin that supports it when clicked.
    Triggers.Initializers.addToggleListener = function ($elem) {
      $elem.off('click.zf.trigger', Triggers.Listeners.Basic.toggleListener);
      $elem.on('click.zf.trigger', '[data-toggle]', Triggers.Listeners.Basic.toggleListener);
    };

    // Elements with [data-closable] will respond to close.zf.trigger events.
    Triggers.Initializers.addCloseableListener = function ($elem) {
      $elem.off('close.zf.trigger', Triggers.Listeners.Basic.closeableListener);
      $elem.on('close.zf.trigger', '[data-closeable], [data-closable]', Triggers.Listeners.Basic.closeableListener);
    };

    // Elements with [data-toggle-focus] will respond to coming in and out of focus
    Triggers.Initializers.addToggleFocusListener = function ($elem) {
      $elem.off('focus.zf.trigger blur.zf.trigger', Triggers.Listeners.Basic.toggleFocusListener);
      $elem.on('focus.zf.trigger blur.zf.trigger', '[data-toggle-focus]', Triggers.Listeners.Basic.toggleFocusListener);
    };

    // More Global/complex listeners and triggers
    Triggers.Listeners.Global = {
      resizeListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('resizeme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a resize event
        $nodes.attr('data-events', "resize");
      },
      scrollListener: function ($nodes) {
        if (!MutationObserver) {
          //fallback for IE 9
          $nodes.each(function () {
            __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this).triggerHandler('scrollme.zf.trigger');
          });
        }
        //trigger all listening elements and signal a scroll event
        $nodes.attr('data-events', "scroll");
      },
      closeMeListener: function (e, pluginId) {
        var plugin = e.namespace.split('.')[0];
        var plugins = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-' + plugin + ']').not('[data-yeti-box="' + pluginId + '"]');

        plugins.each(function () {
          var _this = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(this);
          _this.triggerHandler('close.zf.trigger', [_this]);
        });
      }
    };

    // Global, parses whole document.
    Triggers.Initializers.addClosemeListener = function (pluginName) {
      var yetiBoxes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-yeti-box]'),
          plugNames = ['dropdown', 'tooltip', 'reveal'];

      if (pluginName) {
        if (typeof pluginName === 'string') {
          plugNames.push(pluginName);
        } else if (typeof pluginName === 'object' && typeof pluginName[0] === 'string') {
          plugNames.concat(pluginName);
        } else {
          console.error('Plugin names must be strings');
        }
      }
      if (yetiBoxes.length) {
        var listeners = plugNames.map(function (name) {
          return 'closeme.zf.' + name;
        }).join(' ');

        __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(listeners).on(listeners, Triggers.Listeners.Global.closeMeListener);
      }
    };

    function debounceGlobalListener(debounce, trigger, listener) {
      var timer = void 0,
          args = Array.prototype.slice.call(arguments, 3);
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()(window).off(trigger).on(trigger, function (e) {
        if (timer) {
          clearTimeout(timer);
        }
        timer = setTimeout(function () {
          listener.apply(null, args);
        }, debounce || 10); //default time to emit scroll event
      });
    }

    Triggers.Initializers.addResizeListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-resize]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'resize.zf.trigger', Triggers.Listeners.Global.resizeListener, $nodes);
      }
    };

    Triggers.Initializers.addScrollListener = function (debounce) {
      var $nodes = __WEBPACK_IMPORTED_MODULE_0_jquery___default()('[data-scroll]');
      if ($nodes.length) {
        debounceGlobalListener(debounce, 'scroll.zf.trigger', Triggers.Listeners.Global.scrollListener, $nodes);
      }
    };

    Triggers.Initializers.addMutationEventsListener = function ($elem) {
      if (!MutationObserver) {
        return false;
      }
      var $nodes = $elem.find('[data-resize], [data-scroll], [data-mutate]');

      //element callback
      var listeningElementsMutation = function (mutationRecordsList) {
        var $target = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(mutationRecordsList[0].target);

        //trigger the event handler for the element depending on type
        switch (mutationRecordsList[0].type) {
          case "attributes":
            if ($target.attr("data-events") === "scroll" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('scrollme.zf.trigger', [$target, window.pageYOffset]);
            }
            if ($target.attr("data-events") === "resize" && mutationRecordsList[0].attributeName === "data-events") {
              $target.triggerHandler('resizeme.zf.trigger', [$target]);
            }
            if (mutationRecordsList[0].attributeName === "style") {
              $target.closest("[data-mutate]").attr("data-events", "mutate");
              $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            }
            break;

          case "childList":
            $target.closest("[data-mutate]").attr("data-events", "mutate");
            $target.closest("[data-mutate]").triggerHandler('mutateme.zf.trigger', [$target.closest("[data-mutate]")]);
            break;

          default:
            return false;
          //nothing
        }
      };

      if ($nodes.length) {
        //for each element that needs to listen for resizing, scrolling, or mutation add a single observer
        for (var i = 0; i <= $nodes.length - 1; i++) {
          var elementObserver = new MutationObserver(listeningElementsMutation);
          elementObserver.observe($nodes[i], { attributes: true, childList: true, characterData: false, subtree: true, attributeFilter: ["data-events", "style"] });
        }
      }
    };

    Triggers.Initializers.addSimpleListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);

      Triggers.Initializers.addOpenListener($document);
      Triggers.Initializers.addCloseListener($document);
      Triggers.Initializers.addToggleListener($document);
      Triggers.Initializers.addCloseableListener($document);
      Triggers.Initializers.addToggleFocusListener($document);
    };

    Triggers.Initializers.addGlobalListeners = function () {
      var $document = __WEBPACK_IMPORTED_MODULE_0_jquery___default()(document);
      Triggers.Initializers.addMutationEventsListener($document);
      Triggers.Initializers.addResizeListener();
      Triggers.Initializers.addScrollListener();
      Triggers.Initializers.addClosemeListener();
    };

    Triggers.init = function ($, Foundation) {
      if (typeof $.triggersInitialized === 'undefined') {
        var $document = $(document);

        if (document.readyState === "complete") {
          Triggers.Initializers.addSimpleListeners();
          Triggers.Initializers.addGlobalListeners();
        } else {
          $(window).on('load', function () {
            Triggers.Initializers.addSimpleListeners();
            Triggers.Initializers.addGlobalListeners();
          });
        }

        $.triggersInitialized = true;
      }

      if (Foundation) {
        Foundation.Triggers = Triggers;
        // Legacy included to be backwards compatible for now.
        Foundation.IHearYou = Triggers.Initializers.addGlobalListeners;
      }
    };

    /***/
  },

  /***/8:
  /***/function (module, exports) {

    module.exports = { Box: window.Foundation.Box };

    /***/
  },

  /***/99:
  /***/function (module, exports, __webpack_require__) {

    module.exports = __webpack_require__(33);

    /***/
  }

  /******/ });
'use strict';

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

!function ($) {

  /**
   * ResponsiveAccordionTabs module.
   * @module foundation.responsiveAccordionTabs
   * @requires foundation.util.keyboard
   * @requires foundation.util.timerAndImageLoader
   * @requires foundation.util.motion
   * @requires foundation.accordion
   * @requires foundation.tabs
   */

  var ResponsiveAccordionTabs = function () {
    /**
     * Creates a new instance of a responsive accordion tabs.
     * @class
     * @fires ResponsiveAccordionTabs#init
     * @param {jQuery} element - jQuery object to make into a dropdown menu.
     * @param {Object} options - Overrides to the default plugin settings.
     */
    function ResponsiveAccordionTabs(element, options) {
      _classCallCheck(this, ResponsiveAccordionTabs);

      this.$element = $(element);
      this.options = $.extend({}, this.$element.data(), options);
      this.rules = this.$element.data('responsive-accordion-tabs');
      this.currentMq = null;
      this.currentPlugin = null;
      if (!this.$element.attr('id')) {
        this.$element.attr('id', Foundation.GetYoDigits(6, 'responsiveaccordiontabs'));
      };

      this._init();
      this._events();

      Foundation.registerPlugin(this, 'ResponsiveAccordionTabs');
    }

    /**
     * Initializes the Menu by parsing the classes from the 'data-responsive-accordion-tabs' attribute on the element.
     * @function
     * @private
     */

    _createClass(ResponsiveAccordionTabs, [{
      key: '_init',
      value: function _init() {
        // The first time an Interchange plugin is initialized, this.rules is converted from a string of "classes" to an object of rules
        if (typeof this.rules === 'string') {
          var rulesTree = {};

          // Parse rules from "classes" pulled from data attribute
          var rules = this.rules.split(' ');

          // Iterate through every rule found
          for (var i = 0; i < rules.length; i++) {
            var rule = rules[i].split('-');
            var ruleSize = rule.length > 1 ? rule[0] : 'small';
            var rulePlugin = rule.length > 1 ? rule[1] : rule[0];

            if (MenuPlugins[rulePlugin] !== null) {
              rulesTree[ruleSize] = MenuPlugins[rulePlugin];
            }
          }

          this.rules = rulesTree;
        }

        this._getAllOptions();

        if (!$.isEmptyObject(this.rules)) {
          this._checkMediaQueries();
        }
      }
    }, {
      key: '_getAllOptions',
      value: function _getAllOptions() {
        //get all defaults and options
        var _this = this;
        _this.allOptions = {};
        for (var key in MenuPlugins) {
          if (MenuPlugins.hasOwnProperty(key)) {
            var obj = MenuPlugins[key];
            try {
              var dummyPlugin = $('<ul></ul>');
              var tmpPlugin = new obj.plugin(dummyPlugin, _this.options);
              for (var keyKey in tmpPlugin.options) {
                if (tmpPlugin.options.hasOwnProperty(keyKey) && keyKey !== 'zfPlugin') {
                  var objObj = tmpPlugin.options[keyKey];
                  _this.allOptions[keyKey] = objObj;
                }
              }
              tmpPlugin.destroy();
            } catch (e) {}
          }
        }
      }

      /**
       * Initializes events for the Menu.
       * @function
       * @private
       */

    }, {
      key: '_events',
      value: function _events() {
        var _this = this;

        $(window).on('changed.zf.mediaquery', function () {
          _this._checkMediaQueries();
        });
      }

      /**
       * Checks the current screen width against available media queries. If the media query has changed, and the plugin needed has changed, the plugins will swap out.
       * @function
       * @private
       */

    }, {
      key: '_checkMediaQueries',
      value: function _checkMediaQueries() {
        var matchedMq,
            _this = this;
        // Iterate through each rule and find the last matching rule
        $.each(this.rules, function (key) {
          if (Foundation.MediaQuery.atLeast(key)) {
            matchedMq = key;
          }
        });

        // No match? No dice
        if (!matchedMq) return;

        // Plugin already initialized? We good
        if (this.currentPlugin instanceof this.rules[matchedMq].plugin) return;

        // Remove existing plugin-specific CSS classes
        $.each(MenuPlugins, function (key, value) {
          _this.$element.removeClass(value.cssClass);
        });

        // Add the CSS class for the new plugin
        this.$element.addClass(this.rules[matchedMq].cssClass);

        // Create an instance of the new plugin
        if (this.currentPlugin) {
          //don't know why but on nested elements data zfPlugin get's lost
          if (!this.currentPlugin.$element.data('zfPlugin') && this.storezfData) this.currentPlugin.$element.data('zfPlugin', this.storezfData);
          this.currentPlugin.destroy();
        }
        this._handleMarkup(this.rules[matchedMq].cssClass);
        this.currentPlugin = new this.rules[matchedMq].plugin(this.$element, {});
        this.storezfData = this.currentPlugin.$element.data('zfPlugin');
      }
    }, {
      key: '_handleMarkup',
      value: function _handleMarkup(toSet) {
        var _this = this,
            fromString = 'accordion';
        var $panels = $('[data-tabs-content=' + this.$element.attr('id') + ']');
        if ($panels.length) fromString = 'tabs';
        if (fromString === toSet) {
          return;
        };

        var tabsTitle = _this.allOptions.linkClass ? _this.allOptions.linkClass : 'tabs-title';
        var tabsPanel = _this.allOptions.panelClass ? _this.allOptions.panelClass : 'tabs-panel';

        this.$element.removeAttr('role');
        var $liHeads = this.$element.children('.' + tabsTitle + ',[data-accordion-item]').removeClass(tabsTitle).removeClass('accordion-item').removeAttr('data-accordion-item');
        var $liHeadsA = $liHeads.children('a').removeClass('accordion-title');

        if (fromString === 'tabs') {
          $panels = $panels.children('.' + tabsPanel).removeClass(tabsPanel).removeAttr('role').removeAttr('aria-hidden').removeAttr('aria-labelledby');
          $panels.children('a').removeAttr('role').removeAttr('aria-controls').removeAttr('aria-selected');
        } else {
          $panels = $liHeads.children('[data-tab-content]').removeClass('accordion-content');
        };

        $panels.css({ display: '', visibility: '' });
        $liHeads.css({ display: '', visibility: '' });
        if (toSet === 'accordion') {
          $panels.each(function (key, value) {
            $(value).appendTo($liHeads.get(key)).addClass('accordion-content').attr('data-tab-content', '').removeClass('is-active').css({ height: '' });
            $('[data-tabs-content=' + _this.$element.attr('id') + ']').after('<div id="tabs-placeholder-' + _this.$element.attr('id') + '"></div>').remove();
            $liHeads.addClass('accordion-item').attr('data-accordion-item', '');
            $liHeadsA.addClass('accordion-title');
          });
        } else if (toSet === 'tabs') {
          var $tabsContent = $('[data-tabs-content=' + _this.$element.attr('id') + ']');
          var $placeholder = $('#tabs-placeholder-' + _this.$element.attr('id'));
          if ($placeholder.length) {
            $tabsContent = $('<div class="tabs-content"></div>').insertAfter($placeholder).attr('data-tabs-content', _this.$element.attr('id'));
            $placeholder.remove();
          } else {
            $tabsContent = $('<div class="tabs-content"></div>').insertAfter(_this.$element).attr('data-tabs-content', _this.$element.attr('id'));
          };
          $panels.each(function (key, value) {
            var tempValue = $(value).appendTo($tabsContent).addClass(tabsPanel);
            var hash = $liHeadsA.get(key).hash.slice(1);
            var id = $(value).attr('id') || Foundation.GetYoDigits(6, 'accordion');
            if (hash !== id) {
              if (hash !== '') {
                $(value).attr('id', hash);
              } else {
                hash = id;
                $(value).attr('id', hash);
                $($liHeadsA.get(key)).attr('href', $($liHeadsA.get(key)).attr('href').replace('#', '') + '#' + hash);
              };
            };
            var isActive = $($liHeads.get(key)).hasClass('is-active');
            if (isActive) {
              tempValue.addClass('is-active');
            };
          });
          $liHeads.addClass(tabsTitle);
        };
      }

      /**
       * Destroys the instance of the current plugin on this element, as well as the window resize handler that switches the plugins out.
       * @function
       */

    }, {
      key: 'destroy',
      value: function destroy() {
        if (this.currentPlugin) this.currentPlugin.destroy();
        $(window).off('.zf.ResponsiveAccordionTabs');
        Foundation.unregisterPlugin(this);
      }
    }]);

    return ResponsiveAccordionTabs;
  }();

  ResponsiveAccordionTabs.defaults = {};

  // The plugin matches the plugin classes with these plugin instances.
  var MenuPlugins = {
    tabs: {
      cssClass: 'tabs',
      plugin: Foundation._plugins.tabs || null
    },
    accordion: {
      cssClass: 'accordion',
      plugin: Foundation._plugins.accordion || null
    }
  };

  // Window exports
  Foundation.plugin(ResponsiveAccordionTabs, 'ResponsiveAccordionTabs');
}(jQuery);
"use strict";

// --------------------------------------------------
// APP.JS
// --------------------------------------------------

//
// Initialize Foundation
// --------------------------------------------------

$(document).foundation();

//
// Custom JS
// --------------------------------------------------
//# sourceMappingURL=data:application/json;charset=utf8;base64,
